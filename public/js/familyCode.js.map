{"version":3,"file":"js/familyCode.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAGA;AAEA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AACA;;AAEA;AACA;AAEA;AAEA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;AC/FA;AAAA;AAAA;AAAA;AADA;AACA;AAIA;AAEA;AAEA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;;AAGA;;AAEA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAGA;;AAEA;AAAA;AAEA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA","sources":["webpack://family/./resources/asset/js/components/global.js","webpack://family/./resources/asset/js/components/register/familyCode.js"],"sourcesContent":["import axios from \"axios\"\n\nexport const id = (id) => document.getElementById(id)\nexport const idValue = (id) => id(id).value\nexport const idInnerHTML = (id) => id(id).innerHTML\nexport const warningSign = \"\\u26A0\"; // danger warning sign\n\nexport const qSel = (name) => document.querySelector(name)\nexport const qSelAll = (name) => document.querySelectorAll(name)\nexport const qSelValue = (name) => qSel(name).value\nexport const qSelInnerHTML = (name) => qSel(name).innerHTML\n\nexport const log = (id, identifier =null) => {\n    console.log(' start'+ \"  \" + identifier)\n    console.log(id)\n    console.log(' end'+ \"  \" +identifier)\n}\nexport const write = (input) => document.write(input)\n\nexport const hideElement = (elementId) => {\n  id(elementId).style.display = \"none\";\n};\n\nexport const showElement = (elementId) => {\n  id(elementId).style.display = \"block\";\n};\n\nexport const manipulateAttribute = (idName, removeOrSet, attributeType, nameValue =null) => {\n\n    if(removeOrSet === \"remove\") {\n           id(idName).removeAttribute(attributeType)\n    } else {\n        id(idName).setAttribute(attributeType, nameValue)\n    }\n \n  \n}\n\nexport const date2String = (date) => new Date().toDateString(date)\n\nexport const showError = (e) => {\n  \n    log(e.message, \" ERROR MESSAGE\") // \"null has no properties\"\n    log(e.name, \" ERROR NAME\") // \"TypeError\"\n    log(e.fileName,  \" ERROR FILENAME\") // \"Scratchpad/1\"\n    log(e.lineNumber, \" ERROR LINENUMBER\") // 2\n\n    log(e.stack)\n}\n\nexport const msgException = (errorMessage) => {\n  \n    throw new Error(errorMessage)\n}\n\n\n/**\n * \n * @param {*} elementId - element id\n * @param {*} addClass either a success or danger class (green or red)\n * @param {*} message - html message to convey success or failure\n * @param {*} timer - timer for the message to disappear- default is 5 secs\n */\nexport const showNotification = (elementId, addClass, message, timer = 5000) => {\n    // display the success information for 10sec\n    id(`${elementId}`).style.display = \"block\" // unblock the notification\n    id(`${elementId}`).classList.add(addClass) // add the success class\n    id(`${elementId}`).innerHTML = message // error element\n    id('loader').classList.remove('loader') // remove loader\n\n    setTimeout(() => {\n        id(`${elementId}`).style.backgroundColor = \"\"\n        id(`${elementId}`).style.color = \"\"\n        id(`${elementId}`).innerHTML = \"\"\n    }, timer)\n}\n\n    // Function to check for elements and render if they exist\n    export const checkElements = (idOrClass, classString, theFunction = null) => {\n\n        const doesElementExist = (idOrClass === \"id\") ? id(classString) : qSel(classString)\n        // Check if elements exist before calling render function\n        if (doesElementExist.length) {\n            theFunction(doesElementExist);\n        }\n\n    };\n\n     export const checkManyElements = (idOrClass, classString, theFunction = null) => {\n\n        const doesElementExist = (idOrClass === \"id\") ? id(classString) : qSelAll(classString)\n        // Check if elements exist before calling render function\n        if (doesElementExist.length > 0) {\n            theFunction(doesElementExist);\n        }\n\n    };\n\n","import { id } from \"../global\"\nconst button = id(\"btnFamCode\");\n\n\n\nbtnFamCode.addEventListener(\"click\", function() {\n\n    try {\n\n        if (id('surname_id').value !== \"\") {\n            const uniqueNumber = Date.now();\n\n            const uniqueNumber1 = Math.ceil(Math.floor(Math.random() * uniqueNumber) / 10000000);\n\n            const getSurname = id('surname_id').value\n\n            const firstFourLetters = getSurname.substring(0, 4);\n\n            id('createCode').value = `${firstFourLetters.toUpperCase()}${uniqueNumber1}`;\n            btnFamCode.disabled = true;\n        }\n    } catch (error) {\n        id(\"surname_error\").innerHTML = error.messages;\n\n    }\n\n});\n\n\n// Get references to the HTML output and the copy icon\n\nconst copyIcon = id('copyIcon');\nconst htmlOutputDiv = id('createFamCode');\nconst htmlOutput = id('createCode');\n\ncopyIcon.addEventListener('click', async function(e) {\n    copyIcon.innerHTML = \"\";\n\n    try {\n        e.preventDefault();\n\n        // check if the family code has been generated \n\n        if (htmlOutput.value) {\n\n            if (navigator.clipboard && navigator.clipboard.writeText) {\n                await navigator.clipboard.writeText(htmlOutput.value);\n            } else {\n                // Fallback to the deprecated method\n                const range = document.createRange();\n                range.selectNode(htmlOutputDiv);\n                const selection = window.getSelection();\n                selection.removeAllRanges();\n                selection.addRange(range);\n                document.execCommand('copy');\n                selection.removeAllRanges();\n            }\n\n            copyIcon.innerHTML = \"copied\";\n            id('famCode_id').value = htmlOutput.value\n\n        } else {\n            copyIcon.innerHTML = \"copy\";\n            id('famCode_id').value = \"\"\n            alert('Please generate the family code first')\n\n        }\n\n\n    } catch (e) {\n        console.error('Unable to copy the HTML output: ', e);\n    }\n});"],"names":[],"sourceRoot":""}