{"version":3,"file":"js/familyCode.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;;AAGA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAGA;AAAA;AACA;AACA;;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAGA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AACA;;AAEA;AACA;AAEA;AAEA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AAEA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;;;;;;;;;;;;AClQA;AAAA;AAAA;AAAA;AADA;AACA;AAIA;AAEA;AAEA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;;AAGA;;AAEA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAGA;;AAEA;AAAA;AAEA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA","sources":["webpack://family/./resources/asset/js/components/global.js","webpack://family/./resources/asset/js/components/register/familyCode.js"],"sourcesContent":["import axios from \"axios\"\n// Import emoji metadata from emojibase (English locale, full dataset)\n\n\nexport const id = (id) => document.getElementById(id)\nexport const idValue = (id) => id(id).value\nexport const idInnerHTML = (id) => id(id).innerHTML\nexport const warningSign = \"\\u26A0\"; // danger warning sign\n\nexport const qSel = (name) => document.querySelector(name)\nexport const qSelAll = (name) => document.querySelectorAll(name)\nexport const qSelValue = (name) => qSel(name).value\nexport const qSelInnerHTML = (name) => qSel(name).innerHTML\n\nexport const log = (id, identifier = null) => {\n    console.log(' start' + \"  \" + identifier)\n    console.log(id)\n    console.log(' end' + \"  \" + identifier)\n}\nexport const write = (input) => document.write(input)\n\nexport const hideElement = (elementId) => {\n    id(elementId).style.display = \"none\";\n};\n\nexport const showElement = (elementId) => {\n    id(elementId).style.display = \"block\";\n};\n\nexport const manipulateAttribute = (idName, removeOrSet, attributeType, nameValue = null) => {\n\n    if (removeOrSet === \"remove\") {\n        id(idName).removeAttribute(attributeType)\n    } else {\n        id(idName).setAttribute(attributeType, nameValue)\n    }\n\n\n}\n\n/**\n * Resets a form by clearing all input fields, validation messages, \n * image previews and custom inputs.\n * @param {string} formId - The ID of the form to reset.\n */\nexport const formReset = (formId) => {\n    const form = id(formId);\n    if (!form) {\n        console.warn(`Form with ID \"${formId}\" not found.`);\n        return;\n    }\n\n    // Reset form fields\n    form.reset();\n\n    // Clear validation messages\n    form.querySelectorAll('.is-invalid, .invalid-feedback').forEach(el => {\n        el.classList.remove('is-invalid');\n        if (el.classList.contains('invalid-feedback')) {\n            el.textContent = '';\n        }\n    });\n\n\n    // Clear image previews\n    form.querySelectorAll('.preview-img').forEach(img => {\n        img.src = '';\n        img.style.display = 'none';\n    });\n\n    // Clear custom inputs (e.g., emoji pickers, rich text)\n    form.querySelectorAll('[data-custom-input]').forEach(el => {\n        el.value = '';\n    });\n}\n\n\nexport const fileUploadSizeValidation = (fileInputId, maxSizeMB = 3) => {\n    const fileInput = id(fileInputId);\n    if (!fileInput || !fileInput.files) return true; // No files to validate\n\n    const maxSizeBytes = maxSizeMB * 1024 * 1024;\n    for (const file of fileInput.files) {\n        if (file.size > maxSizeBytes) {\n            alert(`File ${file.name} exceeds the maximum size of ${maxSizeMB}MB.`);\n            fileInput.value = ''; // Clear the input\n            return false; // Validation failed\n        } else if (file.size === 0) {\n            alert(`File ${file.name} is empty and cannot be uploaded.`);\n            fileInput.value = ''; // Clear the input\n            return false; // Validation failed\n        } else if (file.type.includes(\"exe\") || file.type.includes(\"sh\") || file.type.includes(\"bat\") || file.type.includes(\"js\")) {\n            alert(`File ${file.name} is of an unsupported type and cannot be uploaded.`);\n            fileInput.value = ''; // Clear the input\n            return false; // Validation failed\n        } else if (!file.type.startsWith(\"image/\") && !file.type.startsWith(\"video/\") && !file.type.startsWith(\"audio/\") && !file.type === \"application/pdf\" && !file.type === \"application/msword\" && !file.type === \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\") {\n            alert(`File ${file.name} is of an unsupported type and cannot be uploaded.`);\n            fileInput.value = ''; // Clear the input\n            return false; // Validation failed\n        }\n    }\n    return true; // All files are within size limit\n};\n\n\nexport const date2String = (date) => new Date().toDateString(date)\n\nexport const showError = (e) => {\n\n    log(e.message, \" ERROR MESSAGE\") // \"null has no properties\"\n    log(e.name, \" ERROR NAME\") // \"TypeError\"\n    log(e.fileName, \" ERROR FILENAME\") // \"Scratchpad/1\"\n    log(e.lineNumber, \" ERROR LINENUMBER\") // 2\n\n    log(e.stack)\n}\n\nexport const msgException = (errorMessage) => {\n\n    throw new Error(errorMessage)\n}\n\n\n/**\n * \n * @param {*} elementId - element id\n * @param {*} addClass either a success or danger class (green or red)\n * @param {*} message - html message to convey success or failure\n * @param {*} timer - timer for the message to disappear- default is 5 secs\n */\nexport const showNotification = (elementId, addClass, message, timer = 5000) => {\n    // display the success information for 10sec\n    id(`${elementId}`).style.display = \"block\" // unblock the notification\n    id(`${elementId}`).classList.add(addClass) // add the success class\n    id(`${elementId}`).innerHTML = message // error element\n    // id('loader').classList.remove('loader') // remove loader\n\n    setTimeout(() => {\n        id(`${elementId}`).style.backgroundColor = \"\"\n        id(`${elementId}`).style.color = \"\"\n        id(`${elementId}`).innerHTML = \"\"\n    }, timer)\n}\n\n// Function to check for elements and render if they exist\nexport const checkElements = (idOrClass, classString, theFunction = null) => {\n\n    const doesElementExist = (idOrClass === \"id\") ? id(classString) : qSel(classString)\n    // Check if elements exist before calling render function\n    if (doesElementExist.length) {\n        theFunction(doesElementExist);\n    }\n\n};\n\nexport const checkManyElements = (idOrClass, classString, theFunction = null) => {\n\n    const doesElementExist = (idOrClass === \"id\") ? id(classString) : qSelAll(classString)\n    // Check if elements exist before calling render function\n    if (doesElementExist.length > 0) {\n        theFunction(doesElementExist);\n    }\n\n};\n\n/**\n* ----------------------------------------------------------------\n* Reusable Image Modal Function\n* ----------------------------------------------------------------\n* This function finds all images with the specified selector\n* and attaches a click event to show them in a modal.\n*\n* @param {string} selector - The CSS selector for the images you want to be zoomable (e.g., '.zoomable-image').\n* @param {string} modalId - The ID of the modal element (e.g., 'imageModal').\n* @param {string} modalImageId - The ID of the image element inside the modal (e.g., 'modalImage').\n* @param {string} modalCloseId - The ID of the close button inside the modal (e.g., 'imageModalClose').\n* @param {string} imgSrc - The source URL of the image to display in the modal.\n* @param {string} imgAlt - The alt text for the image to display in the modal.\n* ---------------------------------------------------------------- \n*/\nexport const initializeImageModal = (selector, clickedImageIndex, modalId, modalImageId, modalCloseId) => {\n    // Get references to the modal elements\n    // Global variables to manage modal state\n    let currentImages = [];\n    let currentImageIndex = 0;\n    const modal = document.getElementById(modalId);\n    const modalImage = document.getElementById(modalImageId);\n    const closeModal = document.getElementById(modalCloseId);\n    const prevButton = document.getElementById('prevButton');\n    const nextButton = document.getElementById('nextButton');\n\n\n    // Find all images that match the selector\n    const images = document.querySelectorAll(selector);\n\n    log(images[images.length - 1].src, \" IMAGES\")\n\n\n    // Guard clause: if no modal or images, do nothing.\n    if (!modal || !modalImage || !closeModal || images.length === 0) {\n        console.warn('Image modal setup failed: Required elements not found.');\n        return;\n    }\n\n    // Function to hide the modal\n    const hideModal = () => {\n        modal.classList.remove('show');\n        document.body.style.overflow = ''; // Restore scrolling\n    };\n\n\n    // Function to show the modal with a specific image\n    const showModal = (index) => {\n        if (!currentImages || currentImages.length === 0) return;\n\n        if (index < 0) {\n            currentImageIndex = currentImages.length - 1; // Loop to the last image\n        } else if (index >= currentImages.length) {\n            currentImageIndex = 0; // Loop to the first image\n        } else {\n            currentImageIndex = index;\n        }\n        modalImage.src = currentImages[currentImageIndex].src;\n        modalImage.alt = currentImages[currentImageIndex].alt;\n        modal.classList.add(\"show\");\n        document.body.style.overflow = \"hidden\"; // Prevent background scrolling\n    };\n\n    // Event listeners for modal controls\n    closeModal.addEventListener(\"click\", hideModal);\n    prevButton.addEventListener(\"click\", () => showModal(currentImageIndex - 1));\n    nextButton.addEventListener(\"click\", () => showModal(currentImageIndex + 1));\n    modal.addEventListener(\"click\", (e) => {\n        if (e.target === modal) {\n            hideModal();\n        }\n    });\n\n    // Keyboard navigation\n    document.addEventListener(\"keydown\", (e) => {\n        if (modal.classList.contains(\"show\")) {\n            if (e.key === \"Escape\") {\n                hideModal();\n            } else if (e.key === \"ArrowLeft\") {\n                showModal(currentImageIndex - 1);\n            } else if (e.key === \"ArrowRight\") {\n                showModal(currentImageIndex + 1);\n            }\n        }\n    });\n\n    currentImages = Array.from(document.querySelectorAll(selector));\n    if (currentImages.length > 0) {\n        showModal(clickedImageIndex);\n    } else {\n        console.warn(`No images found for selector: ${selector}`);\n    }\n\n\n}\n\n\n\n","import { id } from \"../global\"\nconst button = id(\"btnFamCode\");\n\n\n\nbtnFamCode.addEventListener(\"click\", function() {\n\n    try {\n\n        if (id('surname_id').value !== \"\") {\n            const uniqueNumber = Date.now();\n\n            const uniqueNumber1 = Math.ceil(Math.floor(Math.random() * uniqueNumber) / 10000000);\n\n            const getSurname = id('surname_id').value\n\n            const firstFourLetters = getSurname.substring(0, 4);\n\n            id('createCode').value = `${firstFourLetters.toUpperCase()}${uniqueNumber1}`;\n            btnFamCode.disabled = true;\n        }\n    } catch (error) {\n        id(\"surname_error\").innerHTML = error.messages;\n\n    }\n\n});\n\n\n// Get references to the HTML output and the copy icon\n\nconst copyIcon = id('copyIcon');\nconst htmlOutputDiv = id('createFamCode');\nconst htmlOutput = id('createCode');\n\ncopyIcon.addEventListener('click', async function(e) {\n    copyIcon.innerHTML = \"\";\n\n    try {\n        e.preventDefault();\n\n        // check if the family code has been generated \n\n        if (htmlOutput.value) {\n\n            if (navigator.clipboard && navigator.clipboard.writeText) {\n                await navigator.clipboard.writeText(htmlOutput.value);\n            } else {\n                // Fallback to the deprecated method\n                const range = document.createRange();\n                range.selectNode(htmlOutputDiv);\n                const selection = window.getSelection();\n                selection.removeAllRanges();\n                selection.addRange(range);\n                document.execCommand('copy');\n                selection.removeAllRanges();\n            }\n\n            copyIcon.innerHTML = \"copied\";\n            id('famCode_id').value = htmlOutput.value\n\n        } else {\n            copyIcon.innerHTML = \"copy\";\n            id('famCode_id').value = \"\"\n            alert('Please generate the family code first')\n\n        }\n\n\n    } catch (e) {\n        console.error('Unable to copy the HTML output: ', e);\n    }\n});"],"names":[],"sourceRoot":""}