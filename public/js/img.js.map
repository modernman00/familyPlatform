{"version":3,"file":"js/img.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;;AAGA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAGA;AAAA;AACA;AACA;;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAGA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AACA;;AAEA;AACA;AAEA;AAEA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AAEA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;;;;;;;;;;;;;;;;;;;;;;;AClQA;AAAA;AAAA;AAAA;AAAA;AADA;AACA;AACA;AACA;;AAEA;AAAA;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAGA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAEA;AAAA;AAAA;;AAIA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAGA;AAEA;AACA;AAGA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAEA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AACA;AAGA;AAIA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAGA;AACA;AACA;AAEA;AAKA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAxFA;AAAA;AAAA;;AA0FA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AAvBA;AAAA;AAAA;AAyBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAKA;AAHA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AAzBA;AAAA;AAAA;;AA4BA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAIA;AAHA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AArBA;AAAA;AAAA;AAsBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;AClRA;AACA;AAEA;AAEA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AA4DA;;AAEA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AAEA;AACA;AAGA;AAEA;AACA;AACA;AACA;AAEA;AACA;;AAGA;AACA;AACA;AACA;AAGA;AAGA;AAGA;;;;;;;;;;;;;;;;;;;AChHA;AACA;AACA;AACA;AACA;AAGA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAqBA;;;;;;;;;;;;;;AC/BA;AAAA;AACA;AAoDA;;;;;;;;;;;;;;ACrDA;AACA;AA4BA;;;;;;;;;;;;;;;;AC7BA;AACA;AACA;AAAA;AAAA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAGA;;AAGA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAAA;AAAA;AAAA;AAEA;AAEA;AAUA;;;;;;;;;;;;;;;ACvCA;AAEA;AACA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AAWA;AAIA;AAAA;AAAA;;AAGA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAEA;;AAEA;AACA;AACA;;;;;;;;;;;;;ACxCA","sources":["webpack://family/./resources/asset/js/components/global.js","webpack://family/./resources/asset/js/components/helper/http.js","webpack://family/./resources/asset/js/components/profilePage/comment.js","webpack://family/./resources/asset/js/components/profilePage/html.js","webpack://family/./resources/asset/js/components/profilePage/htmlFolder/commentForm.js","webpack://family/./resources/asset/js/components/profilePage/htmlFolder/likeCommentButton.js","webpack://family/./resources/asset/js/components/profilePage/htmlFolder/nameImageTiming.js","webpack://family/./resources/asset/js/components/profilePage/htmlFolder/showPostImages.js","webpack://family/./resources/asset/js/components/profilePage/imgViewer.js"],"sourcesContent":["import axios from \"axios\"\n// Import emoji metadata from emojibase (English locale, full dataset)\n\n\nexport const id = (id) => document.getElementById(id)\nexport const idValue = (id) => id(id).value\nexport const idInnerHTML = (id) => id(id).innerHTML\nexport const warningSign = \"\\u26A0\"; // danger warning sign\n\nexport const qSel = (name) => document.querySelector(name)\nexport const qSelAll = (name) => document.querySelectorAll(name)\nexport const qSelValue = (name) => qSel(name).value\nexport const qSelInnerHTML = (name) => qSel(name).innerHTML\n\nexport const log = (id, identifier = null) => {\n    console.log(' start' + \"  \" + identifier)\n    console.log(id)\n    console.log(' end' + \"  \" + identifier)\n}\nexport const write = (input) => document.write(input)\n\nexport const hideElement = (elementId) => {\n    id(elementId).style.display = \"none\";\n};\n\nexport const showElement = (elementId) => {\n    id(elementId).style.display = \"block\";\n};\n\nexport const manipulateAttribute = (idName, removeOrSet, attributeType, nameValue = null) => {\n\n    if (removeOrSet === \"remove\") {\n        id(idName).removeAttribute(attributeType)\n    } else {\n        id(idName).setAttribute(attributeType, nameValue)\n    }\n\n\n}\n\n/**\n * Resets a form by clearing all input fields, validation messages, \n * image previews and custom inputs.\n * @param {string} formId - The ID of the form to reset.\n */\nexport const formReset = (formId) => {\n    const form = id(formId);\n    if (!form) {\n        console.warn(`Form with ID \"${formId}\" not found.`);\n        return;\n    }\n\n    // Reset form fields\n    form.reset();\n\n    // Clear validation messages\n    form.querySelectorAll('.is-invalid, .invalid-feedback').forEach(el => {\n        el.classList.remove('is-invalid');\n        if (el.classList.contains('invalid-feedback')) {\n            el.textContent = '';\n        }\n    });\n\n\n    // Clear image previews\n    form.querySelectorAll('.preview-img').forEach(img => {\n        img.src = '';\n        img.style.display = 'none';\n    });\n\n    // Clear custom inputs (e.g., emoji pickers, rich text)\n    form.querySelectorAll('[data-custom-input]').forEach(el => {\n        el.value = '';\n    });\n}\n\n\nexport const fileUploadSizeValidation = (fileInputId, maxSizeMB = 3) => {\n    const fileInput = id(fileInputId);\n    if (!fileInput || !fileInput.files) return true; // No files to validate\n\n    const maxSizeBytes = maxSizeMB * 1024 * 1024;\n    for (const file of fileInput.files) {\n        if (file.size > maxSizeBytes) {\n            alert(`File ${file.name} exceeds the maximum size of ${maxSizeMB}MB.`);\n            fileInput.value = ''; // Clear the input\n            return false; // Validation failed\n        } else if (file.size === 0) {\n            alert(`File ${file.name} is empty and cannot be uploaded.`);\n            fileInput.value = ''; // Clear the input\n            return false; // Validation failed\n        } else if (file.type.includes(\"exe\") || file.type.includes(\"sh\") || file.type.includes(\"bat\") || file.type.includes(\"js\")) {\n            alert(`File ${file.name} is of an unsupported type and cannot be uploaded.`);\n            fileInput.value = ''; // Clear the input\n            return false; // Validation failed\n        } else if (!file.type.startsWith(\"image/\") && !file.type.startsWith(\"video/\") && !file.type.startsWith(\"audio/\") && !file.type === \"application/pdf\" && !file.type === \"application/msword\" && !file.type === \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\") {\n            alert(`File ${file.name} is of an unsupported type and cannot be uploaded.`);\n            fileInput.value = ''; // Clear the input\n            return false; // Validation failed\n        }\n    }\n    return true; // All files are within size limit\n};\n\n\nexport const date2String = (date) => new Date().toDateString(date)\n\nexport const showError = (e) => {\n\n    log(e.message, \" ERROR MESSAGE\") // \"null has no properties\"\n    log(e.name, \" ERROR NAME\") // \"TypeError\"\n    log(e.fileName, \" ERROR FILENAME\") // \"Scratchpad/1\"\n    log(e.lineNumber, \" ERROR LINENUMBER\") // 2\n\n    log(e.stack)\n}\n\nexport const msgException = (errorMessage) => {\n\n    throw new Error(errorMessage)\n}\n\n\n/**\n * \n * @param {*} elementId - element id\n * @param {*} addClass either a success or danger class (green or red)\n * @param {*} message - html message to convey success or failure\n * @param {*} timer - timer for the message to disappear- default is 5 secs\n */\nexport const showNotification = (elementId, addClass, message, timer = 5000) => {\n    // display the success information for 10sec\n    id(`${elementId}`).style.display = \"block\" // unblock the notification\n    id(`${elementId}`).classList.add(addClass) // add the success class\n    id(`${elementId}`).innerHTML = message // error element\n    // id('loader').classList.remove('loader') // remove loader\n\n    setTimeout(() => {\n        id(`${elementId}`).style.backgroundColor = \"\"\n        id(`${elementId}`).style.color = \"\"\n        id(`${elementId}`).innerHTML = \"\"\n    }, timer)\n}\n\n// Function to check for elements and render if they exist\nexport const checkElements = (idOrClass, classString, theFunction = null) => {\n\n    const doesElementExist = (idOrClass === \"id\") ? id(classString) : qSel(classString)\n    // Check if elements exist before calling render function\n    if (doesElementExist.length) {\n        theFunction(doesElementExist);\n    }\n\n};\n\nexport const checkManyElements = (idOrClass, classString, theFunction = null) => {\n\n    const doesElementExist = (idOrClass === \"id\") ? id(classString) : qSelAll(classString)\n    // Check if elements exist before calling render function\n    if (doesElementExist.length > 0) {\n        theFunction(doesElementExist);\n    }\n\n};\n\n/**\n* ----------------------------------------------------------------\n* Reusable Image Modal Function\n* ----------------------------------------------------------------\n* This function finds all images with the specified selector\n* and attaches a click event to show them in a modal.\n*\n* @param {string} selector - The CSS selector for the images you want to be zoomable (e.g., '.zoomable-image').\n* @param {string} modalId - The ID of the modal element (e.g., 'imageModal').\n* @param {string} modalImageId - The ID of the image element inside the modal (e.g., 'modalImage').\n* @param {string} modalCloseId - The ID of the close button inside the modal (e.g., 'imageModalClose').\n* @param {string} imgSrc - The source URL of the image to display in the modal.\n* @param {string} imgAlt - The alt text for the image to display in the modal.\n* ---------------------------------------------------------------- \n*/\nexport const initializeImageModal = (selector, clickedImageIndex, modalId, modalImageId, modalCloseId) => {\n    // Get references to the modal elements\n    // Global variables to manage modal state\n    let currentImages = [];\n    let currentImageIndex = 0;\n    const modal = document.getElementById(modalId);\n    const modalImage = document.getElementById(modalImageId);\n    const closeModal = document.getElementById(modalCloseId);\n    const prevButton = document.getElementById('prevButton');\n    const nextButton = document.getElementById('nextButton');\n\n\n    // Find all images that match the selector\n    const images = document.querySelectorAll(selector);\n\n    log(images[images.length - 1].src, \" IMAGES\")\n\n\n    // Guard clause: if no modal or images, do nothing.\n    if (!modal || !modalImage || !closeModal || images.length === 0) {\n        console.warn('Image modal setup failed: Required elements not found.');\n        return;\n    }\n\n    // Function to hide the modal\n    const hideModal = () => {\n        modal.classList.remove('show');\n        document.body.style.overflow = ''; // Restore scrolling\n    };\n\n\n    // Function to show the modal with a specific image\n    const showModal = (index) => {\n        if (!currentImages || currentImages.length === 0) return;\n\n        if (index < 0) {\n            currentImageIndex = currentImages.length - 1; // Loop to the last image\n        } else if (index >= currentImages.length) {\n            currentImageIndex = 0; // Loop to the first image\n        } else {\n            currentImageIndex = index;\n        }\n        modalImage.src = currentImages[currentImageIndex].src;\n        modalImage.alt = currentImages[currentImageIndex].alt;\n        modal.classList.add(\"show\");\n        document.body.style.overflow = \"hidden\"; // Prevent background scrolling\n    };\n\n    // Event listeners for modal controls\n    closeModal.addEventListener(\"click\", hideModal);\n    prevButton.addEventListener(\"click\", () => showModal(currentImageIndex - 1));\n    nextButton.addEventListener(\"click\", () => showModal(currentImageIndex + 1));\n    modal.addEventListener(\"click\", (e) => {\n        if (e.target === modal) {\n            hideModal();\n        }\n    });\n\n    // Keyboard navigation\n    document.addEventListener(\"keydown\", (e) => {\n        if (modal.classList.contains(\"show\")) {\n            if (e.key === \"Escape\") {\n                hideModal();\n            } else if (e.key === \"ArrowLeft\") {\n                showModal(currentImageIndex - 1);\n            } else if (e.key === \"ArrowRight\") {\n                showModal(currentImageIndex + 1);\n            }\n        }\n    });\n\n    currentImages = Array.from(document.querySelectorAll(selector));\n    if (currentImages.length > 0) {\n        showModal(clickedImageIndex);\n    } else {\n        console.warn(`No images found for selector: ${selector}`);\n    }\n\n\n}\n\n\n\n","import { id, log } from '../global'\nimport axios from 'axios'\nimport axiosRetry from 'axios-retry';\n// import Cookies from 'js-cookie'\n\naxiosRetry(axios, { retries: 3 });\n\n/**\n * \n* Sends form data via POST request.\n * @param {string} url - The URL to post the data to.\n * @param {string} formId - The ID or class of the form.\n * @param {string|null} redirect - The page to redirect to after successful submission.\n * @param {string|null} css - The CSS framework to use for notification styling (e.g., 'W3css', 'bulma').\n NOTICE:::Make sure you set the notification id as the formId_notification\n */\nexport const postFormData = async (url, formId, redirect = null, css = null) => {\n\n    let notificationForm = `${formId}_notification`\n    const notificationId = id(notificationForm)\n\n\n    if (!notificationId) {\n        throw new Error('Notification element not found');\n    }\n    // Cleanup previous notification styles\n    notificationId.style.display = 'none';\n\n    ['is-danger', 'is-success', 'w3-red', 'w3-green', 'bg-danger', 'bg-success'].forEach(cls => notificationId.classList.remove(cls));\n\n\n\n    // extract the form entriesËËË\n    const form = id(formId)\n\n    if (!form) {\n        throw new Error('Form element not found');\n    }\n\n    let formEntries = new FormData(form)\n\n    formEntries.delete('submit')\n    formEntries.delete('checkbox_id')\n\n\n    const options = {\n        baseURL: '/', // Adjust to your API base URL\n        xsrfCookieName: 'XSRF-TOKEN',\n        xsrfHeaderName: 'X-XSRF-TOKEN',\n        withCredentials: true, // Ensure cookies (e.g., XSRF token) are sent\n    }\n\n    // AXIOS POST FUNCTIONALITY\n    try {\n        const response = await axios.post(url, formEntries, options);\n\n        // Check for successful status (2xx)\n        if (response.status < 200 || response.status >= 300) {\n            throw new Error(response.data?.message || 'Request failed');\n        }\n\n        const successClass = getNotificationClassByCSS(css || 'bulma', 'green');\n\n        // check if response.data.message is an array\n\n        let idSetFromHttp = null;\n        let famCodeSetFromHttp = null;\n        let dbHttpResult = null;\n\n        if (response.data && typeof response.data.message === 'object') {\n            idSetFromHttp = response.data.message.id || null;\n            famCodeSetFromHttp = response.data.message.famCode || null;\n            dbHttpResult = response.data.message.outcome || null;\n\n            if (!idSetFromHttp) throw new Error('idSetFromHttp is missing');\n            if (!dbHttpResult) throw new Error('dbHttpResult is missing');\n            if (!famCodeSetFromHttp) throw new Error('famCodeSetFromHttp is missing');\n        } else {\n            dbHttpResult = response.data.message;\n        }\n\n        // Set sessionStorage items if not already set\n        if (!sessionStorage.getItem('idSetFromHttp')) sessionStorage.setItem('idSetFromHttp', idSetFromHttp);\n        if (!sessionStorage.getItem('famCodeSetFromHttp')) sessionStorage.setItem('famCodeSetFromHttp', famCodeSetFromHttp);\n\n        processFormDataAction(successClass, dbHttpResult, notificationId);\n\n\n\n\n        if (redirect) {\n            const redirectDelay = 2000; // Configurable delay in ms\n            setTimeout(() => {\n                window.location.assign(redirect);\n            }, redirectDelay);\n        }\n\n    } catch (error) {\n\n        const errorClass = getNotificationClassByCSS(css || 'bulma', 'red');\n        const errorMessage = error.response?.data?.error || error.request || 'An unknown error occurred';\n        processFormDataAction(errorClass, errorMessage, notificationId);\n\n    }\n};\n\n/**\n * Process form data action.\n * @param {string} cssClass - The CSS class for the notification.\n * @param {string} message - The notification message.\n */\nconst processFormDataAction = (cssClass, message, formNotificationId) => {\n    if (formNotificationId) {\n        formNotificationId.style.display = 'block';\n        formNotificationId.classList.add(cssClass);\n        const errorElement = id('error');\n        if (errorElement) {\n            errorElement.scrollIntoView({ behavior: 'smooth' });\n            errorElement.innerHTML = message;\n        }\n        const loader = id('setLoader');\n        if (loader) loader.classList.remove('loader');\n    } else {\n        log('Notification element not found');\n    }\n};\n\n/**\n * Get the notification class based on the CSS framework.\n * @param {string|null} css - The CSS framework to use for notification styling.\n * @param {string} status - The status of the notification ('green' or 'red').\n * @returns {string} - The corresponding CSS class.\n */\nconst getNotificationClassByCSS = (css, status) => {\n    switch (css) {\n        case 'W3css':\n            return status === 'green' ? 'w3-green' : 'w3-red';\n        case 'bulma':\n            return status === 'green' ? 'is-success' : 'is-danger';\n        case 'bootstrap':\n            return status === 'green' ? 'bg-success' : 'bg-danger';\n        default:\n            return status === 'green' ? 'bg-success' : 'bg-danger';\n    }\n};\n\n\n/**\n * \n * @param { the url you want to get} URL \n * @returns \n // now we can use that data from the outside!\naxiosTest()\n    .then(data => {\n        response.json({ message: 'Request received!', data })\n    })\n    .catch(err => console.log(err))\n */\n\nexport const getApiData = async (URL, token = null) => {\n    try {\n\n        const config = {\n            headers: {\n                'X-Requested-With': 'XMLHttpRequest',\n                'Content-Type': 'application/json',\n                'Accept': 'application/json',\n                'Authorization': 'Bearer ' + token\n            },\n        }\n\n        const fetch = await axios.get(URL, config)\n        return fetch.data\n\n\n    } catch (error) {\n\n        return error;\n\n    }\n\n\n}\n\nexport const getMultipleApiData = async (url1, url2, token = null) => {\n    try {\n\n        const config = {\n            headers: {\n                'X-Requested-With': 'XMLHttpRequest',\n                'Content-Type': 'application/json',\n                'Accept': 'application/json',\n                'Authorization': 'Bearer ' + token\n            },\n        }\n\n        const fetch = await axios.all([\n            axios.get(url1, config),\n            axios.get(url2, config)\n        ])\n        return fetch\n\n    } catch (error) {\n\n        return error;\n\n    }\n\n\n}\n\n\n// build a function to post multiple api form data\n\nexport const postMultipleApiData = async (url1, url2, formData, token = null) => {\n    try {\n\n        const config = {\n            headers: {\n                'X-Requested-With': 'XMLHttpRequest',\n                'Content-Type': 'application/json',\n                'Accept': 'application/json',\n                'Authorization': 'Bearer ' + token\n            },\n        }\n        const fetch = await axios.all([\n            axios.post(url1, formData, config),\n            axios.post(url2, formData, config)\n        ])\n\n        return fetch\n\n    } catch (error) {\n        return error;\n    }\n}\n/**\n * \n * @param { name} cname \n * @param {* value} cvalue \n * @param {* no of days 365} exdays \n */\nexport const setCookie = (cname, cvalue, exdays) => {\n    var d = new Date();\n    d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));\n    var expires = \"expires=\" + d.toUTCString();\n    document.cookie = cname + \"=\" + cvalue + \";\" + expires + \";path=/\";\n}\n\nexport const getCookie = (cname) => {\n    var name = cname + \"=\";\n    var ca = document.cookie.split(';');\n    for (var i = 0; i < ca.length; i++) {\n        var c = ca[i];\n        while (c.charAt(0) == ' ') {\n            c = c.substring(1);\n        }\n        if (c.indexOf(name) == 0) {\n            return c.substring(name.length, c.length);\n        }\n    }\n    return \"\";\n}\n\nexport const checkCookie = () => {\n    var user = getCookie(\"username\");\n    if (user != \"\") {\n        alert(\"Welcome again \" + user);\n    } else {\n        user = prompt(\"Please enter your name:\", \"\");\n        if (user != \"\" && user != null) {\n            setCookie(\"username\", user, 365);\n        }\n    }\n}","import { format } from \"timeago.js\"\nimport { toSentenceCase, id} from \"@shared\"\n\nconst reqId = localStorage.getItem('requesterId');\n\nexport const commentHTML = (data, postId) => {\n\n  const {profileImg, fullName, date_created, img, comment, comment_no, id} = data\n  const imgURL = profileImg || img \n  const image = (imgURL) ? `/resources/images/profile/${imgURL}` : `/public/avatar/avatarF.png`\n\n  return `<div class=\"d-flex mb-3 commentDiv align-items-start\" data-commentDiv-no=\"${comment_no}\" id=\"commentDiv${comment_no}\" name=\"commentDiv\">\n\n  <img src=\"${image}\" alt=\"Avatar\" class=\"rounded-circle me-2 commentImg\" width=\"32\" height=\"32\">\n\n  <div class=\"flex-grow-1\">\n    <div class=\"d-flex justify-content-between align-items-center\">\n      <strong>${toSentenceCase(fullName)}</strong>\n      <small class=\"text-muted commentTiming\" datetime=\"${date_created}\" title=\"${date_created}\">\n        ${format(date_created)}\n      </small>\n    </div>\n\n    <div class=\"comment-text mb-2\">\n      ${comment}\n    </div>\n\n     <div class=\"reaction-preview\" id=\"reaction-preview-${comment_no}\"></div>\n\n      <div class=\"comment-actions d-flex gap-3\">         \n                <div class=\"reaction-bar\"  id=\"reaction-bar-${comment_no}\">\n\n                    <div class=\"reaction-option\" data-option-no=\"${comment_no}\" id=\"reaction-option-like-${comment_no}\" data-reaction=\"like\" data-label=\"Like\">\n\n                      👍\n\n                    </div>\n\n                    <div class=\"reaction-option\" data-option-no=\"${comment_no}\" id=\"reaction-option-love-${comment_no}\" data-reaction=\"love\" data-label=\"Love\">\n                      ❤️\n                    </div>\n                    <div class=\"reaction-option\" data-option-no=\"${comment_no}\"id=\"reaction-option-haha-${comment_no}\" data-reaction=\"haha\" data-label=\"Haha\">\n                      😄\n                    </div>\n                    <div class=\"reaction-option\" data-option-no=\"${comment_no}\"id=\"reaction-option-wow-${comment_no}\" data-reaction=\"wow\" data-label=\"Wow\">\n                     😮\n                    </div>\n                    <div class=\"reaction-option\" data-option-no=\"${comment_no}\"id=\"reaction-option-sad-${comment_no}\" data-reaction=\"sad\" data-label=\"Sad\">\n                      😢\n                    </div>\n                    <div class=\"reaction-option\" data-option-no=\"${comment_no}\"id=\"reaction-option-angry-${comment_no}\"\n                     data-reaction=\"angry\" data-label=\"Angry\">\n                      😠\n                    </div>\n                </div>\n\n                <div class=\"reaction-button like-button-${comment_no}\" id=\"like-button-${comment_no}\" data-comment-no=\"${comment_no}\">\n                    <i class=\"bi bi-hand-thumbs-up reaction-icon\" id=\"like-icon-${comment_no}\"></i>\n                    <span>Like</span>\n                    <div class=\"reaction-count\" id=\"like-count-${comment_no}\">0</div>\n                </div>\n\n                ${\n                  reqId == id || reqId == postId ? `<button class=\"btn btn-sm btn-icon text-danger\" id=\"removeComment(${comment_no})\" title=\"Remove\">\n                    <i class=\"bi bi-trash\" id=\"removeCommentIcon${comment_no}\"></i>\n                </button>` : ''\n                }        \n      </div>\n  </div>\n</div><hr>`\n\n}\n\n// i need the postid to use to show the delete button \nexport const showComment = (comment, postId) => {\n  if (!comment) {\n    return `<div id=\"comment\" name=\"commentDiv\"></div>`;\n  } // only run if there is comment\n\n\n  // USED FOR ALL THE COMMENTS WHEN THE PAGE IS LOADING\n  const commentHTMLArray = comment.map(commentElement => {\n    return commentHTML(commentElement, postId);\n  });\n\n  return commentHTMLArray.join(''); // Join the array elements into a single string\n}\n\n\nexport const appendNewComment = (commentData) => {\n\n  // check if commentData is valid\n  if (!commentData) {\n    throw new Error('No comment update received');\n  }\n\n  const idDiv = `showComment${commentData.post_no}`\n  // check if the div has been created by the DOM \n\n\n  const commentContainer = id(idDiv);\n    if (!commentContainer) {\n    throw new Error(`The comment div id does not exist `)\n  }\n\n\n  const commentHtml = commentHTML(commentData)\n\n\n  commentContainer.insertAdjacentHTML('beforeend', commentHtml)\n\n\n}\n\n\n\n","import { nameImgTiming } from './htmlFolder/nameImageTiming'\nimport { commentForm } from \"./htmlFolder/commentForm\"\nimport { likeCommentButton } from \"./htmlFolder/likeCommentButton\"\nimport { showPostImg, imgCount } from \"./htmlFolder/showPostImages\"\nimport { showComment} from \"./comment\"\n\n\nexport const html = (el, comment = null) => {\n  const { post_no, postMessage, id } = el\n  const commentLength = comment.length;\n  return `\n    <div class=\"post card\" id=\"post${post_no}\">\n     <div class=\"card-body post${post_no}\" id=\"postIt\">\n    ${nameImgTiming(el)}\n\n    <div class=\"post-content\">\n    <p class=\"card-text\"> ${postMessage} </p>\n\n     <div class=\"photo-grid grid-${imgCount(el)}\">\n      ${showPostImg(el)}\n    </div>\n    </div>\n\n    ${likeCommentButton(el, commentLength)}\n    ${commentForm(el)}\n    <div id = 'showComment${post_no}' class=\"comment-section\">\n    ${showComment(comment, id)}\n\n      \n    </div>\n`\n}\n\n\n\n\n","export const commentForm = ({ post_no }) => {\n  return `\n    <p id=\"formComment${post_no}_notification\"></p>\n\n    <form \n      action=\"/postCommentProfile\" \n      method=\"post\" \n      id=\"formComment${post_no}\" \n      enctype=\"multipart/form-data\"\n      class=\"mb-4 d-none formComment${post_no}\"\n    >\n\n      <input \n        type=\"hidden\" \n        name=\"post_no\" \n        value=\"${post_no}\" \n      />\n\n       <div id=\"emojiCommentPickerList${post_no}\" class=\"d-flex flex-wrap gap-2 mt-2 d-none\" role=\"listbox\" aria-hidden=\"true\">\n      </div>\n\n      <div id=\"gifPickerList\" class=\"d-flex flex-wrap gap-2 mt-2 d-none\" role=\"listbox\" aria-hidden=\"true\"></div>\n\n        \n\n             \n\n                <textarea class=\"form-control inputComment mb-3\" data-commentEmoji-target id=\"inputComment${post_no}\" name=\"comment\" rows=2> </textarea/>\n                \n     <div class=\"mt-3 d-flex justify-content-between align-items-center position-relative\">\n     <div class=\"d-flex gap-2\">\n                    <button type=\"button\" class=\"btn btn-sm btn-outline-secondary\"\n                                title=\"add emoji\" \n                                id=\"emojiToggle${post_no}\"aria-expanded=\"false\" aria-controls=\"emojiPickerList\">\n                                😊\n                            </button>\n\n\n              <button type=\"button\" class=\"btn btn-sm btn-outline-secondary\" id=\"stickerToggle${post_no}\"  title=\"Stickers\"\n                                aria-label=\"Stickers\">🏷️</button>\n  </div>\n                <button \n                    type=\"submit\" \n                    id=\"submitComment${post_no}\" \n                    class=\"btn btn-outline-primary btn-sm submitComment\"\n                >\n              Submit\n            </button>\n      \n            \n          </div>\n    </form>\n  `;\n};\n","export const likeCommentButton = (data, commentLength) => {\n  return `\n   <div class=\"reaction-buttons d-flex justify-content-between border-top border-bottom py-2 mb-1\">\n    <button \n      type=\"button\" \n      id=\"likeButton${data.post_no}\" \n      name=\"${data.post_no}\"\n      <i class=\"bi bi-hand-thumbs-up me-1\"></i> \n          Like \n        <b>\n          <span class=\"likeCounter\" id=\"likeCounter${data.post_no}\">\n            ${data.post_likes}\n          </span>\n        </b>\n    </button>\n\n    <button \n      type=\"button\" \n      id=\"initComment${data.post_no}\">\n        <i class=\"bi bi-chat me-1\"></i> \n          Comment \n          (<span class=\"commentCounter\" id=\"commentCounter${data.post_no}\">\n            ${commentLength}\n          </span>)\n          \n      </button>\n   \n    </div>\n    `\n}","import { format } from \"timeago.js\"\nimport { toSentenceCase} from \"@shared\"\nconst timeAgo = (x) => format(x)\n\n// const fullName = (fullName) => {\n//   return `<h6 id=\"fullName\"><b>${fullName}</b> </h6>`\n// }\n\n// const postedAt = (date) => {\n//   return `<div class=\"timeago postTimeCal w3-right w3-opacity\"  datetime='${date.date_created}' title='${format(date.date_created)}'> ${timeAgo(date.post_time)}</div>`\n// }\n\n\n// export const nameImgTiming2 = (data) => {\n\n\n//     const img = (data.profileImg) ? `/public/img/profile/${data.profileImg}` : \"/public/avatar/avatarF.png\"\n\n//     return `<a href=\"/profilepage/img?dir=img&pics=${data.img}&pID=${data.post_no}&path=profile&id=${data.id}\"> \n//       <img src=${img} alt=\"img\" class=\"w3-left w3-circle w3-margin-right postImg\" style=\"width:60px\">\n//         </a>\n//         ${postedAt(data)} ${fullName(data.fullName)}`\n// }\n\nexport const nameImgTiming = (data) => {\n    const { profileImg, fullName, date_created, post_time} = data;\n\n    const img = (profileImg) ? `/resources/images/profile/${profileImg}` : \"/public/avatar/avatarF.png\"\n\n    return `<div class=\"d-flex align-items-center mb-3\">\n\n            <img src=\"${img}\" alt=\"Profile\" class=\"rounded-circle me-3 postImg\" width=\"40\" height=\"40\">\n                        \n            <div>\n                <h6 class=\"mb-0\">${toSentenceCase(fullName)} </h6>\n\n                <small class=\"text-muted\">posted </small><small class=\"text-muted timeago postTimeCal\" title='${format(date_created)}' datetime='${date_created}'> ${timeAgo(post_time)}</small>\n            </div>\n            </div>`\n}\n\n","export const showPostImg = (data) => {\n\n// GET THE IMAGES WITH VALUES F=IF THERE ARE ANY. FILTER USING THE OBJECT KEY AND THEN MAP THROUGH THE VALUE\n  const postImagesWithValues = Object.keys(data)\n  .filter(key => key.startsWith('post_img') && data[key] !== null)\n  .map(el => data[el])\n\n  const picsImgHtml = (imgElement, i, postNo) => `\n  \n\n     \n        <img \n          src=\"/resources/images/post/${imgElement}\" \n          alt=\"images${i}\" \n          data-postImgId=\"${postNo}${imgElement}\"\n          data-imgIndex=\"${i}\"\n          data-postNo=\"${postNo}\"\n          class=\"grid-image zoomable-image${postNo}\" \n          id=\"postImage${i}\"\n          >\n  `;\n\n  const imgElements = postImagesWithValues.map((pics, i) => picsImgHtml(pics, i, data.post_no)).join('');\n\n\n    // ✅ Optional: return both HTML and count for contributor-safe rendering\n  return imgElements\n\n};\n\nexport const imgCount = (data) => {\n  // GET THE IMAGES WITH VALUES F=IF THERE ARE ANY. FILTER USING THE OBJECT KEY AND THEN MAP THROUGH THE VALUE\n    const postImagesWithValues = Object.keys(data)\n    .filter(key => key.startsWith('post_img') && data[key] !== null)\n    .map(el => data[el])\n  \n    const imageCount = postImagesWithValues.length;\n  \n      // ✅ Optional: return both HTML and count for contributor-safe rendering\n    return imageCount;\n  }\n","import {showComment} from \"./html\"\nimport { getAllData } from \"../helper/http\"\n\n\n\n\n\n"],"names":[],"sourceRoot":""}