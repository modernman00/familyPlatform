{"version":3,"file":"js/img.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;AAAA;AAAA;AAAA;AADA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAGA;AAEA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AACA;;AAEA;AACA;AAEA;AAEA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AAIA;AAGA;AAIA;AACA;AAEA;AAAA;AAAA;AAGA;AAAA;AAGA;AAEA;AACA;;AAEA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAtCA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;ACrGA;AAAA;AAAA;AAAA;AAAA;AADA;AACA;AACA;AACA;;AAEA;AAAA;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAGA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAEA;AAAA;AAAA;;AAIA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAGA;AAEA;AACA;AAGA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAEA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AACA;AAGA;AAIA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAGA;AACA;AACA;AAEA;AAKA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAxFA;AAAA;AAAA;;AA0FA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AAvBA;AAAA;AAAA;AAyBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAKA;AAHA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AAzBA;AAAA;AAAA;;AA4BA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAIA;AAHA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AArBA;AAAA;AAAA;AAsBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;AClRA;AACA;AAEA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAGA;AAEA;AAcA;AAEA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AAEA;AACA;AAGA;AAEA;AACA;AACA;AACA;AAEA;AACA;;AAEA;AACA;AACA;AACA;AAGA;AAGA;AAGA;AAEA;AACA;AAeA;;;;;;;;;;;;;;;;;;;ACnFA;AACA;AACA;AACA;AACA;AAGA;AAAA;AACA;AAAA;AACA;AAcA;;;;;;;;;;;;;;ACvBA;AAAA;AACA;AAsCA;;;;;;;;;;;;;;ACvCA;AACA;AAwBA;;;;;;;;;;;;;;;ACzBA;AACA;AAAA;AAAA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAGA;;AAGA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAAA;AAAA;AAAA;AAEA;AAEA;AAUA;;;;;;;;;;;;;;ACtCA;AAEA;AACA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AAGA;AAKA;AAAA;AAAA;AAEA;AAKA;;;;;;;;;;;;;ACtBA","sources":["webpack://family/./resources/asset/js/components/global.js","webpack://family/./resources/asset/js/components/helper/http.js","webpack://family/./resources/asset/js/components/profilePage/comment.js","webpack://family/./resources/asset/js/components/profilePage/html.js","webpack://family/./resources/asset/js/components/profilePage/htmlFolder/commentForm.js","webpack://family/./resources/asset/js/components/profilePage/htmlFolder/likeCommentButton.js","webpack://family/./resources/asset/js/components/profilePage/htmlFolder/nameImageTiming.js","webpack://family/./resources/asset/js/components/profilePage/htmlFolder/showPostImages.js","webpack://family/./resources/asset/js/components/profilePage/imgViewer.js"],"sourcesContent":["import axios from \"axios\"\n\nexport const id = (id) => document.getElementById(id)\nexport const idValue = (id) => id(id).value\nexport const idInnerHTML = (id) => id(id).innerHTML\nexport const warningSign = \"\\u26A0\"; // danger warning sign\n\nexport const qSel = (name) => document.querySelector(name)\nexport const qSelAll = (name) => document.querySelectorAll(name)\nexport const qSelValue = (name) => qSel(name).value\nexport const qSelInnerHTML = (name) => qSel(name).innerHTML\n\nexport const log = (id, identifier =null) => {\n    console.log(' start'+ \"  \" + identifier)\n    console.log(id)\n    console.log(' end'+ \"  \" +identifier)\n}\nexport const write = (input) => document.write(input)\n\nexport const hideElement = (elementId) => {\n  id(elementId).style.display = \"none\";\n};\n\nexport const showElement = (elementId) => {\n  id(elementId).style.display = \"block\";\n};\n\nexport const manipulateAttribute = (idName, removeOrSet, attributeType, nameValue =null) => {\n\n    if(removeOrSet === \"remove\") {\n           id(idName).removeAttribute(attributeType)\n    } else {\n        id(idName).setAttribute(attributeType, nameValue)\n    }\n \n  \n}\n\nexport const date2String = (date) => new Date().toDateString(date)\n\nexport const showError = (e) => {\n  \n    log(e.message, \" ERROR MESSAGE\") // \"null has no properties\"\n    log(e.name, \" ERROR NAME\") // \"TypeError\"\n    log(e.fileName,  \" ERROR FILENAME\") // \"Scratchpad/1\"\n    log(e.lineNumber, \" ERROR LINENUMBER\") // 2\n\n    log(e.stack)\n}\n\nexport const msgException = (errorMessage) => {\n  \n    throw new Error(errorMessage)\n}\n\n\n/**\n * \n * @param {*} elementId - element id\n * @param {*} addClass either a success or danger class (green or red)\n * @param {*} message - html message to convey success or failure\n * @param {*} timer - timer for the message to disappear- default is 5 secs\n */\nexport const showNotification = (elementId, addClass, message, timer = 5000) => {\n    // display the success information for 10sec\n    id(`${elementId}`).style.display = \"block\" // unblock the notification\n    id(`${elementId}`).classList.add(addClass) // add the success class\n    id(`${elementId}`).innerHTML = message // error element\n    id('loader').classList.remove('loader') // remove loader\n\n    setTimeout(() => {\n        id(`${elementId}`).style.backgroundColor = \"\"\n        id(`${elementId}`).style.color = \"\"\n        id(`${elementId}`).innerHTML = \"\"\n    }, timer)\n}\n\n    // Function to check for elements and render if they exist\n    export const checkElements = (idOrClass, classString, theFunction = null) => {\n\n        const doesElementExist = (idOrClass === \"id\") ? id(classString) : qSel(classString)\n        // Check if elements exist before calling render function\n        if (doesElementExist.length) {\n            theFunction(doesElementExist);\n        }\n\n    };\n\n     export const checkManyElements = (idOrClass, classString, theFunction = null) => {\n\n        const doesElementExist = (idOrClass === \"id\") ? id(classString) : qSelAll(classString)\n        // Check if elements exist before calling render function\n        if (doesElementExist.length > 0) {\n            theFunction(doesElementExist);\n        }\n\n    };\n\n    const yourId = localStorage.getItem('requesterId');\n    const famCode = localStorage.getItem('requesterFamCode');\n\n    // delete notification \n    export const deleteNotification = async (elementId) => {\n\n         // Extract the user ID from the target ID\n            const senderId = elementId.replace(\"deleteNotification\", \"notificationBar\");\n          \n            const elementData = id(elementId)\n            const data = elementData.getAttribute(\"data-id\");\n\n            // change the background of the clicked element \n\n            const notificationHTML = id(senderId);\n\n            // Make sure required variables are defined before using them\n            if (\n                typeof yourId === 'undefined' ||\n                typeof famCode === 'undefined'\n            ) {\n                msgException(\"Required parameters (yourId or famCode) are not defined\");\n            }\n\n            const url = `/removeNotification/${yourId}/${famCode}/${data}`\n\n\n            const response = await axios.put(url)\n\n\n            if (response.data.message === \"Notification marked as read\") {\n\n                // remove a html element with notificationBar after 2 mins \n                notificationHTML.remove()\n\n                // reduce the notification count as you have deleted the notification\n\n                const newValues = parseInt(sessionStorage.getItem('notificationCount') - 1)\n                id('notification_count').innerHTML = newValues;\n            } else {\n                msgException(\"Error removing notification\" + \" \" + response.data.message);\n            }\n    }","import { id, log } from '../global'\nimport axios from 'axios'\nimport axiosRetry from 'axios-retry';\n// import Cookies from 'js-cookie'\n\naxiosRetry(axios, { retries: 3 });\n\n/**\n * \n* Sends form data via POST request.\n * @param {string} url - The URL to post the data to.\n * @param {string} formId - The ID or class of the form.\n * @param {string|null} redirect - The page to redirect to after successful submission.\n * @param {string|null} css - The CSS framework to use for notification styling (e.g., 'W3css', 'bulma').\n NOTICE:::Make sure you set the notification id as the formId_notification\n */\nexport const postFormData = async (url, formId, redirect = null, css = null) => {\n\n    let notificationForm = `${formId}_notification`\n    const notificationId = id(notificationForm)\n\n\n    if (!notificationId) {\n        throw new Error('Notification element not found');\n    }\n    // Cleanup previous notification styles\n    notificationId.style.display = 'none';\n\n    ['is-danger', 'is-success', 'w3-red', 'w3-green', 'bg-danger', 'bg-success'].forEach(cls => notificationId.classList.remove(cls));\n\n\n\n    // extract the form entriesËËË\n    const form = id(formId)\n\n    if (!form) {\n        throw new Error('Form element not found');\n    }\n\n    let formEntries = new FormData(form)\n\n    formEntries.delete('submit')\n    formEntries.delete('checkbox_id')\n\n\n    const options = {\n        baseURL: '/', // Adjust to your API base URL\n        xsrfCookieName: 'XSRF-TOKEN',\n        xsrfHeaderName: 'X-XSRF-TOKEN',\n        withCredentials: true, // Ensure cookies (e.g., XSRF token) are sent\n    }\n\n    // AXIOS POST FUNCTIONALITY\n    try {\n        const response = await axios.post(url, formEntries, options);\n\n        // Check for successful status (2xx)\n        if (response.status < 200 || response.status >= 300) {\n            throw new Error(response.data?.message || 'Request failed');\n        }\n\n        const successClass = getNotificationClassByCSS(css || 'bulma', 'green');\n\n        // check if response.data.message is an array\n\n        let idSetFromHttp = null;\n        let famCodeSetFromHttp = null;\n        let dbHttpResult = null;\n\n        if (response.data && typeof response.data.message === 'object') {\n            idSetFromHttp = response.data.message.id || null;\n            famCodeSetFromHttp = response.data.message.famCode || null;\n            dbHttpResult = response.data.message.outcome || null;\n\n            if (!idSetFromHttp) throw new Error('idSetFromHttp is missing');\n            if (!dbHttpResult) throw new Error('dbHttpResult is missing');\n            if (!famCodeSetFromHttp) throw new Error('famCodeSetFromHttp is missing');\n        } else {\n            dbHttpResult = response.data.message;\n        }\n\n        // Set sessionStorage items if not already set\n        if (!sessionStorage.getItem('idSetFromHttp')) sessionStorage.setItem('idSetFromHttp', idSetFromHttp);\n        if (!sessionStorage.getItem('famCodeSetFromHttp')) sessionStorage.setItem('famCodeSetFromHttp', famCodeSetFromHttp);\n\n        processFormDataAction(successClass, dbHttpResult, notificationId);\n\n\n\n\n        if (redirect) {\n            const redirectDelay = 2000; // Configurable delay in ms\n            setTimeout(() => {\n                window.location.assign(redirect);\n            }, redirectDelay);\n        }\n\n    } catch (error) {\n\n        const errorClass = getNotificationClassByCSS(css || 'bulma', 'red');\n        const errorMessage = error.response?.data?.error || error.request || 'An unknown error occurred';\n        processFormDataAction(errorClass, errorMessage, notificationId);\n\n    }\n};\n\n/**\n * Process form data action.\n * @param {string} cssClass - The CSS class for the notification.\n * @param {string} message - The notification message.\n */\nconst processFormDataAction = (cssClass, message, formNotificationId) => {\n    if (formNotificationId) {\n        formNotificationId.style.display = 'block';\n        formNotificationId.classList.add(cssClass);\n        const errorElement = id('error');\n        if (errorElement) {\n            errorElement.scrollIntoView({ behavior: 'smooth' });\n            errorElement.innerHTML = message;\n        }\n        const loader = id('setLoader');\n        if (loader) loader.classList.remove('loader');\n    } else {\n        log('Notification element not found');\n    }\n};\n\n/**\n * Get the notification class based on the CSS framework.\n * @param {string|null} css - The CSS framework to use for notification styling.\n * @param {string} status - The status of the notification ('green' or 'red').\n * @returns {string} - The corresponding CSS class.\n */\nconst getNotificationClassByCSS = (css, status) => {\n    switch (css) {\n        case 'W3css':\n            return status === 'green' ? 'w3-green' : 'w3-red';\n        case 'bulma':\n            return status === 'green' ? 'is-success' : 'is-danger';\n        case 'bootstrap':\n            return status === 'green' ? 'bg-success' : 'bg-danger';\n        default:\n            return status === 'green' ? 'bg-success' : 'bg-danger';\n    }\n};\n\n\n/**\n * \n * @param { the url you want to get} URL \n * @returns \n // now we can use that data from the outside!\naxiosTest()\n    .then(data => {\n        response.json({ message: 'Request received!', data })\n    })\n    .catch(err => console.log(err))\n */\n\nexport const getApiData = async (URL, token = null) => {\n    try {\n\n        const config = {\n            headers: {\n                'X-Requested-With': 'XMLHttpRequest',\n                'Content-Type': 'application/json',\n                'Accept': 'application/json',\n                'Authorization': 'Bearer ' + token\n            },\n        }\n\n        const fetch = await axios.get(URL, config)\n        return fetch.data\n\n\n    } catch (error) {\n\n        return error;\n\n    }\n\n\n}\n\nexport const getMultipleApiData = async (url1, url2, token = null) => {\n    try {\n\n        const config = {\n            headers: {\n                'X-Requested-With': 'XMLHttpRequest',\n                'Content-Type': 'application/json',\n                'Accept': 'application/json',\n                'Authorization': 'Bearer ' + token\n            },\n        }\n\n        const fetch = await axios.all([\n            axios.get(url1, config),\n            axios.get(url2, config)\n        ])\n        return fetch\n\n    } catch (error) {\n\n        return error;\n\n    }\n\n\n}\n\n\n// build a function to post multiple api form data\n\nexport const postMultipleApiData = async (url1, url2, formData, token = null) => {\n    try {\n\n        const config = {\n            headers: {\n                'X-Requested-With': 'XMLHttpRequest',\n                'Content-Type': 'application/json',\n                'Accept': 'application/json',\n                'Authorization': 'Bearer ' + token\n            },\n        }\n        const fetch = await axios.all([\n            axios.post(url1, formData, config),\n            axios.post(url2, formData, config)\n        ])\n\n        return fetch\n\n    } catch (error) {\n        return error;\n    }\n}\n/**\n * \n * @param { name} cname \n * @param {* value} cvalue \n * @param {* no of days 365} exdays \n */\nexport const setCookie = (cname, cvalue, exdays) => {\n    var d = new Date();\n    d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));\n    var expires = \"expires=\" + d.toUTCString();\n    document.cookie = cname + \"=\" + cvalue + \";\" + expires + \";path=/\";\n}\n\nexport const getCookie = (cname) => {\n    var name = cname + \"=\";\n    var ca = document.cookie.split(';');\n    for (var i = 0; i < ca.length; i++) {\n        var c = ca[i];\n        while (c.charAt(0) == ' ') {\n            c = c.substring(1);\n        }\n        if (c.indexOf(name) == 0) {\n            return c.substring(name.length, c.length);\n        }\n    }\n    return \"\";\n}\n\nexport const checkCookie = () => {\n    var user = getCookie(\"username\");\n    if (user != \"\") {\n        alert(\"Welcome again \" + user);\n    } else {\n        user = prompt(\"Please enter your name:\", \"\");\n        if (user != \"\" && user != null) {\n            setCookie(\"username\", user, 365);\n        }\n    }\n}","import { format } from \"timeago.js\"\nimport { id, log } from \"../global\";\n\nexport const commentHTML = (data) => {\n\n  const {profileImg, fullName, date_created, img, comment, comment_no} = data\n\n  const imgURL = profileImg || img \n\n  \n  const image = (imgURL) ? `/public/img/profile/${imgURL}` : `/public/avatar/avatarF.png`\n\n  return `<div class='d-flex mb-3 commentDiv' id='comment${comment_no}' name='commentDiv'>\n         \n      <img src='${image}' alt='Avatar' class=\"rounded-circle me-2 commentImg\" width=\"32\" height=\"32\">\n\n              <div class=\"flex-grow-1\">\n                <div class=\"comment\">\n                  <strong> ${fullName}</strong>\n                  ${comment}  \n                  <small class='w3-right w3-opacity commentTiming' datetime='${date_created}' title='${date_created}'> ${format(date_created)} \n                  </small> \n                  </div>\n              </div>\n         \n          </div>`\n}\n\nexport const showComment = (comment) => {\n  if (!comment) {\n    return `<div id=\"comment\" name=\"commentDiv\"></div>`;\n  } // only run if there is comment\n\n\n  // USED FOR ALL THE COMMENTS WHEN THE PAGE IS LOADING\n  const commentHTMLArray = comment.map(commentElement => {\n    return commentHTML(commentElement);\n  });\n\n  return commentHTMLArray.join(''); // Join the array elements into a single string\n}\n\n\nexport const appendNewComment = (commentData) => {\n\n  // check if commentData is valid\n  if (!commentData) {\n    throw new Error('No comment update received');\n  }\n\n  const idDiv = `showComment${commentData.post_no}`\n  // check if the div has been created by the DOM \n\n  const commentContainer = id(idDiv);\n    if (!commentContainer) {\n    throw new Error(`The comment div id does not exist `)\n  }\n\n\n  const commentHtml = commentHTML(commentData)\n\n\n  commentContainer.insertAdjacentHTML('beforeend', commentHtml)\n\n\n}\n\nexport const writeComment = (postNo) => {\n  return ` \n    <form action=\"/postCommentProfile\" \n      id=\"formComment${postNo}\" \n    >\n          <div class=\"mt-3\">\n              <div class=\"input-group\">\n                <input type=\"text\" class=\"form-control\" \n                id=\"inputComment${postNo}\" placeholder=\"Write a comment...\">\n\n                <button class=\"btn btn-outline-primary\" type=\"button\" id=\"inputComment${postNo}\" name=\"inputComment\">Post</button>\n\n              </div>\n          </div>\n    </form>\n    `\n}\n\n\n","import { nameImgTiming } from './htmlFolder/nameImageTiming'\nimport { commentForm } from \"./htmlFolder/commentForm\"\nimport { likeCommentButton } from \"./htmlFolder/likeCommentButton\"\nimport { showPostImg } from \"./htmlFolder/showPostImages\"\nimport { showComment, writeComment } from \"./comment\"\n\n\nexport const html = (el, comment = null) => {\n  const { post_no, postMessage } = el\n  return `\n    <div class=\"post card\">\n     <div class=\"card-body post{{$data['post_no']}}\" id=\"postIt\">\n    ${nameImgTiming(el)}\n    <p class=\"card-text\"> ${postMessage} </p>\n    ${showPostImg(el)}\n    ${likeCommentButton(el)}\n    ${commentForm(el)}\n    <div id = 'showComment${post_no}' class=\"comment-section\">\n    ${showComment(comment)}\n    ${writeComment(el)}\n      \n    </div>\n`\n}\n\n\n\n\n","export const commentForm = ({ post_no }) => {\n  return `\n    <p id=\"formComment${post_no}_notification\"></p>\n\n    <form \n      action=\"/postCommentProfile\" \n      method=\"post\" \n      id=\"formComment${post_no}\" \n      style=\"display:none\" \n      enctype=\"multipart/form-data\"\n      class=\"mb-4\"\n    >\n\n      <input \n        type=\"hidden\" \n        name=\"post_no\" \n        value=\"${post_no}\" \n      />\n\n      <input \n        type=\"text\" \n        class=\"form-control form-control-sm rounded-pill inputComment\" \n        placeholder=\"Write a comment\" \n        id=\"inputComment${post_no}\" \n        name=\"comment\" \n        value=\"\"\n      />\n\n      <div class=\"mt-3\">\n        <button \n          type=\"submit\" \n          id=\"submitComment${post_no}\" \n          class=\"btn btn-success btn-sm submitComment\"\n        >\n          Submit\n        </button>\n      </div>\n    </form>\n  `;\n};\n","export const likeCommentButton = (data) => {\n  return `\n   <div class=\"reaction-buttons d-flex justify-content-between border-top border-bottom py-2 mb-3\">\n    <button \n      type=\"button\" \n      id=\"likeButton${data.post_no}\" \n      name=\"${data.post_no}\"\n      <i class=\"bi bi-hand-thumbs-up me-1\"></i> \n          Like \n        <b>\n          <span class=\"likeCounter\" id=\"likeCounter${data.post_no}\">\n            ${data.post_likes}\n          </span>\n        </b>\n    </button>\n\n    <button \n      type=\"button\" \n      id=\"initComment${data.post_no}\">\n        <i class=\"bi bi-chat me-1\"></i> \n          Comment \n      </button>\n        <button><i class=\"bi bi-share me-1\"></i> Share</button>\n    </div>\n    `\n}","import { format } from \"timeago.js\"\nconst timeAgo = (x) => format(x)\n\n// const fullName = (fullName) => {\n//   return `<h6 id=\"fullName\"><b>${fullName}</b> </h6>`\n// }\n\n// const postedAt = (date) => {\n//   return `<div class=\"timeago postTimeCal w3-right w3-opacity\"  datetime='${date.date_created}' title='${format(date.date_created)}'> ${timeAgo(date.post_time)}</div>`\n// }\n\n\n// export const nameImgTiming2 = (data) => {\n\n\n//     const img = (data.profileImg) ? `/public/img/profile/${data.profileImg}` : \"/public/avatar/avatarF.png\"\n\n//     return `<a href=\"/profilepage/img?dir=img&pics=${data.img}&pID=${data.post_no}&path=profile&id=${data.id}\"> \n//       <img src=${img} alt=\"img\" class=\"w3-left w3-circle w3-margin-right postImg\" style=\"width:60px\">\n//         </a>\n//         ${postedAt(data)} ${fullName(data.fullName)}`\n// }\n\nexport const nameImgTiming = (data) => {\n    const { profileImg, fullName, date_created, post_time} = data;\n\n    const img = (profileImg) ? `/public/img/profile/${profileImg}` : \"/public/avatar/avatarF.png\"\n\n    return `<div class=\"d-flex align-items-center mb-3\">\n\n            <img src=\"${img}\" alt=\"Profile\" class=\"rounded-circle me-3 postImg\" width=\"40\" height=\"40\">\n                        \n            <div>\n                <h6 class=\"mb-0\">${fullName}</h6>\n\n                <small class=\"text-muted timeago postTimeCal\" title='${format(date_created)}' datetime='${date_created}'>posted ${timeAgo(post_time)}</small>\n            </div>\n            </div>`\n}\n\n","export const showPostImg = (data) => {\n\n// GET THE IMAGES WITH VALUES F=IF THERE ARE ANY. FILTER USING THE OBJECT KEY AND THEN MAP THROUGH THE VALUE\n  const postImagesWithValues = Object.keys(data)\n  .filter(key => key.startsWith('post_img') && data[key] !== null)\n  .map(el => data[el])\n\n  const picsImgHtml = (imgElement, i, postNo) => `\n    <a href=\"/profilepage/img?dir=img&pics=${imgElement}&pID=${postNo}&path=post\">\n      <div class=\"w3-half\">\n        <img src=\"/public/img/post/${imgElement}\" style=\"width:100%\" alt=\"images${i}\" class=\"img-fluid mb-3\" id=\"postImage${i}\" >\n      </div>\n    </a>\n  `;\n\n  const imgElements = postImagesWithValues.map((pics, i) => picsImgHtml(pics, i, data.post_no)).join('');\n\n  return `\n\n      ${imgElements}\n\n  `;\n};\n","import {showComment} from \"./html\"\nimport { getAllData } from \"../helper/http\"\n\n\n\n\n\n"],"names":[],"sourceRoot":""}