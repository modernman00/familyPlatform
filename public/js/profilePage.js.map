{"version":3,"file":"js/profilePage.js","mappings":";;;;;;;;;;;;;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAGA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;;AAEA;AACA;AACA;AAFA;AAAA;AAAA;AAKA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAAA;AACA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;;AAEA;AACA;AAAA;AAEA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAEA;AA9BA;AAAA;AAQA;AAsBA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAIA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAMA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAlBA;AAAA;AAAA;AAmBA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAOA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AASA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;AC1RA;AACA;AAEA;;AAGA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAEA;;AAEA;;AAEA;;AAEA;AACA;AAEA;AAAA;AAAA;;AAEA;AACA;AAAA;AAAA;AAAA;AACA;;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AAAA;AAAA;AACA;AACA;;;;;;;;;;;;;;;;ACjFA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC5DA;AACA;;AAGA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAGA;AAAA;AACA;AACA;;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAGA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AACA;;AAEA;AACA;AAEA;AAEA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AAEA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnQA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAGA;AAEA;AAGA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAIA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAQA;AAEA;AACA;AASA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAlBA;AAAA;AAAA;AAmBA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACnNA;;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;ACbA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;;AAGA;;AAEA;AAEA;AAyBA;;AAIA;;AAEA;AACA;AAGA;AACA;AAEA;AAEA;AAEA;AAGA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AAGA;AACA;AAEA;AAEA;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AAEA;AACA;AACA;;AAGA;;AAEA;;AAKA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;;AAEA;AACA;AACA;AAGA;AAGA;AAEA;AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAiBA;;;;;;;;;;;;;;;ACjRA;;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAIA;AAEA;AACA;AACA;AACA;;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAIA;AACA;AAGA;AAEA;AAAA;AAAA;AAEA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAEA;;AAEA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAIA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAEA;;AAEA;AACA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAIA;AACA;AAGA;AACA;AAGA;AAEA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAOA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AACA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AA+BA;AAAA;AAAA;AAAA;;AAGA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AAJA;AAAA;AAAA;AAAA;AAQA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;;AAKA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACtRA;AACA;AAEA;AAEA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AA4DA;;AAEA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AAEA;AACA;AAGA;AAEA;AACA;AACA;AACA;AAEA;AACA;;AAGA;AACA;AACA;AACA;AAGA;AAGA;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChHA;;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AAEA;AAAA;AAAA;AAEA;AAEA;AAEA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAIA;AACA;AACA;AAEA;AAAA;AAIA;AAAA;AAAA;AAHA;AAAA;AAKA;AAEA;AAIA;;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAtCA;AAAA;AAAA;AAwCA;;;;;;;;;;;;;ACvFA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;ACXA;;AACA;AAEA;AAEA;;AA0BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACtCA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAVA;AAAA;AAAA;;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAAA;AAAA;AAAA;AACA;;AAGA;AACA;AACA;AAEA;;AAGA;;AAEA;;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;ACjFA;AACA;AACA;AACA;AACA;AAGA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAqBA;;;;;;;;;;;;;;;AC/BA;AAAA;AACA;AAoDA;;;;;;;;;;;;;;;;ACrDA;AACA;AACA;AAGA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AAqBA;AAcA;;;;;;;;;;;;;;;AClDA;AACA;AA4BA;;;;;;;;;;;;;;;;;AC7BA;AACA;AACA;AAAA;AAAA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAGA;;AAGA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAAA;AAAA;AAAA;AAEA;AAEA;AAUA;;;;;;;;;;;;;;;;ACvCA;AAEA;AACA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AAWA;AAIA;AAAA;AAAA;;AAGA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAEA;;AAEA;AACA;AACA;;;;;;;;;;;;;;ACxCA;;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAGA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpDA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;;;;;;;;;;;;;;;;;;;;;ACxCA;AAAA;AAAA;AAAA;AADA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAEA;AACA;AACA;AAEA;;AAEA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;;AAEA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AArBA;AAAA;AAAA;AAuBA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;;AAEA;;AAEA;AAEA;AACA;AAEA;AAEA;AAGA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AA7BA;AAAA;AAAA;AA+BA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;;AAEA;AACA;AACA;AAEA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA;AAAA;AAAA;AACA;;AAEA;;AAGA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;;AAEA;AACA;AACA;AAEA;AACA;AACA;;;;;;;;;;;;;ACnNA;;AACA;;AAEA;;AAEA;AAEA;AACA;AAAA;AAAA;;AAEA;AACA;AAAA;AAAA;;AAEA;;AAGA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;AAEA;AAEA;AACA;AACA;;;;;;;;;;ACnCA;AAAA;AAAA;AAAA;AADA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAIA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;;;;;;;;;;;;;;;;;;ACrBA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;;;;;;;;;;;;;;ACpEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AAGA;;;;;;;;;;;;;ACnBA;AAGA;AAGA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;;;;;;;;;;AC7FA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://family/./resources/asset/js/components/FormHelper.js","webpack://family/./resources/asset/js/components/emojiPicker.js","webpack://family/./resources/asset/js/components/fileUploadPreview.js","webpack://family/./resources/asset/js/components/global.js","webpack://family/./resources/asset/js/components/helper/general.js","webpack://family/./resources/asset/js/components/helper/images.js","webpack://family/./resources/asset/js/components/navbar.js","webpack://family/./resources/asset/js/components/profilePage/allEvents.js","webpack://family/./resources/asset/js/components/profilePage/comment.js","webpack://family/./resources/asset/js/components/profilePage/createEvent.js","webpack://family/./resources/asset/js/components/profilePage/editProfile.js","webpack://family/./resources/asset/js/components/profilePage/eventHTML.js","webpack://family/./resources/asset/js/components/profilePage/friendRequestCard.js","webpack://family/./resources/asset/js/components/profilePage/html.js","webpack://family/./resources/asset/js/components/profilePage/htmlFolder/commentForm.js","webpack://family/./resources/asset/js/components/profilePage/htmlFolder/friendRequestCard.js","webpack://family/./resources/asset/js/components/profilePage/htmlFolder/likeCommentButton.js","webpack://family/./resources/asset/js/components/profilePage/htmlFolder/nameImageTiming.js","webpack://family/./resources/asset/js/components/profilePage/htmlFolder/showPostImages.js","webpack://family/./resources/asset/js/components/profilePage/img.js","webpack://family/./resources/asset/js/components/profilePage/index.js","webpack://family/./resources/asset/js/components/profilePage/loadPost.js","webpack://family/./resources/asset/js/components/profilePage/modal.js","webpack://family/./resources/asset/js/components/profilePage/periodicSync.js","webpack://family/./resources/asset/js/components/profilePage/post.js","webpack://family/./resources/asset/js/components/profilePage/postEmojiImgProcess.js","webpack://family/./resources/asset/js/components/profilePage/registerPushNotification.js","webpack://family/./resources/asset/js/components/profilePage/rsvpBtn.js"],"sourcesContent":["'use strict'\n\nimport { matchRegex } from \"./helper/general\"\n\nexport default class FormHelper {\n    constructor(data) {\n         if (!Array.isArray(data)) throwError('data must be an array of form elements');\n        this.data = data;\n        this.error = [];\n        this.result = 0;\n    }\n\n    id(x) {\n        return document.getElementById(x)\n    }\n\n    /**\n     * general validation; check empty status, at least a single input, mobile length, white space\n     */\n\n    getData() {\n        return this.data;\n    }\n\n\n    validateField(value, type = 'general') {\n        const regexes = {\n            email: /^[\\w\\-\\.\\+]+\\@[a-zA-Z0-9\\.\\-]+\\.[a-zA-Z0-9]{2,4}$/,\n            // Add more regexes as needed\n        };\n        return type === 'email' ? regexes.email.test(value) : value.trim() !== '';\n    }\n\n\n    massValidate() {\n        // const reg = /[a-zA-Z0-9./@]/g;\n        this.data.forEach(et => {\n\n            for (let post of et) {\n                // capture the error to a variable\n                let errMsg = this.id(`${post.name}_error`)\n                let postName = post.name.replace('_', ' ')\n                let asterisk = \"*\";\n\n                // rid it off the submit and token\n                if (['submit', 'button', 'showPassword_id', 'g-recaptcha-response', 'cancel', 'token', 'checkbox_id'].includes(post.name) ||\n                    ['button'].includes(post.id) || ['button'].includes(post.type)) return;\n                // check if there is no value\n\n                if (['spouseName', 'spouseMobile', 'spouseEmail', 'fatherMobile', 'fatherEmail', 'motherMobile', 'maidenName', 'motherEmail'].includes(post.name)) {\n                    // post.value is not prpvided if it is not provided \n                    post.value = post.value === \"\" ? \"Not Provided\" : post.value\n                }\n\n                if (post.value === '' || post.value === 'select') {\n                    if (!this.validateField(post.value)) {\n                        if (errMsg) {\n                            errMsg.innerHTML = `${post.placeholder ?? asterisk} cannot be left empty`;\n                            errMsg.style.color = 'red';\n                        }\n                        this.error.push(`${postName.toUpperCase()} cannot be left empty`);\n                        this.result = false;\n                    }\n                }\n\n                if (post.name === 'email' && !this.validateField(post.value, 'email')) {\n                    this.error.push('<li style=\"color: red;\">Please enter a valid email</li>');\n                    if (errMsg) errMsg.innerHTML = '* Please enter a valid email';\n                    this.result = false;\n                }\n            }\n        })\n    }\n\n    emailVal() {\n        const emailExp = /^[\\w\\-\\.\\+]+\\@[a-zA-Z0-9\\.\\-]+\\.[a-zA-z0-9]{2,4}$/;\n        let msg = `<li style=color:'red';> Please enter a valid email</li>`\n        const email = this.id('email_id').value\n        if (email.match(emailExp) === null) {\n            this.id('email_error').innerHTML = msg\n            this.id('email_error').style.color = \"red\"\n            this.error.push(msg)\n        }\n    }\n\n    clearError() {\n        this.error = []; // Empty the error array\n\n        // Define a function to clear error messages for a given input element\n        const clearErrorForElement = (elementName) => {\n            const errorElement = this.id(`${elementName}_error`);\n            if (errorElement) {\n                errorElement.innerHTML = '';\n            }\n        };\n\n\n        this.data.forEach(el => {\n            for (let post of el) {\n\n\n\n                const { id, name, value } = post;\n\n                // Skip certain input types\n                if (['submit', 'button', 'token', 'checkbox'].includes(id) || ['token', 'submit'].includes(name)) {\n                    continue;\n                }\n\n                const the_id = this.id(id);\n\n\n                if (the_id) {\n                    // Add keyup event listener to clear errors for non-select inputs\n                    the_id.addEventListener('keyup', () => {\n                        if (value !== 'select') {\n                            clearErrorForElement(name);\n                        }\n                    });\n                } else {\n                    console.error(`Element with ID '${id}' with post name '${post.name}' not found.`);\n                }\n\n                // Add change event listener to clear error message\n                the_id.addEventListener('change', () => {\n                    clearErrorForElement(name);\n                });\n\n            }\n        })\n    }\n\n    clearHtml() {\n\n        this.data.forEach(el => {\n            for (let post of el) {\n                if (post.id == 'submit' || post.name == 'submit' || post.name == 'checkbox') {\n                    continue\n                }\n                post.value = \"\"\n\n\n            }\n        })\n    }\n\n    /**\n     *\n     * @param {input is the id of the input/ this is an array [as, it, it]} input\n     * @param {* this is the max policy and it must be an integer} maxi\n     */\n\n    realTimeCheckLen(input, maxi) {\n        try {\n            for (let i = 0; i < input.length; i++) {\n                const theData = this.id(`${input[i]}_id`);\n                if (theData === null || theData === undefined || theData === \"\") {\n                    throw new Error(`Element with ID '${input[i]}_id' not found or is empty`);\n                }\n                const max = maxi[i];\n                const error = this.id(`${input[i]}_error`);\n                theData.maxLength = parseInt(max) + 1; // Fixed the parsing issue here\n                theData.addEventListener('keyup', () => {\n                    error.innerHTML = (theData.value.length > max) ? `You have reached the maximum limit` : \"\";\n                    const help = this.id(`${input[i]}_help`);\n                    help.style.color = 'red';\n                    help.style.fontSize = '10px';\n                    error.style.color = 'red';\n                    setTimeout(() => {\n                        help.style.display = 'none';\n                    }, 5000);\n                });\n            }\n        } catch (error) {\n            console.error(error.message);\n        }\n    }\n\n\n    /**\n     * the id for the password error should be password_help\n     * the id for your confirm pasword should confirm_password\n     * it will return an error message to the password_help input\n     */\n\n    matchInput(first, second) {\n        let error, firstInput, secondInput\n        error = this.id(`${second}_error`)\n        firstInput = this.id(first + '_id')\n        secondInput = this.id(second + '_id')\n        secondInput.addEventListener('keyup', () => {\n            error.innerHTML = (secondInput.value !== firstInput.value) ? 'Your passwords do not match' : \"\"\n        })\n    }\n    /**\n     *\n     * @param {the id of the input you want to inject to/ this is an array} idArray\n     * @param {*the comment or questions you want o inject} html\n     */\n\n    injectData(idArray, html) {\n        let idData;\n        for (let i = 0; i < idArray.length; i++) {\n            idData = this.id(idArray[i]);\n            idData.innerHTML = html[i];\n        }\n    }\n\n    /**\n     *\n     * @param {this is an id and its value is for duplication} firstInput\n     * @param {* another id that accepts the value of the firstInput} takeFirstInput\n     */\n    duplicate(giveInput, takeInput) {\n        let giver, taker;\n        giver = this.id(giveInput)\n        taker = this.id(takeInput)\n        giver.addEventListener('keyup', () => {\n            taker.value = giver.value;\n        })\n    }\n\n    /**\n     *\n     * @param {current input that is being type to. the value is what will be checked realtime. the id is needed} input\n     * @param {* the url to get the info to . example is /search?hint} url\n     * @param {enter the id of the output element} output\n     */\n\n\n    realTimeServer(input, url, outputId) {\n        let theInput, inputVal, output;\n        theInput = this.id(input)\n        output = this.id(outputId)\n        theInput.addEventListener('keyup', () => {\n            inputVal = theInput.value\n\n            if (inputVal == 0) {\n                output.innerHTML = \"\";\n                return;\n            } else {\n                var xmlhttp = new XMLHttpRequest();\n                xmlhttp.onreadystatechange = function () {\n                    if (this.readyState == 4 && this.status == 200) {\n                        output.innerHTML = this.responseText;\n                    }\n                }\n                xmlhttp.open(\"GET\", `${url}=${inputVal}`, true);\n                xmlhttp.send();\n            }\n        })\n    }\n\n    isChecked(yesId, noId, hiddenInput) {\n        const checked = () => {\n            if (this.id(yesId).checked) {\n                alert('check')\n                this.id(hiddenInput).innerHTML = 'checked';\n            } else if (this.id(noId).checked) {\n                this.id(hiddenInput).innerHTML = 'checked';\n            }\n        }\n\n        this.id(yesId).addEventListener('click', checked)\n        this.id(noId).addEventListener('click', checked)\n\n    }\n\n    previousAddress() {\n        const timeAddy = this.id('time_at_address_id')\n        const prevAddy = this.id('previous_address_class')\n        const showPrev = () => {\n            if (timeAddy.value != '3 years+') {\n                prevAddy.style.display = 'block'\n                this.id('previous_address_help').innerHTML = \"Please enter your full address: House No, Street Name, Town/City and Post Code\"\n            } else {\n                prevAddy.style.display = 'none'\n            }\n\n        }\n        timeAddy.addEventListener('change', showPrev)\n\n    }\n\n\n}","import emojiData from 'emojibase-data/en/data.json';\nimport { id, log } from '@modernman00/shared-js-lib';\n\nconst EMOJI_CACHE_KEY = 'recentEmojis'; // LocalStorage key for caching recent emojis\n\n\n// 🟡 Filter emojis to only include smileys (based on Unicode range)\nconst smileys = emojiData.filter(e => {\n  const code = parseInt(e.hexcode, 16); // Convert hexcode to decimal\n  return code >= 0x1F600 && code <= 0x1F64F; // Emoticons block range\n});\n\n\n/**\n * Renders the filtered smiley emojis into the picker.\n * @param {string} emojiContainerId - The ID of the container element for the emoji buttons.\n * @param {string} emojiTargetDataClass - The data class attribute for the emoji target i.e data-emoji-target.\n */\nexport const showEmojiPicker = (emojiContainerId, emojiTargetDataClass) => {\n  // Render the filtered smiley emojis into the picker\n  renderEmojiList(smileys, emojiContainerId, emojiTargetDataClass);\n}\n\n/**\n * Render a list of emoji buttons into the picker\n * @param {Array} emojis - An array of emoji objects from emojibase\n * @param {string} emojiContainerId - The ID of the container element for the emoji buttons\n * @param {string} emojiTargetDataClass - The data class attribute for the emoji target i.e data-emoji-target\n * \n */\n\nconst renderEmojiList = (emojis, emojiContainerId, emojiTargetDataClass) => {\n\n  const emojiList = id(emojiContainerId); // Container for emoji buttons\n \n  emojiList.innerHTML = ''; // Clear existing emojis\n\n  const emojiTarget = document.querySelector(`[${emojiTargetDataClass}]`); // Where emojis will be inserted\n\n  // Load and render cached recent emojis first\n  const cached = JSON.parse(localStorage.getItem(EMOJI_CACHE_KEY)) || [];\n\n  cached.forEach(emoji => renderEmojiButton(emoji, 'Recent', emojiList, emojiTarget));\n\n  // Render up to 70 emojis from the filtered list\n  emojis.slice(0, 70).forEach(({ emoji, label, skins }) => {\n    renderEmojiButton(emoji, label, emojiList, emojiTarget); // Main emoji\n\n    // If skin tone variants exist, render them too\n    if (skins) {\n      skins.forEach(({ emoji: skinEmoji }) => {\n        renderEmojiButton(skinEmoji, `${label} (skin tone)`, emojiList, emojiTarget);\n      });\n    }\n  });\n}\n\n// 🟡 Create and insert a single emoji button\nconst renderEmojiButton = (char, label, emojiContainer, emojiTarget) => {\n  const btn = document.createElement('button');\n  btn.type = 'button';\n  btn.className = 'emoji-btn btn btn-sm btn-light'; // Styling classes\n  btn.textContent = char; // Emoji character\n  btn.setAttribute('aria-label', label); // Accessibility label\n\n  // When clicked, insert emoji into target and cache it\n  btn.addEventListener('click', () => {\n    emojiTarget.value += char;\n    cacheEmoji(char);\n  });\n\n  emojiContainer.appendChild(btn); // Add button to picker\n}\n\n// 🟡 Save emoji to recent cache in localStorage\nconst cacheEmoji = (char) => {\n  const recent = JSON.parse(localStorage.getItem(EMOJI_CACHE_KEY)) || [];\n\n  // Add emoji to front of list, remove duplicates, keep max 10\n  const updated = [char, ...recent.filter(e => e !== char)].slice(0, 10);\n  localStorage.setItem(EMOJI_CACHE_KEY, JSON.stringify(updated));\n}\n","import { id } from '@shared';\n\n/**\n * Handles image file selection and previews thumbnails\n * \n * @param {string} fileInputId - The id of the hidden file input element\n * @param {string} previewListId - The id of the container where preview thumbnails are shown\n * @param {string} fileNamesDisplayId - The id of the text element where selected file names are displayed\n * @param {string} previewContainerId - The id of the wrapper element for image previews\n * @param {string} closePreviewBtnId - The id of the button to clear image previews if provided\n */\nexport const imagePreview = (fileInputId, previewListId, fileNamesDisplayId, previewContainerId, closePreviewBtnId = null) => {\n  const imageInput = id(fileInputId); // Hidden file input for image uploads\n  const previewContainer = id(previewContainerId); // Wrapper for image previews\n  const previewList = id(previewListId); // Where preview thumbnails are shown\n  const fileNamesDisplay = id(fileNamesDisplayId); // Text display of selected \n\n  imageInput.addEventListener('change', () => {\n    const files = Array.from(imageInput.files); // Convert FileList to array\n    previewList.innerHTML = ''; // Clear previous previews\n    fileNamesDisplay.textContent = ''; // Clear file name display\n\n    if (files.length === 0) {\n      previewContainer.classList.add('d-none'); // Hide preview section\n      return;\n    }\n\n    // For each selected image, create a thumbnail preview\n    files.forEach(file => {\n      if (file.size > 3 * 1024 * 1024) { // 3MB limit\n        alert('File too large. Max 10MB allowed.');\n      }\n\n      const reader = new FileReader();\n      reader.onload = e => {\n        const img = document.createElement('img');\n        img.src = e.target.result; // Base64 image data\n        img.alt = 'Preview';\n        img.className = 'img-thumbnail';\n        img.style.maxWidth = '100px';\n        img.style.maxHeight = '100px';\n        previewList.appendChild(img);\n      };\n      reader.readAsDataURL(file); // Convert file to Base64\n    });\n\n    // Show file names and reveal preview container\n    fileNamesDisplay.textContent = files.map(f => f.name).join(', ');\n    previewContainer.classList.remove('d-none');\n  });\n\n  if (closePreviewBtnId) {\n    const closePreviewBtn = id(closePreviewBtnId); // Button to clear image previews\n    closePreviewBtn.addEventListener('click', () => {\n      imageInput.value = ''; // Reset file input\n      previewList.innerHTML = ''; // Clear thumbnails\n      fileNamesDisplay.textContent = ''; // Clear file names\n      previewContainer.classList.add('d-none'); // Hide preview section\n    });\n  }\n}\n\n","import axios from \"axios\"\n// Import emoji metadata from emojibase (English locale, full dataset)\n\n\nexport const id = (id) => document.getElementById(id)\nexport const idValue = (id) => id(id).value\nexport const idInnerHTML = (id) => id(id).innerHTML\nexport const warningSign = \"\\u26A0\"; // danger warning sign\n\nexport const qSel = (name) => document.querySelector(name)\nexport const qSelAll = (name) => document.querySelectorAll(name)\nexport const qSelValue = (name) => qSel(name).value\nexport const qSelInnerHTML = (name) => qSel(name).innerHTML\n\nexport const log = (id, identifier = null) => {\n    console.log(' start' + \"  \" + identifier)\n    console.log(id)\n    console.log(' end' + \"  \" + identifier)\n}\nexport const write = (input) => document.write(input)\n\nexport const hideElement = (elementId) => {\n    id(elementId).style.display = \"none\";\n};\n\nexport const showElement = (elementId) => {\n    id(elementId).style.display = \"block\";\n};\n\nexport const manipulateAttribute = (idName, removeOrSet, attributeType, nameValue = null) => {\n\n    if (removeOrSet === \"remove\") {\n        id(idName).removeAttribute(attributeType)\n    } else {\n        id(idName).setAttribute(attributeType, nameValue)\n    }\n\n\n}\n\n/**\n * Resets a form by clearing all input fields, validation messages, \n * image previews and custom inputs.\n * @param {string} formId - The ID of the form to reset.\n */\nexport const formReset = (formId) => {\n    const form = id(formId);\n    if (!form) {\n        console.warn(`Form with ID \"${formId}\" not found.`);\n        return;\n    }\n\n    // Reset form fields\n    form.reset();\n\n    // Clear validation messages\n    form.querySelectorAll('.is-invalid, .invalid-feedback').forEach(el => {\n        el.classList.remove('is-invalid');\n        if (el.classList.contains('invalid-feedback')) {\n            el.textContent = '';\n        }\n    });\n\n\n    // Clear image previews\n    form.querySelectorAll('.preview-img').forEach(img => {\n        img.src = '';\n        img.style.display = 'none';\n    });\n\n    // Clear custom inputs (e.g., emoji pickers, rich text)\n    form.querySelectorAll('[data-custom-input]').forEach(el => {\n        el.value = '';\n    });\n}\n\n\nexport const fileUploadSizeValidation = (fileInputId, maxSizeMB = 3) => {\n    const fileInput = id(fileInputId);\n    if (!fileInput || !fileInput.files) return true; // No files to validate\n\n    const maxSizeBytes = maxSizeMB * 1024 * 1024;\n    for (const file of fileInput.files) {\n        if (file.size > maxSizeBytes) {\n            alert(`File ${file.name} exceeds the maximum size of ${maxSizeMB}MB.`);\n            fileInput.value = ''; // Clear the input\n            return false; // Validation failed\n        } else if (file.size === 0) {\n            alert(`File ${file.name} is empty and cannot be uploaded.`);\n            fileInput.value = ''; // Clear the input\n            return false; // Validation failed\n        } else if (file.type.includes(\"exe\") || file.type.includes(\"sh\") || file.type.includes(\"bat\") || file.type.includes(\"js\")) {\n            alert(`File ${file.name} is of an unsupported type and cannot be uploaded.`);\n            fileInput.value = ''; // Clear the input\n            return false; // Validation failed\n        } else if (!file.type.startsWith(\"image/\") && !file.type.startsWith(\"video/\") && !file.type.startsWith(\"audio/\") && !file.type === \"application/pdf\" && !file.type === \"application/msword\" && !file.type === \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\") {\n            alert(`File ${file.name} is of an unsupported type and cannot be uploaded.`);\n            fileInput.value = ''; // Clear the input\n            return false; // Validation failed\n        }\n    }\n    return true; // All files are within size limit\n};\n\n\nexport const date2String = (date) => new Date().toDateString(date)\n\nexport const showError = (e) => {\n\n    log(e.message, \" ERROR MESSAGE\") // \"null has no properties\"\n    log(e.name, \" ERROR NAME\") // \"TypeError\"\n    log(e.fileName, \" ERROR FILENAME\") // \"Scratchpad/1\"\n    log(e.lineNumber, \" ERROR LINENUMBER\") // 2\n\n    log(e.stack)\n}\n\nexport const msgException = (errorMessage) => {\n\n    throw new Error(errorMessage)\n}\n\n\n/**\n * \n * @param {*} elementId - element id\n * @param {*} addClass either a success or danger class (green or red)\n * @param {*} message - html message to convey success or failure\n * @param {*} timer - timer for the message to disappear- default is 5 secs\n */\nexport const showNotification = (elementId, addClass, message, timer = 5000) => {\n    // display the success information for 10sec\n    id(`${elementId}`).style.display = \"block\" // unblock the notification\n    id(`${elementId}`).classList.add(addClass) // add the success class\n    id(`${elementId}`).innerHTML = message // error element\n    // id('loader').classList.remove('loader') // remove loader\n\n    setTimeout(() => {\n        id(`${elementId}`).style.backgroundColor = \"\"\n        id(`${elementId}`).style.color = \"\"\n        id(`${elementId}`).innerHTML = \"\"\n    }, timer)\n}\n\n// Function to check for elements and render if they exist\nexport const checkElements = (idOrClass, classString, theFunction = null) => {\n\n    const doesElementExist = (idOrClass === \"id\") ? id(classString) : qSel(classString)\n    // Check if elements exist before calling render function\n    if (doesElementExist.length) {\n        theFunction(doesElementExist);\n    }\n\n};\n\nexport const checkManyElements = (idOrClass, classString, theFunction = null) => {\n\n    const doesElementExist = (idOrClass === \"id\") ? id(classString) : qSelAll(classString)\n    // Check if elements exist before calling render function\n    if (doesElementExist.length > 0) {\n        theFunction(doesElementExist);\n    }\n\n};\n\n/**\n* ----------------------------------------------------------------\n* Reusable Image Modal Function\n* ----------------------------------------------------------------\n* This function finds all images with the specified selector\n* and attaches a click event to show them in a modal.\n*\n* @param {string} selector - The CSS selector for the images you want to be zoomable (e.g., '.zoomable-image').\n* @param {string} modalId - The ID of the modal element (e.g., 'imageModal').\n* @param {string} modalImageId - The ID of the image element inside the modal (e.g., 'modalImage').\n* @param {string} modalCloseId - The ID of the close button inside the modal (e.g., 'imageModalClose').\n* @param {string} imgSrc - The source URL of the image to display in the modal.\n* @param {string} imgAlt - The alt text for the image to display in the modal.\n* ---------------------------------------------------------------- \n*/\nexport const initializeImageModal = (selector, clickedImageIndex, modalId, modalImageId, modalCloseId) => {\n    // Get references to the modal elements\n    // Global variables to manage modal state\n    let currentImages = [];\n    let currentImageIndex = 0;\n    const modal = document.getElementById(modalId);\n    const modalImage = document.getElementById(modalImageId);\n    const closeModal = document.getElementById(modalCloseId);\n    const prevButton = document.getElementById('prevButton');\n    const nextButton = document.getElementById('nextButton');\n\n\n    // Find all images that match the selector\n    const images = document.querySelectorAll(selector);\n\n    log(images[images.length - 1].src, \" IMAGES\")\n\n\n    // Guard clause: if no modal or images, do nothing.\n    if (!modal || !modalImage || !closeModal || images.length === 0) {\n        console.warn('Image modal setup failed: Required elements not found.');\n        return;\n    }\n\n    // Function to hide the modal\n    const hideModal = () => {\n        modal.classList.remove('show');\n        document.body.style.overflow = ''; // Restore scrolling\n    };\n\n\n    // Function to show the modal with a specific image\n    const showModal = (index) => {\n        if (!currentImages || currentImages.length === 0) return;\n\n        if (index < 0) {\n            currentImageIndex = currentImages.length - 1; // Loop to the last image\n        } else if (index >= currentImages.length) {\n            currentImageIndex = 0; // Loop to the first image\n        } else {\n            currentImageIndex = index;\n        }\n        modalImage.src = currentImages[currentImageIndex].src;\n        modalImage.alt = currentImages[currentImageIndex].alt;\n        modal.classList.add(\"show\");\n        document.body.style.overflow = \"hidden\"; // Prevent background scrolling\n    };\n\n    // Event listeners for modal controls\n    closeModal.addEventListener(\"click\", hideModal);\n    prevButton.addEventListener(\"click\", () => showModal(currentImageIndex - 1));\n    nextButton.addEventListener(\"click\", () => showModal(currentImageIndex + 1));\n    modal.addEventListener(\"click\", (e) => {\n        if (e.target === modal) {\n            hideModal();\n        }\n    });\n\n    // Keyboard navigation\n    document.addEventListener(\"keydown\", (e) => {\n        if (modal.classList.contains(\"show\")) {\n            if (e.key === \"Escape\") {\n                hideModal();\n            } else if (e.key === \"ArrowLeft\") {\n                showModal(currentImageIndex - 1);\n            } else if (e.key === \"ArrowRight\") {\n                showModal(currentImageIndex + 1);\n            }\n        }\n    });\n\n    currentImages = Array.from(document.querySelectorAll(selector));\n    if (currentImages.length > 0) {\n        showModal(clickedImageIndex);\n    } else {\n        console.warn(`No images found for selector: ${selector}`);\n    }\n\n\n}\n\n\n\n","\"use strict\";\nimport { id, qSelAll } from '../global';\nimport autocomplete from 'autocompleter';\nimport FormHelper from '../FormHelper';\n\n\nexport const loaderIconBootstrap = () => {\n\n    return `<div class=\"spinner-grow text-primary\" role=\"status\">\n        <span class=\"sr-only\">Loading...</span>\n        </div>`\n}\n\nexport const loaderIcon = () => {\n\n    return `<div class=\"loader\"></div>`\n}\n\nexport const loaderIconBulma = () => {\n\n    return `<div class=\"is-loading\"></div>`\n}\n\nexport const removeDiv = (div_id) => {\n    const div = document.getElementById(div_id)\n    if (div) {\n        return div.remove()\n    }\n\n}\n\n\n\nexport const createAndAppendElement = (elementType, setId, parent, setClass = null) => {\n    const newDiv = document.createElement(elementType);\n    newDiv.setAttribute('id', setId)\n    newDiv.setAttribute('class', `field ${setClass}`)\n    const parentDiv = id(parent)\n    return parentDiv.appendChild(newDiv)\n}\n\n/**\n * \n * @param {the id of the input} inputId \n * @param {the api data or array data} data \n * @param { filterby is the data.filterby }\n */\nexport const autoCompleter = (inputId, data) => {\n    autocomplete({\n        input: inputId,\n        fetch: function (text, update) {\n            text = text.toLowerCase();\n            // you can also use AJAX requests instead of preloaded data\n            const suggestions = data.filter(n => n.firstName.toLowerCase().startsWith(text))\n            update(suggestions);\n        },\n        onSelect: function (item) {\n            input.value = item.firstName;\n        }\n\n    })\n}\n\nexport const distinctValue = (array) => {\n    return [...new Set(array)]\n}\n\nexport const checkBox = (subject) => {\n    return `<div class=\"control\"> \n        <label class=\"radio\">\n          <input type=\"radio\" name=\"send${subject}\" value=\"yes\" id=${subject}Yes > Yes \n        </label>\n        <label class=\"radio\"> \n          <input type=\"radio\" name=\"send${subject}\" value=\"no\" id=${subject}No checked> No \n        </label>\n      </div>`;\n}\n\nexport const checkBox2 = (subject) => {\n    return `<div class=\"control\"> \n        <label class=\"checkbox\">\n          <input type=\"checkbox\" name=\"send${subject}\" value=\"yes\" id=${subject}Yes> Yes \n        </label>\n        <label class=\"checkbox\"> \n          <input type=\"checkbox\" name=\"send${subject}\" value=\"no\" id=${subject}No> No \n        </label>\n      </div>`\n\n}\n\nexport const isChecked = (name, fn) => {\n    const yesId = (`${name}Yes`)\n    const noId = `${name}No`\n    const checked = () => {\n        if (id(yesId).checked) {\n            alert('check')\n            fn()\n        } else if (id(noId).checked) {\n            alert('check No')\n        }\n    }\n    id(yesId).addEventListener('click', checked)\n    id(noId).addEventListener('click', checked)\n}\n\nexport const matchRegex = (data) => {\n    if (data) {\n        if (data != \"Not Provided\") {\n            const regex = /[<?/>]+/g\n            const result = data.match(regex)\n            if (result === null) return true\n        }\n    }\n}\n\n/**\n * \n * @param { id of the first element} first \n * @param {* id of the second element} second \n * @param {* error id - if error - where to show it} err \n */\nexport const matchInput = (first, second, err) => {\n    let error, firstInput, secondInput\n    error = id(err)\n    firstInput = id(first)\n    secondInput = id(second)\n\n    secondInput.addEventListener('keyup', () => {\n\n        if (secondInput.value !== firstInput.value) {\n            error.innerHTML = 'Your passwords do not match'\n            error.style.color = \"red\"\n        } else {\n            error.innerHTML = \"The password is matched: <i class='fa fa-check' aria-hidden='true'></i>\"\n            error.style.color = \"green\"\n        }\n\n\n    })\n}\n\n/**\n * Converts a string to sentence case.\n *\n * Sentence case is a string where the first letter of each word is capitalized, and the rest of the letters are in lowercase.\n *\n * @param {string} str The string to convert to sentence case.\n * @returns {string} A new string in sentence case.\n */\nexport const toSentenceCase = (str) => {\n    return str\n        .toLowerCase() // Convert the string to lowercase\n        .split(' ')    // Split the string into words\n        .map(word => word.charAt(0).toUpperCase() + word.slice(1)) // Capitalize the first letter of each word\n        .join(' ');    // Join the words back into a string\n}\n\nexport const convertFormData = (formId) => {\n    const formInput = qSelAll(formId)\n    const formInputArr = Array.from(formInput)\n    return new FormHelper(formInputArr)\n\n}\n\n\n\nexport const showResponse = (theId, message, status) => {\n    const responseEl = id(theId)\n    const col = status ? 'green' : 'red'\n\n    responseEl.innerHTML = message\n    responseEl.style.color = 'green'\n    responseEl.style.backgroundColor = col\n    responseEl.style.color = 'white';\n    setTimeout(() => {\n        responseEl.innerHTML = '';\n    }, 5000); // Disappear after 5 seconds\n\n}\n\n\n/**\n   *\n   * @param {input is the id of the input/ this is an array [as, it, it]} input\n   * @param {* this is the max policy and it must be an integer} maxi\n   */\n\nexport const realTimeCheckLen = (input, maxi) => {\n    try {\n        for (let i = 0; i < input.length; i++) {\n            const theData = id(`${input[i]}_id`);\n            if (theData === null || theData === undefined || theData === \"\") {\n                throw new Error(`Element with ID '${input[i]}_id' not found or is empty`);\n            }\n            const max = maxi[i];\n            const error = id(`${input[i]}_error`);\n            theData.maxLength = parseInt(max) + 1; // Fixed the parsing issue here\n            theData.addEventListener('keyup', () => {\n                error.innerHTML = (theData.value.length > max) ? `You have reached the maximum limit` : \"\";\n                const help = id(`${input[i]}_help`);\n                help.style.color = 'red';\n                help.style.fontSize = '10px';\n                error.style.color = 'red';\n                setTimeout(() => {\n                    help.style.display = 'none';\n                }, 5000);\n            });\n        }\n    } catch (error) {\n        console.error(error.message);\n    }\n}\n\n\n","import { id } from \"../global\"\n\n// use this in conjunction with the file \nexport const showImageFileUploadFn = (uploadBtn, inputId, fileName ) => {\n  id(uploadBtn).addEventListener('click', function() {\n  id(inputId).click();\n});\n\nid(inputId).addEventListener('change', function() {\n  const fileNames = Array.from(this.files).map(file => file.name);\n  id(fileName).innerText = fileNames.join(', ');\n});\n\n}","import { format, render } from \"timeago.js\"\nimport { id, showError, qSel, msgException, log } from '@shared'\nimport { toSentenceCase } from \"./helper/general\"\n\n// const timeAgo = (x) => format(x)\nimport axios from \"axios\"\nimport { qSelAll } from \"@modernman00/shared-js-lib\";\n// import { html } from './profilePage/html';\n\n\n// Update notification badge\nfunction updateNotificationBadge(change) {\n    const badge = document.querySelector('.notification-badge');\n    let count = parseInt(badge.textContent);\n    count += change;\n    if (count <= 0) {\n        badge.style.display = 'none';\n    } else {\n        badge.textContent = count;\n        badge.style.display = 'flex';\n    }\n}\n\n\nconst postAgoNotification = (date) => {\n    return `\n  <div class=\"notification_timeago w3-left w3-opacity\" datetime='${date}' title='${format(date)}'> ${format(date)}\n  </div>`\n}\n// this is the notification htnl \nconst notificationHTML = (data) => {\n\n    // Map notification types to icon classes\n    // Map type → { icon, colour }\nconst iconMap = {\n    friend_request: { icon: \"fa-solid fa-user-plus\", color: \"text-primary\" },       // Blue\n    like: { icon: \"fa-solid fa-thumbs-up\", color: \"text-success\" },                // Green\n    comment: { icon: \"fa-solid fa-comment-dots\", color: \"text-info\" },             // Cyan\n    Anniversary: { icon: \"fa-solid fa-cake-candles\", color: \"text-warning\" },      // Gold\n    Birthday: { icon: \"fa-solid fa-cake-candles\", color: \"text-warning\" },         // Gold\n    Wedding: { icon: \"fa-solid fa-heart\", color: \"text-warning\" },                 // Gold\n    new_post: { icon: \"fa-solid fa-file-lines\", color: \"text-purple\" },            // Custom purple\n    House_Warming: { icon: \"fa-solid fa-house\", color: \"text-orange\" },            // Orange\n    Reunion: { icon: \"fa-solid fa-people-group\", color: \"text-pink\" },             // Pink\n    Party: { icon: \"fa-solid fa-champagne-glasses\", color: \"text-danger\" },        // Red\n    Meeting: { icon: \"fa-solid fa-handshake\", color: \"text-teal\" },                // Teal\n    default: { icon: \"fa-solid fa-bell\", color: \"text-secondary\" }                 // Grey\n};\n\n    const { icon, color } = iconMap[data.notification_type] || iconMap.default\n\n    const readOrUnread = (data.notification_status === 'new') ? 'unread' : 'read'\n    const { sender_id, notification_name, notification_content, created_at, no } = data\n\n\n    // generate random numbers to make the notification unique\n\n    let randomNumber = Math.floor(100 + Math.random() * 900);\n\n    return `<a id = \"notificationBar${sender_id}${randomNumber}\" href=\"#linkNotification${no}\"  class=\"list-group-item list-group-item-action d-flex align-items-start notification_real_time ${readOrUnread} notification-item linkRequestCard\">\n\n    \n            <div class=\"notification-icon ${color}\">\n                <i class=\"${icon}\"></i></div>\n            <div class=\"notification-text\">\n                <strong>${notification_name}</strong><br>\n                <small>${notification_content}</small>\n                <div class=\"notification-time\"> ${postAgoNotification(created_at)} </div>\n            </div>\n            <button class=\"notification-delete btn btn-sm btn-outline-secondary btn-light\" \n                 \" \n                    data-no=\"${no}\"\n                    data-is=\"${sender_id}\"\n                    type=\"submit\"\n                    id=\"deleteNotification${sender_id}${randomNumber}\"\n                    aria-label=\"Delete notification\">\n               <i class=\"fa-solid fa-trash\"></i>\n            </button>\n \n\n  </a>\n\n\n  `\n}\n\n\n\n// CLICK FUNCTION ON THE NOTIFICATION BAR THAT TAKES ONE TO THE FRIEND REQUEST CARD\n\nexport const increaseNotificationCount = () => {\n    const currentNotificationCount = parseInt(\n        sessionStorage.getItem('notificationCount')) + 1\n\n    id('notification_count').innerHTML = currentNotificationCount\n}\n\nexport const addToNotificationTab = (data) => {\n\n    return qSel('.notification_tab').insertAdjacentHTML('afterbegin', notificationHTML(data));\n\n}\n\n\nconst yourId = localStorage.getItem('requesterId');\nconst famCode = localStorage.getItem('requesterFamCode');\nconst notificationURL = `/member/notifications/id/${yourId}/${famCode}`;\n\n\n// get all the notification and display them \n// they are already filtered by famCode and id \n// for the family request, connection is done by id\n// for events -birthday etc, the connection is the famCode \n// so linked notification will be either where id matches or famcode matches\n\naxios.get(notificationURL)\n    .then(res => {\n\n        // Extract the notifications from the response\n        const data = res.data.message;\n\n        if (data) {\n\n            if (data.length > 0) {\n\n                // Display the count of notifications\n                id('notification_count').innerHTML = data.length;\n\n                // Store the notification count in session storage\n                sessionStorage.setItem('notificationCount', data.length);\n\n                // Display each notification\n                data.forEach(element => {\n                    addToNotificationTab(element);\n                });\n                // Update the timing of notifications\n                const updateNotificationTiming = document.querySelectorAll(\".notification_timeago\");\n                render(updateNotificationTiming);\n            } else {\n                id('notification_count').innerHTML = 0;\n            }\n\n        }\n\n\n    })\n    .catch(error => {\n        // Handle any errors that occur during the process\n        showError(error);\n    });\n\n\n// delete a notification \n\n// delete notification \n\n\n\n\n// document.addEventListener('click', async (e) => {\n//     const id = e.target.id;\n//        log(id)\n//     // if (!id.includes('deleteNotification')) return;\n\n//     // const deleteBtn = id(id);\n//     // const sender_id = deleteBtn.getAttribute('data-id');\n\n//     // const url = `/removeNotification/${yourId}/${famCode}/${sender_id}`\n//     // const response = axios.put(url)\n\n//     // if (response.data.message === \"Notification marked as read\") {\n\n//     //     // remove a html element with notificationBar after 2 mins \n//     //     qSel(`#${deleteBtn.id}`).closest('.notification_real_time')?.remove();\n\n//     //     // reduce the notification count as you have deleted the notification\n\n//     //     const newValues = parseInt(sessionStorage.getItem('notificationCount') - 1)\n//     //     id('notification_count').innerHTML = newValues;\n//     // } else {\n//     //     msgException(\"Error removing notification\" + \" \" + response.data.message);\n//     // }\n// })\n\n\nconst notificationBtn = id('notificationBtn');\nconst notificationDropdown = id('notificationDropdown');\nconst markAllReadBtn = id('markAllRead');\nconst notificationCount = id('notification_count');\n\n// Toggle dropdown visibility\nnotificationBtn.addEventListener('click', function (e) {\n    e.stopPropagation();\n    notificationDropdown.classList.toggle('show');\n});\n\n// Close dropdown when clicking outside\ndocument.addEventListener('click', function (e) {\n    if (!notificationBtn.contains(e.target) && !notificationDropdown.contains(e.target)) {\n        notificationDropdown.classList.remove('show');\n    }\n});\n\n// Prevent dropdown from closing when clicking inside it\nnotificationDropdown.addEventListener('click', function (e) {\n    e.stopPropagation();\n});\n\n// Mark all as read functionality\nmarkAllReadBtn.addEventListener('click', function () {\n    const unreadItems = document.querySelectorAll('.notification-item.unread');\n    unreadItems.forEach(item => {\n        item.classList.remove('unread');\n    });\n\n    // Update notification count\n    notificationCount.textContent = '0';\n    notificationCount.style.display = 'none';\n});\n\n/* run once, after the dropdown HTML is in the page */\nconst initDeleteOnce = () => {\n    const tab = document.getElementById('notification_tab'); // static parent\n    if (!tab) return;\n\n    tab.addEventListener('click', e => {\n        const btn = e.target.closest('button[id*=\"deleteNotification\"]');\n        if (!btn) return;                   // not a delete button → ignore\n\n        e.stopPropagation();                // keep dropdown open\n        const bannerId = btn.id.replace('deleteNotification', 'notificationBar');\n        const no = btn.getAttribute('data-no');\n    \n\n        const url = `/removeNotification/${no}`;\n\n\n        axios.put(url)\n            .then(response => {\n                if (response.data.message === 'Notification marked as read') {\n                    // remove a html element with notificationBar after 2 mins\n                    document.getElementById(bannerId)?.remove();\n\n                    // reduce the notification count as you have deleted the notification\n                    const newValues = parseInt(sessionStorage.getItem('notificationCount') - 1);\n                    sessionStorage.setItem('notificationCount', newValues);\n                    id('notification_count').innerHTML = newValues;\n                } else {\n                    msgException('Error removing notification' + ' ' + response.data.message);\n                }\n                // your counter routine\n            });\n    })\n}\n\n/* safe entry point */\ndocument.readyState === 'loading'\n    ? document.addEventListener('DOMContentLoaded', initDeleteOnce)\n    : initDeleteOnce();\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n///member/notifications","\"use strict\";\nimport { id, log, showError, formReset, fileUploadSizeValidation, initializeImageModal } from \"../global\"\nimport axios from \"axios\"\nimport { showEmojiPicker } from '../emojiPicker.js';\n\n\n\ntry {\n\n    const options = {\n        xsrfCookieName: 'XSRF-TOKEN',\n        xsrfHeaderName: 'X-XSRF-TOKEN',\n    }\n\n    // CLICK EVENT get the comment and like button from the document\n    document.addEventListener('click', async (e) => {  //document.onclick = async (e) => {\n\n        const elementId = e.target.id\n        const postId = e.target.name\n        const postImgId = e.target.dataset.postimgid;\n\n        // Handle Like Button Click\n        if (elementId.includes(\"likeButton\")) {\n\n\n\n            // replace button with Counter to get the span id \n            const likeCounterId = elementId.replace('Button', 'Counter')\n\n            // trim removes leading and trailing spaces\n            let likeCounterVal = id(likeCounterId).innerHTML.trim().replace(/\\n/g, ''); // \n\n            const encodedLikeCounterVal = encodeURIComponent(likeCounterVal);\n\n            await axios.put(`/profileCard/postLikes?postNo=${postId}&count=${encodedLikeCounterVal}&likeCounterId=${likeCounterId}`)\n\n            // update all members of similar famcode on their UIs using Pusher\n\n            await axios.get(\"/getNewLikesPusher\");\n\n\n\n            // Make the comment form to appear onclick. \n        } else if (elementId.includes(\"initComment\")) {\n            const commentFormId = elementId.replace('init', 'form')\n            id(commentFormId).classList.toggle('d-none');\n\n\n        }\n        // comment form emoji picker\n        else if (elementId.includes(\"emojiToggle\")) {\n\n            const emojiToggler = id(elementId)\n\n            const emojiListElement = elementId.replace('emojiToggle', 'emojiCommentPickerList')\n\n            const emojiList = id(emojiListElement); // Container for emoji buttons\n            // 🟡 Toggle emoji picker visibility when the toggle button is clicked\n            // emojiToggler.addEventListener('click', () => {\n            emojiList.classList.toggle('d-none'); // Show/hide the emoji list\n            emojiToggler.setAttribute('aria-expanded', emojiList.classList.contains('d-none') ? 'false' : 'true');\n            // });\n\n            // comment form emoji picker\n            showEmojiPicker(emojiListElement, 'data-commentEmoji-target');\n\n\n        }\n\n        // Handle Comment Submission\n        else if (elementId.includes(\"submitComment\")) {\n\n            e.preventDefault()\n\n            //idForm == formComment511\n            const idForm = elementId.replace(\"submit\", \"form\")\n            // make the comment form disappear\n            id(idForm).style.display = \"none\"\n            // extract the form entries\n            const form = id(idForm)\n            let formEntries = new FormData(form)\n\n            // if the comment form input is empty. Get the input id and check \n            const inputComment = idForm.replace(\"form\", \"input\")\n            const idInputComment = id(inputComment);\n\n            if (idInputComment.value == null || idInputComment.value == \"\") {\n                alert(\"Please enter a comment before submitting\")\n            } else {\n\n                await axios.post('/postCommentProfile', formEntries, options)\n\n                // update all members of similar famcode on their UIs using Pusher\n\n                await axios.get(\"/getNewCommentPusher\");\n\n                formReset(idForm);\n\n\n            }\n            // SUBMIT THE POST\n        } else if (elementId.includes(\"submitPost\")) {\n\n            e.preventDefault()\n\n            // check if the post message is empty\n            const postMessage = id('postMessage').value.trim();\n\n            if (postMessage === \"\") {\n                alert(\"Post message cannot be empty\");\n                return;\n            }\n\n            // validate the file input if any\n            fileUploadSizeValidation('post_img', 3);\n\n\n            const formExtra = id('formPostMessageModal')\n            const formData = new FormData(formExtra)\n\n            // get the requesterFamCode from the localStorage \n            const requesterFamCodeValue = localStorage.getItem('requesterFamCode');\n            // Append the new form entry to the FormData object\n            formData.append('postFamCode', requesterFamCodeValue);\n\n            try {\n                // 1. Send the POST request to submit the form data\n                const response = await axios.post(\"/member/profilePage/post\", formData, options);\n\n                // 2. Notify members of similar famcode about the post by email\n                // 3. Update all members of similar famcode on their UIs using Pusher\n                await Promise.all([\n                    axios.get(\"/post/getNewPostAndEmail?newPostNo=\" + response.data.token),\n                    axios.get(\"/getNewPostPusher\")\n                ]);\n\n                formReset(\"formPostMessageModal\");\n                // redirect to the profile page\n                window.location.href = '/profilePage';\n\n            } catch (error) {\n                console.error(\"An error occurred:\", error.response.data.message);\n                // Optionally, display an error message to the user\n                id('formPostMessageModal_notification').innerHTML = 'There was an error submitting your post. Please try again later.';\n                id('formPostMessageModal_notification').classList.add('is-danger');\n                id('formPostMessageModal_notification').style.display = 'block';\n            }\n\n        }\n        // take you to the request card for approval or denial\n        else if (e.target.classList.contains('linkRequestCard')) {\n            // ONCE THE NOTIFICATION BAR IS CLICKED, IT SHOULD TAKE YOU TO BE FRIEND REQUEST CARD\n\n            const friendRequestSection = id(`${e.target.getAttribute('data-id')}_linkRequestCard`);\n            if (friendRequestSection) {\n                friendRequestSection.scrollIntoView({ behavior: \"smooth\" });\n            }\n        } // click event for the post images to show in a modal\n        else if (e.target.classList.contains('grid-image')) {\n            if (e.target.classList.contains('grid-image')) {\n                const postNo = e.target.dataset.postno;\n                const imgClass = `.zoomable-image${postNo}`;\n                const imagesInGroup = Array.from(document.querySelectorAll(imgClass));\n                const initialIndex = imagesInGroup.findIndex(img => img.src === e.target.src);\n\n                if (initialIndex !== -1) {\n                    initializeImageModal(imgClass, initialIndex, 'imageModal', 'modalImage', 'imageModalClose');\n                }\n            }\n\n        }\n        else if (elementId.includes('removeCommentIcon')) {\n            // get the comment no\n            const commentNo = elementId.replace('removeCommentIcon', '');\n            // Ask user to confirm before deleting (safety check)\n            if (confirm('Are you sure you want to remove this comment?')) {\n                // Find the comment element and remove it from page\n                const commentElement = id(`commentDiv${commentNo}`);\n                if (commentElement) {\n\n                    // remove from the database \n                    const response = await axios.delete(`/deleteComment/${commentNo}`);\n                    alert(response.data.message)\n\n                } else {\n                    alert('Comment not found')\n                }\n            }\n\n        }\n        // redirect to the images pages\n        // else if(elementId.includes('directToImages')){\n        //     const user_id = localStorage.getItem('requesterId');\n        //       window.location.href = `images/${user_id}`;\n        // }\n\n        // Find the closest element with a id starting with \"like-button-\"\n        // else if(e.target.closest('[id^=\"like-button-\"]')) {\n        //     const likeButtonDiv = e.target.closest('[id^=\"like-button-\"]');\n        //     const likeButtonDivId = likeButtonDiv.getAttribute('id');\n        //     const commentNo = likeButtonDiv.getAttribute('data-comment-no');\n        //     const likeCount = id(`like-count-${commentNo}`).textContent.trim();\n\n        //     // show the reaction bar \n        //     id(`reaction-bar-${commentNo}`).classList.add('show');\n\n        //     // update the like count\n        //     id(`like-count-${commentNo}`).textContent = parseInt(likeCount) + 1;\n\n\n\n\n\n        // }\n\n\n    })\n\n\n    // MOUSE ENTER \n\n    document.addEventListener('click', async (e) => {\n\n        const reactionDiv = e.target.closest('.reaction-button');\n        const reactionOption = e.target.closest('.reaction-option');\n\n        if (reactionDiv) {\n            const elementId = reactionDiv.id\n            const elementName = reactionDiv.name\n            const commentNo = reactionDiv.dataset.commentNo;\n\n\n            const reactionBar = id(`reaction-bar-${commentNo}`);\n            if (reactionBar) {\n                \n                reactionBar.classList.toggle('show');\n            } else {\n                  reactionBar.classList.remove('show');\n            }\n\n        } else if (reactionOption) {\n            const no = reactionOption.dataset.optionNo;\n            const button = id(`like-button-${no}`);\n            const countEl = id(`like-count-${no}`);\n            const preview = id(`reaction-preview-${no}`);\n            const emojiContent = reactionOption.textContent;\n            const label = reactionOption.dataset.label;\n            // Optimistic UI update\n            preview.innerHTML = `<span class=\"reaction-emoji\">${emojiContent}</span>`;\n            button.querySelector('span').textContent = label;\n\n            let count = parseInt(countEl.textContent || '0', 10);\n            countEl.textContent = count + 1;\n\n            const response = await axios.post(`/commentReaction`, {\n                comment_no: no,\n                reaction: emojiContent,\n                label: label\n            })\n\n            // alert(response.data.message)\n        } else {\n            const reactionBar = e.target.closest('.reaction-bar');\n            if (reactionBar) {\n                reactionBar.classList.remove('show');\n            }\n        }\n\n\n\n    })\n\n\n\n\n    // MOUSE LEAVE\n} catch (e) {\n    showError(e)\n}\n\n\n\n\n","import { format } from \"timeago.js\"\nimport { toSentenceCase, id} from \"@shared\"\n\nconst reqId = localStorage.getItem('requesterId');\n\nexport const commentHTML = (data, postId) => {\n\n  const {profileImg, fullName, date_created, img, comment, comment_no, id} = data\n  const imgURL = profileImg || img \n  const image = (imgURL) ? `/resources/images/profile/${imgURL}` : `/public/avatar/avatarF.png`\n\n  return `<div class=\"d-flex mb-3 commentDiv align-items-start\" data-commentDiv-no=\"${comment_no}\" id=\"commentDiv${comment_no}\" name=\"commentDiv\">\n\n  <img src=\"${image}\" alt=\"Avatar\" class=\"rounded-circle me-2 commentImg\" width=\"32\" height=\"32\">\n\n  <div class=\"flex-grow-1\">\n    <div class=\"d-flex justify-content-between align-items-center\">\n      <strong>${toSentenceCase(fullName)}</strong>\n      <small class=\"text-muted commentTiming\" datetime=\"${date_created}\" title=\"${date_created}\">\n        ${format(date_created)}\n      </small>\n    </div>\n\n    <div class=\"comment-text mb-2\">\n      ${comment}\n    </div>\n\n     <div class=\"reaction-preview\" id=\"reaction-preview-${comment_no}\"></div>\n\n      <div class=\"comment-actions d-flex gap-3\">         \n                <div class=\"reaction-bar\"  id=\"reaction-bar-${comment_no}\">\n\n                    <div class=\"reaction-option\" data-option-no=\"${comment_no}\" id=\"reaction-option-like-${comment_no}\" data-reaction=\"like\" data-label=\"likes\">\n\n                      👍\n\n                    </div>\n\n                    <div class=\"reaction-option\" data-option-no=\"${comment_no}\" id=\"reaction-option-love-${comment_no}\" data-reaction=\"love\" data-label=\"love\">\n                      ❤️\n                    </div>\n                    <div class=\"reaction-option\" data-option-no=\"${comment_no}\"id=\"reaction-option-haha-${comment_no}\" data-reaction=\"haha\" data-label=\"haha\">\n                      😄\n                    </div>\n                    <div class=\"reaction-option\" data-option-no=\"${comment_no}\"id=\"reaction-option-wow-${comment_no}\" data-reaction=\"wow\" data-label=\"wow\">\n                     😮\n                    </div>\n                    <div class=\"reaction-option\" data-option-no=\"${comment_no}\"id=\"reaction-option-sad-${comment_no}\" data-reaction=\"sad\" data-label=\"sad\">\n                      😢\n                    </div>\n                    <div class=\"reaction-option\" data-option-no=\"${comment_no}\"id=\"reaction-option-angry-${comment_no}\"\n                     data-reaction=\"angry\" data-label=\"angry\">\n                      😠\n                    </div>\n                </div>\n\n                <div class=\"reaction-button like-button-${comment_no}\" id=\"like-button-${comment_no}\" data-comment-no=\"${comment_no}\">\n                    <i class=\"bi bi-hand-thumbs-up reaction-icon\" id=\"like-icon-${comment_no}\"></i>\n                    <span>Like</span>\n                    <div class=\"reaction-count\" id=\"like-count-${comment_no}\">0</div>\n                </div>\n\n                ${\n                  reqId == id || reqId == postId ? `<button class=\"btn btn-sm btn-icon text-danger\" id=\"removeComment(${comment_no})\" title=\"Remove\">\n                    <i class=\"bi bi-trash\" id=\"removeCommentIcon${comment_no}\"></i>\n                </button>` : ''\n                }        \n      </div>\n  </div>\n</div><hr>`\n\n}\n\n// i need the postid to use to show the delete button \nexport const showComment = (comment, postId) => {\n  if (!comment) {\n    return `<div id=\"comment\" name=\"commentDiv\"></div>`;\n  } // only run if there is comment\n\n\n  // USED FOR ALL THE COMMENTS WHEN THE PAGE IS LOADING\n  const commentHTMLArray = comment.map(commentElement => {\n    return commentHTML(commentElement, postId);\n  });\n\n  return commentHTMLArray.join(''); // Join the array elements into a single string\n}\n\n\nexport const appendNewComment = (commentData) => {\n\n  // check if commentData is valid\n  if (!commentData) {\n    throw new Error('No comment update received');\n  }\n\n  const idDiv = `showComment${commentData.post_no}`\n  // check if the div has been created by the DOM \n\n\n  const commentContainer = id(idDiv);\n    if (!commentContainer) {\n    throw new Error(`The comment div id does not exist `)\n  }\n\n\n  const commentHtml = commentHTML(commentData)\n\n\n  commentContainer.insertAdjacentHTML('beforeend', commentHtml)\n\n\n}\n\n\n\n","\"use strict\";\nimport { id, log, showError } from \"../global\"\nimport FormHelper from '../FormHelper';\nimport { addToNotificationTab, increaseNotificationCount } from '../navbar'\nimport { eventHtml } from './eventHTML'\nimport axios from \"axios\";\nimport Pusher from 'pusher-js';\n\n\nconst formInput = document.querySelectorAll('.eventModalForm');\nconst formInputArr = Array.from(formInput);\nconst formData = new FormHelper(formInputArr);\n\nconst cancelModal = () => {\n\n    const displayNone = () => id('id_event_modal').style.display = 'none'\n\n    id('cancelModal').addEventListener('click', displayNone)\n\n}\n\nif (document.readyState === 'loading') {\n    document.addEventListener('DOMContentLoaded', cancelModal);\n}\n\n\n/**\n * Filters events by family code (famCode) to ensure only relevant events are shown\n * @param {Object} event - The event data object\n * @returns {boolean} - Returns true if event is linked to the family code\n */\n\n\n\nconst options = {\n    xsrfCookieName: 'XSRF-TOKEN',\n    xsrfHeaderName: 'X-XSRF-TOKEN',\n}\n\n/**\n * @function process\n * @description Processes the event modal form data to create a new event\n * @param {Event} e - The event object\n * @example\n * const eventForm = id('eventModalForm');\n * eventForm.addEventListener('submit', process);\n */\nconst process = async (e) => {\n\n    try {\n        e.preventDefault();\n        id('error').innerHTML = \"\"\n        formData.massValidate();\n\n        if (formData.error.length > 0) {\n            alert('The form cannot be submitted. Please check the errors');\n            formData.clearError();\n            return;\n        }\n\n        // get the form data\n        const eventForm = id('eventModalForm');\n        let eventFormEntries = new FormData(eventForm);\n\n        // POST data to create the event and notification in parallel\n        const [eventResponse, notificationResponse] = await Promise.all([\n            axios.post(\"/member/profilePage/event\", eventFormEntries, options),\n            axios.post('/member/notification/event', eventFormEntries, options)\n        ]);\n\n        // Extract and get notificationNo from the responses\n\n        const { message: notificationNo } = notificationResponse.data;\n\n        // update all members of similar famcode on their UIs using Pusher\n\n        axios.get(`/member/notification/event?notificationNo=${notificationNo}`);\n\n      // redirect to the profile page to view the event\n        window.location.href = '/profilePage';\n\n    } catch (error) {\n        showError(error)\n    }\n\n}\n\nid('submitEventModal').addEventListener('click', process)\n\n\n\n\n\n","//import axios \nimport { update } from \"@modernman00/shared-js-lib\"; \n\n\n  // Submission handler\nupdate({\n    formId: 'editProfileFormModal', \n    route: '/member/profilePage/editProfile', \n    buttonId: 'editProfileBtnModal',\n     redirect: 'profilePage',\n\n});","\"use static\"\nimport { date2String } from \"../global\"\n\nexport const eventHtml = (data) => {\n\n    return ` <div class=\"event-card card mb-3\">\n                <div class=\"card-body\">\n                    <div class=\"d-flex\">\n                        <div class=\"flex-grow-1\">\n                            <small class='eventInfo'>\n            <strong><strong>RSVP: </strong> ${data.sender_name}</small><br>\n                            <small class='eventInfo'><strong>Event: </strong>${data.notification_name}</small><br>\n                            <small class='eventInfo'><strong>Type: </strong>${data.notification_type}</small><br>\n                            <small class='eventInfo'><strong>Description: </strong> ${data.notification_content}</small><br>\n                            <small class='eventInfo'><strong>Date: </strong>${date2String(data.notification_date)} </small><br>\n        \n         \n            <input type='hidden' name='event_no' id='event${data.no}' value='${data.no}'>\n\n             <div class=\"mt-2 rsvp-buttons d-flex\">\n                                        <button class=\"btn btn-sm btn-outline-primary\">Going</button>\n                                        <button class=\"btn btn-sm btn-outline-secondary\">Maybe</button>\n                                        <button class=\"btn btn-sm btn-outline-danger\">Decline</button>\n                                    </div>\n\n               </div>\n                            </div>\n                        </div>\n                    </div>\n           <hr>`;\n\n    //                        <button \n    //     type=\"button\" \n    //     id=\"coming${data.data.no}\"\n    //     class=\"w3-button w3-tiny w3-theme-d2 w3-margin-bottom\">\n    //       <em class=\"fa fa-comment\"></em> \n    //         Coming \n    //     </button>\n    // \n}","\nimport axios from 'axios'\nimport { log, showError } from \"@shared\"\nconst approverId = encodeURIComponent(localStorage.getItem('requesterId')) // means that the user currently working on the UI\nimport { friendRequestCard } from './htmlFolder/friendRequestCard';\n\n\n//NOTE - this code worked well 25/10/24\n/**\n * Fetch friend requests by approver ID and render each request.\n */\nconst fetchFriendRequests = async () => {\n  try{\n\n  const response = await axios.get(`/getFriendRequestById?id=${approverId}`)\n\n      if (response.data.message) {\n        response.data.message.forEach(request => waitForRequestFriendClass(request));\n      }\n\n  } catch(error) {showError(error)} ;\n}\n\n// Wait for .requestFriendClass to appear in the DOM\nconst waitForRequestFriendClass = (data) => {\n  const observer = new MutationObserver((mutations, obs) => {\n    const requestContainer = document.querySelector('.requestFriendClass');\n    if (requestContainer) {\n       friendRequestCard(data);\n      obs.disconnect(); // Stop observing once .requestFriendClass is found\n    } else{\n      log('there is no requestFriendClass')\n    }\n  });\n\n  // Observe the entire body for changes in child elements\n  observer.observe(document.body, { childList: true, subtree: true });\n};\n\n\n// TODO: Maybe a future enhancement to show count of friend request \nconst countFriendRequest = (friend) => {\n  return friend.length > 1 ? `<p><b>Friend Requests - ${friend.length}</b></p>\n  <br></br>` : `<p><b>Friend Request</b></p><br>`;\n}\n\n\n// Fetch and render friend requests on page load\n\n   fetchFriendRequests();\n\n\n         \n        // Friend Request Actions\n        const confirmRequestButtons = document.querySelectorAll('.confirm-request');\n        const deleteRequestButtons = document.querySelectorAll('.delete-request');\n        \n        confirmRequestButtons.forEach(button => {\n            button.addEventListener('click', function() {\n                const card = this.closest('.card-body');\n                const alert = document.createElement('div');\n                alert.className = 'alert alert-success';\n                alert.textContent = 'Friend request confirmed!';\n                card.innerHTML = '';\n                card.appendChild(alert);\n                \n                // Update notification badge\n                updateNotificationBadge(-1);\n            });\n        });\n        \n        deleteRequestButtons.forEach(button => {\n            button.addEventListener('click', function() {\n                const card = this.closest('.card');\n                card.style.opacity = '0';\n                setTimeout(() => {\n                    card.remove();\n                    // Update notification badge\n                    updateNotificationBadge(-1);\n                }, 300);\n            });\n        });\n\n\n\n\n\n\n\n\n\n","import { nameImgTiming } from './htmlFolder/nameImageTiming'\nimport { commentForm } from \"./htmlFolder/commentForm\"\nimport { likeCommentButton } from \"./htmlFolder/likeCommentButton\"\nimport { showPostImg, imgCount } from \"./htmlFolder/showPostImages\"\nimport { showComment} from \"./comment\"\n\n\nexport const html = (el, comment = null) => {\n  const { post_no, postMessage, id } = el\n  const commentLength = comment.length;\n  return `\n    <div class=\"post card\" id=\"post${post_no}\">\n     <div class=\"card-body post${post_no}\" id=\"postIt\">\n    ${nameImgTiming(el)}\n\n    <div class=\"post-content\">\n    <p class=\"card-text\"> ${postMessage} </p>\n\n     <div class=\"photo-grid grid-${imgCount(el)}\">\n      ${showPostImg(el)}\n    </div>\n    </div>\n\n    ${likeCommentButton(el, commentLength)}\n    ${commentForm(el)}\n    <div id = 'showComment${post_no}' class=\"comment-section\">\n    ${showComment(comment, id)}\n\n      \n    </div>\n`\n}\n\n\n\n\n","export const commentForm = ({ post_no }) => {\n  return `\n    <p id=\"formComment${post_no}_notification\"></p>\n\n    <form \n      action=\"/postCommentProfile\" \n      method=\"post\" \n      id=\"formComment${post_no}\" \n      enctype=\"multipart/form-data\"\n      class=\"mb-4 d-none formComment${post_no}\"\n    >\n\n      <input \n        type=\"hidden\" \n        name=\"post_no\" \n        value=\"${post_no}\" \n      />\n\n       <div id=\"emojiCommentPickerList${post_no}\" class=\"d-flex flex-wrap gap-2 mt-2 d-none\" role=\"listbox\" aria-hidden=\"true\">\n      </div>\n\n      <div id=\"gifPickerList\" class=\"d-flex flex-wrap gap-2 mt-2 d-none\" role=\"listbox\" aria-hidden=\"true\"></div>\n\n        \n\n             \n\n                <textarea class=\"form-control inputComment mb-3\" data-commentEmoji-target id=\"inputComment${post_no}\" name=\"comment\" rows=2> </textarea/>\n                \n     <div class=\"mt-3 d-flex justify-content-between align-items-center position-relative\">\n     <div class=\"d-flex gap-2\">\n                    <button type=\"button\" class=\"btn btn-sm btn-outline-secondary\"\n                                title=\"add emoji\" \n                                id=\"emojiToggle${post_no}\"aria-expanded=\"false\" aria-controls=\"emojiPickerList\">\n                                😊\n                            </button>\n\n\n              <button type=\"button\" class=\"btn btn-sm btn-outline-secondary\" id=\"stickerToggle${post_no}\"  title=\"Stickers\"\n                                aria-label=\"Stickers\">🏷️</button>\n  </div>\n                <button \n                    type=\"submit\" \n                    id=\"submitComment${post_no}\" \n                    class=\"btn btn-outline-primary btn-sm submitComment\"\n                >\n              Submit\n            </button>\n      \n            \n          </div>\n    </form>\n  `;\n};\n","import { qSel } from '@shared'\nconst appUrl = process.env.MIX_APP_URL2;\nconst approverId = encodeURIComponent(localStorage.getItem('requesterId'))\n\n\nexport const friendRequestCard = (data) => {\n\n  const imageUrl = `/resources/images/profile/${encodeURIComponent(data.img ?? data.requesterProfileImg)}`;\n  const firstName = encodeURIComponent(data.firstName ?? data.requesterFirstName);\n  const lastName = encodeURIComponent(data.lastName ?? data.requesterLastName);\n  const requestId = encodeURIComponent(data.id ?? data.requesterId);\n  const requestCode = encodeURIComponent(data.famCode ?? data.requesterFamCode);\n  const mutualFriends = '2 mutual friends';\n\n\n  const html = `<p id=${requestId}_linkRequestCard></p>\n\n    <div class=\"d-flex align-items-center mb-3 friend-request-card\">\n      <img src=\"${imageUrl}\" alt=\"Avatar\" class=\"avatar me-3><br>\n\n        <div class=\"flex-grow-1\">\n          <h6 class=\"mb-0\">${firstName} ${lastName}</h6>\n          <small class=\"text-muted\">${mutualFriends}</small>\n        </div>\n    </div>\n\n    <div class=\"friend-request-actions mb-3\">\n\n              <a href=\"${appUrl}member/request/${requestId}/${approverId}/50/${requestCode}/pp\" class=\"btn btn-sm btn-primary\" title=\"confirm\">Confirm</a>\n\n\n              <a href=\"${appUrl}member/request/${requestId}/${approverId}/10\" class=\"btn btn-sm btn-outline-secondary\" title=\"Decline\">Decline</a>\n\n    </div>\n  `;\n\n  qSel('.requestFriendClass').insertAdjacentHTML('afterbegin', html);\n\n\n\n\n\n\n\n\n\n\n\n\n\n}","export const likeCommentButton = (data, commentLength) => {\n  return `\n   <div class=\"reaction-buttons d-flex justify-content-between border-top border-bottom py-2 mb-1\">\n    <button \n      type=\"button\" \n      id=\"likeButton${data.post_no}\" \n      name=\"${data.post_no}\"\n      <i class=\"bi bi-hand-thumbs-up me-1\"></i> \n          Like \n        <b>\n          <span class=\"likeCounter\" id=\"likeCounter${data.post_no}\">\n            ${data.post_likes}\n          </span>\n        </b>\n    </button>\n\n    <button \n      type=\"button\" \n      id=\"initComment${data.post_no}\">\n        <i class=\"bi bi-chat me-1\"></i> \n          Comment \n          (<span class=\"commentCounter\" id=\"commentCounter${data.post_no}\">\n            ${commentLength}\n          </span>)\n          \n      </button>\n   \n    </div>\n    `\n}","import { format } from \"timeago.js\"\nimport { toSentenceCase} from \"@shared\"\nconst timeAgo = (x) => format(x)\n\n// const fullName = (fullName) => {\n//   return `<h6 id=\"fullName\"><b>${fullName}</b> </h6>`\n// }\n\n// const postedAt = (date) => {\n//   return `<div class=\"timeago postTimeCal w3-right w3-opacity\"  datetime='${date.date_created}' title='${format(date.date_created)}'> ${timeAgo(date.post_time)}</div>`\n// }\n\n\n// export const nameImgTiming2 = (data) => {\n\n\n//     const img = (data.profileImg) ? `/public/img/profile/${data.profileImg}` : \"/public/avatar/avatarF.png\"\n\n//     return `<a href=\"/profilepage/img?dir=img&pics=${data.img}&pID=${data.post_no}&path=profile&id=${data.id}\"> \n//       <img src=${img} alt=\"img\" class=\"w3-left w3-circle w3-margin-right postImg\" style=\"width:60px\">\n//         </a>\n//         ${postedAt(data)} ${fullName(data.fullName)}`\n// }\n\nexport const nameImgTiming = (data) => {\n    const { profileImg, fullName, date_created, post_time} = data;\n\n    const img = (profileImg) ? `/resources/images/profile/${profileImg}` : \"/public/avatar/avatarF.png\"\n\n    return `<div class=\"d-flex align-items-center mb-3\">\n\n            <img src=\"${img}\" alt=\"Profile\" class=\"rounded-circle me-3 postImg\" width=\"40\" height=\"40\">\n                        \n            <div>\n                <h6 class=\"mb-0\">${toSentenceCase(fullName)} </h6>\n\n                <small class=\"text-muted\">posted </small><small class=\"text-muted timeago postTimeCal\" title='${format(date_created)}' datetime='${date_created}'> ${timeAgo(post_time)}</small>\n            </div>\n            </div>`\n}\n\n","export const showPostImg = (data) => {\n\n// GET THE IMAGES WITH VALUES F=IF THERE ARE ANY. FILTER USING THE OBJECT KEY AND THEN MAP THROUGH THE VALUE\n  const postImagesWithValues = Object.keys(data)\n  .filter(key => key.startsWith('post_img') && data[key] !== null)\n  .map(el => data[el])\n\n  const picsImgHtml = (imgElement, i, postNo) => `\n  \n\n     \n        <img \n          src=\"/resources/images/post/${imgElement}\" \n          alt=\"images${i}\" \n          data-postImgId=\"${postNo}${imgElement}\"\n          data-imgIndex=\"${i}\"\n          data-postNo=\"${postNo}\"\n          class=\"grid-image zoomable-image${postNo}\" \n          id=\"postImage${i}\"\n          >\n  `;\n\n  const imgElements = postImagesWithValues.map((pics, i) => picsImgHtml(pics, i, data.post_no)).join('');\n\n\n    // ✅ Optional: return both HTML and count for contributor-safe rendering\n  return imgElements\n\n};\n\nexport const imgCount = (data) => {\n  // GET THE IMAGES WITH VALUES F=IF THERE ARE ANY. FILTER USING THE OBJECT KEY AND THEN MAP THROUGH THE VALUE\n    const postImagesWithValues = Object.keys(data)\n    .filter(key => key.startsWith('post_img') && data[key] !== null)\n    .map(el => data[el])\n  \n    const imageCount = postImagesWithValues.length;\n  \n      // ✅ Optional: return both HTML and count for contributor-safe rendering\n    return imageCount;\n  }\n","\"use strict\";\nimport { id, log } from \"../global\"\nimport { showImageFileUploadFn } from \"../helper/images\"\nimport  axios from \"axios\"\n\n// id('profilePics').addEventListener('click', ()=> id('formProfilePics').style.display =\"block\"\n\n// );\n\n// FOR PROFILE IMAGE CHANGE\n// showImageFileUploadFn('uploadButtonProfilePics', 'profileImageFile', 'profileImgFileNames')\n\n// // FOR POST MODAL IMAGE UPLOAD  \n\n// showImageFileUploadFn('uploadButton', 'post_img', 'postModalImgFileNames')\n\n\n// id('submitProfilePics').addEventListener('click', ()=> {23\n\n//   // Get the form element\n//     const form = document.getElementById(\"formProfilePics\");\n\n//     // Create a FormData object and append the form data to it\n//     const formData = new FormData(form);\n\n//     const options = {\n//         xsrfCookieName: 'XSRF-TOKEN',\n//         xsrfHeaderName: 'X-XSRF-TOKEN',\n//     }\n//     // send form data using axios post method\n\n//     axios.post('/member/profilePage/profileImg', formData, options)\n//     .then((response) => {\n\n//       id('profilePicsNotification').innerHTML = response.data\n//       log(response.data, \"profilePicsNotification\")\n\n//       if(response.data.message === \"Profile image updated\") {\n//         id('profilePicsNotification').classList.add('w3-green')\n//         id('profilePicsNotification').innerHTML = response.data.message\n//         // Reload the page\n//         location.reload();\n\n//       }\n//     })\n//     .catch((error) => {\n//        id('profilePicsNotification').classList.add('w3-red')\n//       id('profilePicsNotification').innerHTML = error.message\n//     });\n  \n\n//   id('profilePicsNotification').innerHTML = \"\"\n// })","\"use strict\";\n\nlocalStorage.removeItem('redirect')\n\n  // Dark Mode Toggle\n        const darkModeToggle = document.getElementById('darkModeToggle');\n        const body = document.body;\n        \n        // Check for saved dark mode preference\n        if (localStorage.getItem('darkMode') === 'enabled') {\n            body.classList.add('dark-mode');\n            darkModeToggle.innerHTML = '<i class=\"bi bi-sun-fill\"></i>';\n        }\n        \n        darkModeToggle.addEventListener('click', () => {\n            body.classList.toggle('dark-mode');\n            \n            if (body.classList.contains('dark-mode')) {\n                localStorage.setItem('darkMode', 'enabled');\n                darkModeToggle.innerHTML = '<i class=\"bi bi-sun-fill\"></i>';\n            } else {\n                localStorage.setItem('darkMode', null);\n                darkModeToggle.innerHTML = '<i class=\"bi bi-moon-fill\"></i>';\n            }\n        });\n\nimport \"./loadPost\"\nimport \"./modal\"\nimport \"./img\"\nimport \"./rsvpBtn\"\nimport \"./allEvents\"\nimport \"./registerPushNotification\"\nimport \"./periodicSync\"\nimport \"./createEvent\"\nimport \"./friendRequestCard\"\nimport \"../navbar\"\nimport \"./editProfile\"\nimport \"./postEmojiImgProcess\"\nimport \"./commentEmojiTest\"\n\n\n// import \"./newPage\"\n\n\n\n\n\n","import { log, showError, checkManyElements, id, msgException } from '../global'\nimport { appendNewPost, allPost } from './post'\nimport { render } from \"timeago.js\"\nimport { appendNewComment } from './comment'\nimport Pusher from \"pusher-js\"\nimport axios from \"axios\"\nimport { eventHtml } from './eventHTML'\nimport { addToNotificationTab, increaseNotificationCount } from '../navbar'\n\n// set an empty array\ntry {\n    const MAX_APPENDED_POSTS = 1000; // Set a maximum limit\n    const appendedComments = new Set(); // To track unique comments\n    const appendedPosts = new Set(); // To track unique comments\n\n    // Initialize Pusher\n    const pusher = new Pusher(process.env.MIX_PUSHER_APP_KEY, {\n        cluster: process.env.MIX_PUSHER_APP_CLUSTER,\n        encrypted: true,\n    });\n\n    // Global state object with data-fetching and initialization logic\n    const state = {\n        post: [],\n        comment: [],\n\n        // Method to fetch initial data and populate state\n        async initialize() {\n            try {\n\n                const pullData = await axios.get(`/post/getAllPostCommentByFamCode`);\n\n                // Assign fetched data to state properties\n                this.post = pullData.data.message.post;\n                this.comment = pullData.data.message.comment;\n\n                this.comment = this.comment.flat(); // Flatten the array of arrays into a single array of comment objects\n\n                if (this.post.length > 0) {\n\n                    // Render posts and comments on the page after data is loaded\n                    this.post.forEach(data => allPost(data, this.comment));\n                } else {\n                    log(\"No post\")\n                }\n\n\n            } catch (error) {\n                console.error(\"Error fetching posts and comments:\", error);\n            }\n        }\n    };\n\n    // initiate the global object\n    state.initialize();\n\n    const updatePost = async (e) => {\n        // Parse the incoming data and check if it already exists in state\n        const dataForUse = checkOriginAndParsedData(e);\n        // Only append if the comment hasn't been added before\n        if (!appendedPosts.has(dataForUse.post_no)) {\n            appendedPosts.add(dataForUse.post_no);\n\n            // Clean up old entries if the set exceeds the limit\n            if (appendedPosts.size > MAX_APPENDED_POSTS) {\n                const oldestPost = appendedPosts.values().next().value;\n                appendedPosts.delete(oldestPost);\n            }\n\n            appendNewPost(dataForUse)\n\n            try {\n                await axios.put(`/updatePostByStatusAsPublished/${dataForUse.post_no}`, { post_status: 'published' });\n\n            } catch (error) { console.error(`Failed to update comment status: ${error.message}`); }\n\n        }\n    };\n\n    const updateComment = async (e) => {\n        // Parse the incoming data and check if it already exists in state\n        const dataForUse = checkOriginAndParsedData(e);\n\n        // Only append if the comment hasn't been added before\n        if (!appendedComments.has(dataForUse.comment_no)) {\n            appendedComments.add(dataForUse.comment_no);\n\n            // check if dataForUse length is greater than 0 and if yes foreach to lop \n\n            appendNewComment(dataForUse)\n\n            const commentCounterEl = id(`commentCounter${dataForUse.post_no}`);\n            if (commentCounterEl) {\n\n                const commentCount = parseInt(commentCounterEl.textContent)\n                // get the current value and convert it to a number \n                    commentCounterEl.textContent = commentCount + 1;\n        \n\n            }\n\n\n            try {\n                await axios.put(`/updateCommentByStatusAsPublished/${dataForUse.comment_no}`, { comment_status: 'published' });\n\n            } catch (error) { console.error(`Failed to update comment status: ${error.message}`); }\n\n        }\n    };\n\n    const deleteComment = (data) => {\n        const no = data.commentNo;\n        const postNo = data.postNo;\n\n        const commentEl = id(`commentDiv${no}`);\n        if (commentEl) commentEl.remove();\n\n        const commentCounterEl = id(`commentCounter${postNo}`);\n        if (commentCounterEl) {\n\n            const commentCount = parseInt(commentCounterEl.textContent)\n            // get the current value and convert it to a number \n\n            if (commentCount > 0) {\n                commentCounterEl.textContent = commentCount - 1;\n            }\n\n        }\n\n\n\n    };\n\n    const updateLike = (e) => {\n        // Parse the incoming data and check if it already exists in state\n        const dataForUse = checkOriginAndParsedData(e);\n        const likeElement = id(dataForUse.likeHtmlId);\n        if (likeElement) {\n            likeElement.innerHTML = parseInt(dataForUse.likeCounter)\n        }\n    };\n\n    // Subscribe to the posts channel\n    const postsChannel = pusher.subscribe('posts-channel');\n    postsChannel.bind('new-post', (data) => {\n        data.forEach(item => updatePost(item))\n    });\n\n    // Subscribe to the comments channel\n    const commentsChannel = pusher.subscribe('comments-channel');\n    commentsChannel.bind('new-comment', (data) => {\n        data.forEach(item => updateComment(item))\n    })\n    commentsChannel.bind('delete-comment', (data) => {\n        deleteComment(data)\n    })\n    commentsChannel.bind('reacted-updated', (data) => {\n        deleteComment(data)\n    })\n\n    // Subscribe to the likes channel\n    const likesChannel = pusher.subscribe('likes-channel');\n    likesChannel.bind('like-event', (data) => {\n\n        data.forEach(item => updateLike(item))\n    });\n\n    // Subscribe to the event channel\n\n\n    const checkEventAndAdd = (data) => {\n\n        const appendEvent = eventHtml(data);\n        return id('eventList').insertAdjacentHTML('afterbegin', appendEvent);\n    }\n\n    const notificationChannel = pusher.subscribe('notification-channel');\n\n    notificationChannel.bind('new-notification', (data) => {\n        if (localStorage.getItem('requesterFamCode') === data.receiver_id) {\n            checkEventAndAdd(data);\n            addToNotificationTab(data);\n            increaseNotificationCount();\n\n        }\n    });\n\n\n\n    // AUTOMATICALLY UPDATE TIMESTAMP\n    // Function to check for elements and render if they exist every 5 seconds\n    setInterval(() => {\n        checkManyElements('class', \".timeago\", render);\n        checkManyElements('class', \".commentTiming\", render);\n    }, 2000); // Adjust interval as needed\n\n\n    const checkOriginAndParsedData = (data) => {\n        if (!data) throw new Error('No update received');\n        if (data) {\n\n            if (data.origin != appUrl) { msgException('Invalid Origin'); }\n            return data\n        }\n\n        // check if data is a valid jason object\n        // return JSON.parse(data)\n    }\n\n} catch (error) {\n    showError(error)\n}","\"use strict\";\nimport { id, showError } from \"@shared\"\n\n// import { postFormData } from \"../helper/http\"\n\ntry {\n\n    // NEW MESSAGE MODAL\n    const showModal = () => id('id01').style.display = 'block'\n\n    // CREATE EVENT MODAL\n    const showEvent = () => id('id_event_modal').style.display = 'block'\n\n    //EVENT ACTION\n\n\nconst action = () => {\n\n    const createEvent = id('createEvent')\n    const postMsg = id('postMsg')\n\n     if (createEvent) {\n          createEvent.addEventListener('click', showEvent);\n        } else if (postMsg) {\n          postMsg.addEventListener('click', showModal)\n        } \n}\n     \n    if (document.readyState === 'loading') {\n    document.addEventListener('DOMContentLoaded', action);\n  }\n\n    // handle post message\n\n} catch (e) {\n    showError(e)\n}","// utility for periodic sync  \nif ('periodicSync' in navigator) {\n    (async () => {\n        // Request permission for background sync\n        const status = await navigator.permissions.query({ name: 'periodic-background-sync' });\n\n        if (status.state === 'granted') {\n            console.log('Background sync permission granted');\n        } else {\n            console.log('Background sync permission denied');\n        }\n\n        try {\n            await navigator.periodicSync.register('content-sync', {\n                minInterval: 24 * 60 * 60 * 1000, // Minimum interval in milliseconds (e.g., 1 day)\n            });\n            console.log('Periodic Sync registered');\n        } catch (error) {\n            console.error('Periodic Sync registration failed:', error);\n        }\n    })(); // Immediately invoke the async function\n}","import { html } from \"./html\"\nimport { id, log, msgException, showError } from '../global'\n\n\nconst famCode = localStorage.getItem('requesterFamCode');\n/**\n * Renders a post and its associated comments in the DOM.\n * \n * This function takes a post object and an array of comment data,\n * filters the comments to include only those associated with the \n * given post, generates HTML for the post using the `html` function, \n * and appends it to the 'postIt' container in the DOM.\n *\n * @param {Object} el - The post object containing post data, including post number.\n * @param {Array} commentData - An array of comment objects associated with posts.\n * @returns {boolean} - Returns false if the post object is invalid.\n */\nexport const allPost = (postData, commentData) => {\n\n  if (!postData ||!Array.isArray(commentData)) {\n    msgException('Invalid post data');\n  }\n\n  let postNo = parseInt(postData.post_no)\n\n  const filterComment = commentData.filter(comm => parseInt(comm.post_no) === postNo ) // filter the comment to an array\n  const postHtml = html(postData, filterComment)\n  // if(postFamCode === famCode) {\n    id('postIt').insertAdjacentHTML('beforeend', postHtml)\n   \n}\n\n/**\n * Appends a new post to the DOM if it does not already exist.\n * \n * This function checks for the existence of comment form elements \n * associated with the provided post object. If any of these elements \n * are missing, it generates HTML for the post using the `html` function \n * and inserts it at the beginning of the 'postIt' container.\n *\n * @param {Object} el - The post object containing post data, including post number.\n * @returns {boolean} - Returns false if the post object is invalid.\n */\nexport const appendNewPost = (el) => {\n const {post_no} = el \n// Generate the IDs for the comment form and its components const \nconst commentFormId = `formComment${post_no}`; \nconst inputCommentId = `inputComment${post_no}`; \nconst submitCommentId = `submitComment${post_no}`;\n\n// Check if the comment form components exist in the DOM\n  const commentForm1 = id(commentFormId);\n  const inputComment = id(inputCommentId)\n  const submitComment = id(submitCommentId);\n\n// If the comment form components do not exist, create and append the new post\n  if (!commentForm1 || !inputComment || !submitComment) {\n    const appendHTML = html(el);\n\n  // Ensure the post belongs to the correct family code\n    // if (el.postFamCode === famCode) {\n      id('postIt').insertAdjacentHTML('afterbegin', appendHTML)\n    // } else{\n    //   return false\n    // }\n\n  }\n\n}\n","// Import a helper function to get elements by ID (assumed from your shared utils)\nimport { showEmojiPicker } from '../emojiPicker.js';\nimport { imagePreview } from '../fileUploadPreview';\n\n// Get references to DOM elements used in the emoji picker and image preview\n\nconst emojiToggle = document.getElementById('emojiToggle'); // Button to show/hide emoji picker\nconst emojiList = document.getElementById('emojiPickerList'); // Container for emoji buttons\n\n\nshowEmojiPicker('emojiPickerList', 'data-emoji-target');\n\n// 🟡 Toggle emoji picker visibility when the toggle button is clicked\nemojiToggle.addEventListener('click', () => {\n    emojiList.classList.toggle('d-none'); // Show/hide the emoji list\n    emojiToggle.setAttribute('aria-expanded', emojiList.classList.contains('d-none') ? 'false' : 'true');\n});\n\n\nimagePreview('imageUpload', 'imagePreviewList', 'postModalImgFileNames', 'imagePreviewContainer', 'closeImagePreview');\n\n\n\n\n","import axios from 'axios';\n\n\nconst VAPID_PUBLIC_KEY = process.env.MIX_VAPID_PUBLIC_KEY;\n\n\nfunction urlBase64ToUint8Array(base64String) {\n    const padding = '='.repeat((4 - base64String.length % 4) % 4);\n    const base64 = (base64String + padding)\n        .replace(/-/g, '+')\n        .replace(/_/g, '/');\n    const rawData = window.atob(base64);\n    const outputArray = new Uint8Array(rawData.length);\n    for (let i = 0; i < rawData.length; ++i) {\n        outputArray[i] = rawData.charCodeAt(i);\n    }\n    return outputArray;\n}\n\n//// Check if service workers and push notifications are supported by the browser\n\n\nif ('serviceWorker' in navigator && 'PushManager' in window) {\n    navigator.serviceWorker.register('/service-worker.js').then((swReg) => {\n\n        // Check if the user is already subscribed\n       checkSubscription(swReg);\n\n    }).catch((error) => {\n        console.error('Service Worker registration failed', error);\n    });\n} \n\nfunction checkSubscription(swReg) {\n    swReg.pushManager.getSubscription().then((subscription) => {\n        if (subscription === null) {\n            // Request permission for notifications\n            requestPermission(swReg);\n        } else {\n            console.log('User  is already subscribed:', subscription);\n\n            postSubscriptionToServer(subscription);\n        }\n    });\n}\n\nfunction requestPermission(swReg) {\n    // This call must be made in response to a user action\n    Notification.requestPermission().then((permission) => {\n        if (permission === 'granted') {\n            subscribeUser (swReg);\n        } else {\n            console.log('Push notifications permission denied.');\n        }\n    });\n}\n\nfunction subscribeUser(swReg) {\n    const applicationServerKey = urlBase64ToUint8Array(VAPID_PUBLIC_KEY);  // Access public VAPID key\n\n    swReg.pushManager.subscribe({\n        userVisibleOnly: true,\n        applicationServerKey: applicationServerKey\n    }).then((subscription) => {\n        console.log('User is subscribed:', subscription);\n        // Send subscription object to the server to store it\n        postSubscriptionToServer(subscription);\n    }).catch((error) => {\n        console.error('Failed to subscribe the user: ', error);\n    });\n}\n\nfunction postSubscriptionToServer(subscription) {\n\n    // Prepare the subscription data to be sent to the server\n\n    const subscriptionData = {\n        id: localStorage.getItem('requesterId'),\n        endpoint: subscription.endpoint,\n        keys: {\n            p256dh: btoa(String.fromCharCode.apply(null, new Uint8Array(subscription.getKey('p256dh')))),\n            auth: btoa(String.fromCharCode.apply(null, new Uint8Array(subscription.getKey('auth'))))\n        }\n    };\n    \n    // Send subscription to the server using axios\n    axios.post('/pushNotification/subscription', subscriptionData)\n        .then(response => {\n            console.log('Subscription data successfully sent to the server:', response);\n        })\n        .catch(error => {\n            console.error('Failed to send subscription data to the server:', error);\n        });\n\n}\n\n\n\n","\n        // RSVP Buttons\n        const rsvpButtons = document.querySelectorAll('.rsvp-buttons .btn');\n        \n        rsvpButtons.forEach(button => {\n            button.addEventListener('click', function() {\n                // Remove active class from all buttons in the same container\n                this.parentElement.querySelectorAll('.btn').forEach(btn => {\n                    btn.classList.remove('active');\n                    if (btn.classList.contains('btn-outline-primary')) {\n                        btn.classList.replace('btn-primary', 'btn-outline-primary');\n                    } else if (btn.classList.contains('btn-outline-secondary')) {\n                        btn.classList.replace('btn-secondary', 'btn-outline-secondary');\n                    } else if (btn.classList.contains('btn-outline-danger')) {\n                        btn.classList.replace('btn-danger', 'btn-outline-danger');\n                    }\n                });\n                \n                // Add active class to clicked button\n                this.classList.add('active');\n                if (this.classList.contains('btn-outline-primary')) {\n                    this.classList.replace('btn-outline-primary', 'btn-primary');\n                } else if (this.classList.contains('btn-outline-secondary')) {\n                    this.classList.replace('btn-outline-secondary', 'btn-secondary');\n                } else if (this.classList.contains('btn-outline-danger')) {\n                    this.classList.replace('btn-outline-danger', 'btn-danger');\n                }\n            });\n        });\n        "],"names":[],"sourceRoot":""}