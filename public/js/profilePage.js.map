{"version":3,"file":"js/profilePage.js","mappings":";;;;;;;;;;;;;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAGA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;;AAEA;AACA;AACA;AAFA;AAAA;AAAA;AAKA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAAA;AACA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;;AAEA;AACA;AAAA;AAEA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAEA;AA9BA;AAAA;AAQA;AAsBA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAIA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAMA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAlBA;AAAA;AAAA;AAmBA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAOA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AASA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC1RA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAGA;AAEA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AACA;;AAEA;AACA;AAEA;AAEA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChGA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAGA;AAEA;AAGA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAIA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAQA;AAEA;AACA;AASA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAlBA;AAAA;AAAA;AAmBA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACnNA;;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;ACbA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;;AAGA;;AAEA;AAEA;AAsBA;;AAIA;;AAEA;AACA;AAGA;AACA;AAEA;AAEA;AAEA;AAGA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AAGA;AACA;AAEA;AAEA;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AAEA;AACA;AACA;;AAGA;;AAEA;;AAKA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;;AAEA;AACA;AACA;AAGA;AAGA;AAEA;AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAiBA;;;;;;;;;;;;;;ACvQA;;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAIA;AAEA;AACA;AACA;AACA;;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAIA;AACA;AAAA;AAAA;AAEA;AACA;AAGA;AAEA;AAAA;AAAA;AAEA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AACA;AACA;;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;;AAEA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AAEA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAOA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;ACzHA;AACA;AAEA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAGA;AAEA;AAcA;AAEA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AAEA;AACA;AAGA;AAEA;AACA;AACA;AACA;AAEA;AACA;;AAEA;AACA;AACA;AACA;AAGA;AAGA;AAGA;AAEA;AACA;AAeA;;;;;;;;;;;;;;;;;;;ACnFA;;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AAEA;AAAA;AAAA;AAEA;AAEA;AAEA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAIA;AACA;AACA;AAEA;AAAA;AAIA;AAAA;AAAA;AAHA;AAAA;AAKA;AAEA;AAIA;;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAvCA;AAAA;AAAA;AA2CA;AACA;AACA;AACA;AACA;;;;;;;;;;AC7FA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACzBA;;AACA;AAEA;AAEA;;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACvBA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAVA;AAAA;AAAA;;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAAA;AAAA;AAAA;AACA;;AAGA;AACA;AACA;AAEA;;AAGA;;AAEA;;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;ACjFA;AACA;AACA;AACA;AACA;AAGA;AAAA;AACA;AAAA;AACA;AAcA;;;;;;;;;;;;;;;ACvBA;AAAA;AACA;AAsCA;;;;;;;;;;;;;;;;ACvCA;AACA;AACA;AAGA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AAqBA;AAcA;;;;;;;;;;;;;;;AClDA;AACA;AAwBA;;;;;;;;;;;;;;;;;ACzBA;AACA;AACA;AAAA;AAAA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAGA;;AAGA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAAA;AAAA;AAAA;AAEA;AAEA;AAUA;;;;;;;;;;;;;;;ACvCA;AAEA;AACA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AAGA;AAKA;AAAA;AAAA;AAEA;AAKA;;;;;;;;;;;;;;ACtBA;;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAGA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;ACpDA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;ACtCA;AAAA;AAAA;AAAA;AADA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAEA;AACA;AACA;AAEA;;AAEA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;;AAEA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AArBA;AAAA;AAAA;AAuBA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;;AAEA;;AAEA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAlBA;AAAA;AAAA;AAoBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;;AAEA;AACA;AACA;AAEA;AAAA;AAAA;AACA;;AAEA;;AAGA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;;AAEA;AACA;AACA;AAEA;AACA;AACA;;;;;;;;;;;;;AC3KA;;AACA;;AAEA;;AAEA;AAEA;AACA;AAAA;AAAA;;AAEA;AACA;AAAA;AAAA;;AAEA;;AAGA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;AAEA;AAEA;AACA;AACA;;;;;;;;;;ACnCA;AAAA;AAAA;AAAA;AADA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAIA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;;;;;;;;;;;;;;;;;;ACrBA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;;;;;;;;;;;;;ACpEA;AAGA;AAGA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;;;;;;;;;;AC7FA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://family/./resources/asset/js/components/FormHelper.js","webpack://family/./resources/asset/js/components/global.js","webpack://family/./resources/asset/js/components/helper/general.js","webpack://family/./resources/asset/js/components/helper/images.js","webpack://family/./resources/asset/js/components/navbar.js","webpack://family/./resources/asset/js/components/profilePage/allEvents.js","webpack://family/./resources/asset/js/components/profilePage/comment.js","webpack://family/./resources/asset/js/components/profilePage/createEvent.js","webpack://family/./resources/asset/js/components/profilePage/emojiPicker.js","webpack://family/./resources/asset/js/components/profilePage/eventHTML.js","webpack://family/./resources/asset/js/components/profilePage/friendRequestCard.js","webpack://family/./resources/asset/js/components/profilePage/html.js","webpack://family/./resources/asset/js/components/profilePage/htmlFolder/commentForm.js","webpack://family/./resources/asset/js/components/profilePage/htmlFolder/friendRequestCard.js","webpack://family/./resources/asset/js/components/profilePage/htmlFolder/likeCommentButton.js","webpack://family/./resources/asset/js/components/profilePage/htmlFolder/nameImageTiming.js","webpack://family/./resources/asset/js/components/profilePage/htmlFolder/showPostImages.js","webpack://family/./resources/asset/js/components/profilePage/img.js","webpack://family/./resources/asset/js/components/profilePage/index.js","webpack://family/./resources/asset/js/components/profilePage/loadPost.js","webpack://family/./resources/asset/js/components/profilePage/modal.js","webpack://family/./resources/asset/js/components/profilePage/periodicSync.js","webpack://family/./resources/asset/js/components/profilePage/post.js","webpack://family/./resources/asset/js/components/profilePage/registerPushNotification.js","webpack://family/./resources/asset/js/components/profilePage/rsvpBtn.js"],"sourcesContent":["'use strict'\n\nimport { matchRegex } from \"./helper/general\"\n\nexport default class FormHelper {\n    constructor(data) {\n         if (!Array.isArray(data)) throwError('data must be an array of form elements');\n        this.data = data;\n        this.error = [];\n        this.result = 0;\n    }\n\n    id(x) {\n        return document.getElementById(x)\n    }\n\n    /**\n     * general validation; check empty status, at least a single input, mobile length, white space\n     */\n\n    getData() {\n        return this.data;\n    }\n\n\n    validateField(value, type = 'general') {\n        const regexes = {\n            email: /^[\\w\\-\\.\\+]+\\@[a-zA-Z0-9\\.\\-]+\\.[a-zA-Z0-9]{2,4}$/,\n            // Add more regexes as needed\n        };\n        return type === 'email' ? regexes.email.test(value) : value.trim() !== '';\n    }\n\n\n    massValidate() {\n        // const reg = /[a-zA-Z0-9./@]/g;\n        this.data.forEach(et => {\n\n            for (let post of et) {\n                // capture the error to a variable\n                let errMsg = this.id(`${post.name}_error`)\n                let postName = post.name.replace('_', ' ')\n                let asterisk = \"*\";\n\n                // rid it off the submit and token\n                if (['submit', 'button', 'showPassword_id', 'g-recaptcha-response', 'cancel', 'token', 'checkbox_id'].includes(post.name) ||\n                    ['button'].includes(post.id) || ['button'].includes(post.type)) return;\n                // check if there is no value\n\n                if (['spouseName', 'spouseMobile', 'spouseEmail', 'fatherMobile', 'fatherEmail', 'motherMobile', 'maidenName', 'motherEmail'].includes(post.name)) {\n                    // post.value is not prpvided if it is not provided \n                    post.value = post.value === \"\" ? \"Not Provided\" : post.value\n                }\n\n                if (post.value === '' || post.value === 'select') {\n                    if (!this.validateField(post.value)) {\n                        if (errMsg) {\n                            errMsg.innerHTML = `${post.placeholder ?? asterisk} cannot be left empty`;\n                            errMsg.style.color = 'red';\n                        }\n                        this.error.push(`${postName.toUpperCase()} cannot be left empty`);\n                        this.result = false;\n                    }\n                }\n\n                if (post.name === 'email' && !this.validateField(post.value, 'email')) {\n                    this.error.push('<li style=\"color: red;\">Please enter a valid email</li>');\n                    if (errMsg) errMsg.innerHTML = '* Please enter a valid email';\n                    this.result = false;\n                }\n            }\n        })\n    }\n\n    emailVal() {\n        const emailExp = /^[\\w\\-\\.\\+]+\\@[a-zA-Z0-9\\.\\-]+\\.[a-zA-z0-9]{2,4}$/;\n        let msg = `<li style=color:'red';> Please enter a valid email</li>`\n        const email = this.id('email_id').value\n        if (email.match(emailExp) === null) {\n            this.id('email_error').innerHTML = msg\n            this.id('email_error').style.color = \"red\"\n            this.error.push(msg)\n        }\n    }\n\n    clearError() {\n        this.error = []; // Empty the error array\n\n        // Define a function to clear error messages for a given input element\n        const clearErrorForElement = (elementName) => {\n            const errorElement = this.id(`${elementName}_error`);\n            if (errorElement) {\n                errorElement.innerHTML = '';\n            }\n        };\n\n\n        this.data.forEach(el => {\n            for (let post of el) {\n\n\n\n                const { id, name, value } = post;\n\n                // Skip certain input types\n                if (['submit', 'button', 'token', 'checkbox'].includes(id) || ['token', 'submit'].includes(name)) {\n                    continue;\n                }\n\n                const the_id = this.id(id);\n\n\n                if (the_id) {\n                    // Add keyup event listener to clear errors for non-select inputs\n                    the_id.addEventListener('keyup', () => {\n                        if (value !== 'select') {\n                            clearErrorForElement(name);\n                        }\n                    });\n                } else {\n                    console.error(`Element with ID '${id}' with post name '${post.name}' not found.`);\n                }\n\n                // Add change event listener to clear error message\n                the_id.addEventListener('change', () => {\n                    clearErrorForElement(name);\n                });\n\n            }\n        })\n    }\n\n    clearHtml() {\n\n        this.data.forEach(el => {\n            for (let post of el) {\n                if (post.id == 'submit' || post.name == 'submit' || post.name == 'checkbox') {\n                    continue\n                }\n                post.value = \"\"\n\n\n            }\n        })\n    }\n\n    /**\n     *\n     * @param {input is the id of the input/ this is an array [as, it, it]} input\n     * @param {* this is the max policy and it must be an integer} maxi\n     */\n\n    realTimeCheckLen(input, maxi) {\n        try {\n            for (let i = 0; i < input.length; i++) {\n                const theData = this.id(`${input[i]}_id`);\n                if (theData === null || theData === undefined || theData === \"\") {\n                    throw new Error(`Element with ID '${input[i]}_id' not found or is empty`);\n                }\n                const max = maxi[i];\n                const error = this.id(`${input[i]}_error`);\n                theData.maxLength = parseInt(max) + 1; // Fixed the parsing issue here\n                theData.addEventListener('keyup', () => {\n                    error.innerHTML = (theData.value.length > max) ? `You have reached the maximum limit` : \"\";\n                    const help = this.id(`${input[i]}_help`);\n                    help.style.color = 'red';\n                    help.style.fontSize = '10px';\n                    error.style.color = 'red';\n                    setTimeout(() => {\n                        help.style.display = 'none';\n                    }, 5000);\n                });\n            }\n        } catch (error) {\n            console.error(error.message);\n        }\n    }\n\n\n    /**\n     * the id for the password error should be password_help\n     * the id for your confirm pasword should confirm_password\n     * it will return an error message to the password_help input\n     */\n\n    matchInput(first, second) {\n        let error, firstInput, secondInput\n        error = this.id(`${second}_error`)\n        firstInput = this.id(first + '_id')\n        secondInput = this.id(second + '_id')\n        secondInput.addEventListener('keyup', () => {\n            error.innerHTML = (secondInput.value !== firstInput.value) ? 'Your passwords do not match' : \"\"\n        })\n    }\n    /**\n     *\n     * @param {the id of the input you want to inject to/ this is an array} idArray\n     * @param {*the comment or questions you want o inject} html\n     */\n\n    injectData(idArray, html) {\n        let idData;\n        for (let i = 0; i < idArray.length; i++) {\n            idData = this.id(idArray[i]);\n            idData.innerHTML = html[i];\n        }\n    }\n\n    /**\n     *\n     * @param {this is an id and its value is for duplication} firstInput\n     * @param {* another id that accepts the value of the firstInput} takeFirstInput\n     */\n    duplicate(giveInput, takeInput) {\n        let giver, taker;\n        giver = this.id(giveInput)\n        taker = this.id(takeInput)\n        giver.addEventListener('keyup', () => {\n            taker.value = giver.value;\n        })\n    }\n\n    /**\n     *\n     * @param {current input that is being type to. the value is what will be checked realtime. the id is needed} input\n     * @param {* the url to get the info to . example is /search?hint} url\n     * @param {enter the id of the output element} output\n     */\n\n\n    realTimeServer(input, url, outputId) {\n        let theInput, inputVal, output;\n        theInput = this.id(input)\n        output = this.id(outputId)\n        theInput.addEventListener('keyup', () => {\n            inputVal = theInput.value\n\n            if (inputVal == 0) {\n                output.innerHTML = \"\";\n                return;\n            } else {\n                var xmlhttp = new XMLHttpRequest();\n                xmlhttp.onreadystatechange = function () {\n                    if (this.readyState == 4 && this.status == 200) {\n                        output.innerHTML = this.responseText;\n                    }\n                }\n                xmlhttp.open(\"GET\", `${url}=${inputVal}`, true);\n                xmlhttp.send();\n            }\n        })\n    }\n\n    isChecked(yesId, noId, hiddenInput) {\n        const checked = () => {\n            if (this.id(yesId).checked) {\n                alert('check')\n                this.id(hiddenInput).innerHTML = 'checked';\n            } else if (this.id(noId).checked) {\n                this.id(hiddenInput).innerHTML = 'checked';\n            }\n        }\n\n        this.id(yesId).addEventListener('click', checked)\n        this.id(noId).addEventListener('click', checked)\n\n    }\n\n    previousAddress() {\n        const timeAddy = this.id('time_at_address_id')\n        const prevAddy = this.id('previous_address_class')\n        const showPrev = () => {\n            if (timeAddy.value != '3 years+') {\n                prevAddy.style.display = 'block'\n                this.id('previous_address_help').innerHTML = \"Please enter your full address: House No, Street Name, Town/City and Post Code\"\n            } else {\n                prevAddy.style.display = 'none'\n            }\n\n        }\n        timeAddy.addEventListener('change', showPrev)\n\n    }\n\n\n}","import axios from \"axios\"\n\nexport const id = (id) => document.getElementById(id)\nexport const idValue = (id) => id(id).value\nexport const idInnerHTML = (id) => id(id).innerHTML\nexport const warningSign = \"\\u26A0\"; // danger warning sign\n\nexport const qSel = (name) => document.querySelector(name)\nexport const qSelAll = (name) => document.querySelectorAll(name)\nexport const qSelValue = (name) => qSel(name).value\nexport const qSelInnerHTML = (name) => qSel(name).innerHTML\n\nexport const log = (id, identifier =null) => {\n    console.log(' start'+ \"  \" + identifier)\n    console.log(id)\n    console.log(' end'+ \"  \" +identifier)\n}\nexport const write = (input) => document.write(input)\n\nexport const hideElement = (elementId) => {\n  id(elementId).style.display = \"none\";\n};\n\nexport const showElement = (elementId) => {\n  id(elementId).style.display = \"block\";\n};\n\nexport const manipulateAttribute = (idName, removeOrSet, attributeType, nameValue =null) => {\n\n    if(removeOrSet === \"remove\") {\n           id(idName).removeAttribute(attributeType)\n    } else {\n        id(idName).setAttribute(attributeType, nameValue)\n    }\n \n  \n}\n\nexport const date2String = (date) => new Date().toDateString(date)\n\nexport const showError = (e) => {\n  \n    log(e.message, \" ERROR MESSAGE\") // \"null has no properties\"\n    log(e.name, \" ERROR NAME\") // \"TypeError\"\n    log(e.fileName,  \" ERROR FILENAME\") // \"Scratchpad/1\"\n    log(e.lineNumber, \" ERROR LINENUMBER\") // 2\n\n    log(e.stack)\n}\n\nexport const msgException = (errorMessage) => {\n  \n    throw new Error(errorMessage)\n}\n\n\n/**\n * \n * @param {*} elementId - element id\n * @param {*} addClass either a success or danger class (green or red)\n * @param {*} message - html message to convey success or failure\n * @param {*} timer - timer for the message to disappear- default is 5 secs\n */\nexport const showNotification = (elementId, addClass, message, timer = 5000) => {\n    // display the success information for 10sec\n    id(`${elementId}`).style.display = \"block\" // unblock the notification\n    id(`${elementId}`).classList.add(addClass) // add the success class\n    id(`${elementId}`).innerHTML = message // error element\n    id('loader').classList.remove('loader') // remove loader\n\n    setTimeout(() => {\n        id(`${elementId}`).style.backgroundColor = \"\"\n        id(`${elementId}`).style.color = \"\"\n        id(`${elementId}`).innerHTML = \"\"\n    }, timer)\n}\n\n    // Function to check for elements and render if they exist\n    export const checkElements = (idOrClass, classString, theFunction = null) => {\n\n        const doesElementExist = (idOrClass === \"id\") ? id(classString) : qSel(classString)\n        // Check if elements exist before calling render function\n        if (doesElementExist.length) {\n            theFunction(doesElementExist);\n        }\n\n    };\n\n     export const checkManyElements = (idOrClass, classString, theFunction = null) => {\n\n        const doesElementExist = (idOrClass === \"id\") ? id(classString) : qSelAll(classString)\n        // Check if elements exist before calling render function\n        if (doesElementExist.length > 0) {\n            theFunction(doesElementExist);\n        }\n\n    };\n\n","\"use strict\";\nimport { id, qSelAll } from '../global';\nimport autocomplete from 'autocompleter';\nimport FormHelper from '../FormHelper';\n\n\nexport const loaderIconBootstrap = () => {\n\n    return `<div class=\"spinner-grow text-primary\" role=\"status\">\n        <span class=\"sr-only\">Loading...</span>\n        </div>`\n}\n\nexport const loaderIcon = () => {\n\n    return `<div class=\"loader\"></div>`\n}\n\nexport const loaderIconBulma = () => {\n\n    return `<div class=\"is-loading\"></div>`\n}\n\nexport const removeDiv = (div_id) => {\n    const div = document.getElementById(div_id)\n    if (div) {\n        return div.remove()\n    }\n\n}\n\n\n\nexport const createAndAppendElement = (elementType, setId, parent, setClass = null) => {\n    const newDiv = document.createElement(elementType);\n    newDiv.setAttribute('id', setId)\n    newDiv.setAttribute('class', `field ${setClass}`)\n    const parentDiv = id(parent)\n    return parentDiv.appendChild(newDiv)\n}\n\n/**\n * \n * @param {the id of the input} inputId \n * @param {the api data or array data} data \n * @param { filterby is the data.filterby }\n */\nexport const autoCompleter = (inputId, data) => {\n    autocomplete({\n        input: inputId,\n        fetch: function (text, update) {\n            text = text.toLowerCase();\n            // you can also use AJAX requests instead of preloaded data\n            const suggestions = data.filter(n => n.firstName.toLowerCase().startsWith(text))\n            update(suggestions);\n        },\n        onSelect: function (item) {\n            input.value = item.firstName;\n        }\n\n    })\n}\n\nexport const distinctValue = (array) => {\n    return [...new Set(array)]\n}\n\nexport const checkBox = (subject) => {\n    return `<div class=\"control\"> \n        <label class=\"radio\">\n          <input type=\"radio\" name=\"send${subject}\" value=\"yes\" id=${subject}Yes > Yes \n        </label>\n        <label class=\"radio\"> \n          <input type=\"radio\" name=\"send${subject}\" value=\"no\" id=${subject}No checked> No \n        </label>\n      </div>`;\n}\n\nexport const checkBox2 = (subject) => {\n    return `<div class=\"control\"> \n        <label class=\"checkbox\">\n          <input type=\"checkbox\" name=\"send${subject}\" value=\"yes\" id=${subject}Yes> Yes \n        </label>\n        <label class=\"checkbox\"> \n          <input type=\"checkbox\" name=\"send${subject}\" value=\"no\" id=${subject}No> No \n        </label>\n      </div>`\n\n}\n\nexport const isChecked = (name, fn) => {\n    const yesId = (`${name}Yes`)\n    const noId = `${name}No`\n    const checked = () => {\n        if (id(yesId).checked) {\n            alert('check')\n            fn()\n        } else if (id(noId).checked) {\n            alert('check No')\n        }\n    }\n    id(yesId).addEventListener('click', checked)\n    id(noId).addEventListener('click', checked)\n}\n\nexport const matchRegex = (data) => {\n    if (data) {\n        if (data != \"Not Provided\") {\n            const regex = /[<?/>]+/g\n            const result = data.match(regex)\n            if (result === null) return true\n        }\n    }\n}\n\n/**\n * \n * @param { id of the first element} first \n * @param {* id of the second element} second \n * @param {* error id - if error - where to show it} err \n */\nexport const matchInput = (first, second, err) => {\n    let error, firstInput, secondInput\n    error = id(err)\n    firstInput = id(first)\n    secondInput = id(second)\n\n    secondInput.addEventListener('keyup', () => {\n\n        if (secondInput.value !== firstInput.value) {\n            error.innerHTML = 'Your passwords do not match'\n            error.style.color = \"red\"\n        } else {\n            error.innerHTML = \"The password is matched: <i class='fa fa-check' aria-hidden='true'></i>\"\n            error.style.color = \"green\"\n        }\n\n\n    })\n}\n\n/**\n * Converts a string to sentence case.\n *\n * Sentence case is a string where the first letter of each word is capitalized, and the rest of the letters are in lowercase.\n *\n * @param {string} str The string to convert to sentence case.\n * @returns {string} A new string in sentence case.\n */\nexport const toSentenceCase = (str) => {\n    return str\n        .toLowerCase() // Convert the string to lowercase\n        .split(' ')    // Split the string into words\n        .map(word => word.charAt(0).toUpperCase() + word.slice(1)) // Capitalize the first letter of each word\n        .join(' ');    // Join the words back into a string\n}\n\nexport const convertFormData = (formId) => {\n    const formInput = qSelAll(formId)\n    const formInputArr = Array.from(formInput)\n    return new FormHelper(formInputArr)\n\n}\n\n\n\nexport const showResponse = (theId, message, status) => {\n    const responseEl = id(theId)\n    const col = status ? 'green' : 'red'\n\n    responseEl.innerHTML = message\n    responseEl.style.color = 'green'\n    responseEl.style.backgroundColor = col\n    responseEl.style.color = 'white';\n    setTimeout(() => {\n        responseEl.innerHTML = '';\n    }, 5000); // Disappear after 5 seconds\n\n}\n\n\n/**\n   *\n   * @param {input is the id of the input/ this is an array [as, it, it]} input\n   * @param {* this is the max policy and it must be an integer} maxi\n   */\n\nexport const realTimeCheckLen = (input, maxi) => {\n    try {\n        for (let i = 0; i < input.length; i++) {\n            const theData = id(`${input[i]}_id`);\n            if (theData === null || theData === undefined || theData === \"\") {\n                throw new Error(`Element with ID '${input[i]}_id' not found or is empty`);\n            }\n            const max = maxi[i];\n            const error = id(`${input[i]}_error`);\n            theData.maxLength = parseInt(max) + 1; // Fixed the parsing issue here\n            theData.addEventListener('keyup', () => {\n                error.innerHTML = (theData.value.length > max) ? `You have reached the maximum limit` : \"\";\n                const help = id(`${input[i]}_help`);\n                help.style.color = 'red';\n                help.style.fontSize = '10px';\n                error.style.color = 'red';\n                setTimeout(() => {\n                    help.style.display = 'none';\n                }, 5000);\n            });\n        }\n    } catch (error) {\n        console.error(error.message);\n    }\n}\n\n\n","import { id } from \"../global\"\n\n// use this in conjunction with the file \nexport const showImageFileUploadFn = (uploadBtn, inputId, fileName ) => {\n  id(uploadBtn).addEventListener('click', function() {\n  id(inputId).click();\n});\n\nid(inputId).addEventListener('change', function() {\n  const fileNames = Array.from(this.files).map(file => file.name);\n  id(fileName).innerText = fileNames.join(', ');\n});\n\n}","import { format, render } from \"timeago.js\"\nimport { id, showError, qSel, msgException, log } from '@shared'\nimport { toSentenceCase } from \"./helper/general\"\n\n// const timeAgo = (x) => format(x)\nimport axios from \"axios\"\nimport { qSelAll } from \"@modernman00/shared-js-lib\";\n// import { html } from './profilePage/html';\n\n\n// Update notification badge\nfunction updateNotificationBadge(change) {\n    const badge = document.querySelector('.notification-badge');\n    let count = parseInt(badge.textContent);\n    count += change;\n    if (count <= 0) {\n        badge.style.display = 'none';\n    } else {\n        badge.textContent = count;\n        badge.style.display = 'flex';\n    }\n}\n\n\nconst postAgoNotification = (date) => {\n    return `\n  <div class=\"notification_timeago w3-left w3-opacity\" datetime='${date}' title='${format(date)}'> ${format(date)}\n  </div>`\n}\n// this is the notification htnl \nconst notificationHTML = (data) => {\n\n    // Map notification types to icon classes\n    // Map type → { icon, colour }\n    const iconMap = {\n        friend_request: { icon: \"bi bi-person-plus\", color: \"text-primary\" },   // Blue\n        like: { icon: \"bi bi-hand-thumbs-up\", color: \"text-success\" }, // Green\n        comment: { icon: \"bi bi-chat-dots\", color: \"text-info\" },         // Cyan\n        anniversary: { icon: \"fa-solid fa-cake-candles\", color: \"text-warning\" }, // Gold\n        new_post: { icon: \"bi bi-file-post\", color: \"text-purple\" },       // Custom purple\n        default: { icon: \"bi bi-bell\", color: \"text-secondary\" }          // Grey\n    };\n\n    const { icon, color } = iconMap[data.notification_type] || iconMap.default\n    const readOrUnread = (data.notification_status === 'clicked') ? 'read' : 'unread'\n    const { sender_id, notification_name, notification_content, created_at, no } = data\n\n\n    // generate random numbers to make the notification unique\n\n    let randomNumber = Math.floor(100 + Math.random() * 900);\n\n    return `<div id = \"notificationBar${sender_id}${randomNumber}\"   class=\"list-group-item list-group-item-action d-flex align-items-start notification_real_time ${readOrUnread} notification-item linkRequestCard\">\n\n    \n            <div class=\"notification-icon ${color}\">\n                <i class=\"${icon}\"></i></div>\n            <div class=\"notification-text\">\n                <strong>${notification_name}</strong>\n                <small>${notification_content}</small>\n                <div class=\"notification-time\"> ${postAgoNotification(created_at)} </div>\n            </div>\n            <button class=\"notification-delete btn btn-sm btn-outline-secondary btn-light\" \n                 \" \n                    data-no=\"${no}\"\n                    id=\"deleteNotification${sender_id}${randomNumber}\"\n                    aria-label=\"Delete notification\">\n                <i class=\"bi bi-x-circle\"></i>\n            </button>\n \n\n  </div>\n\n  `\n}\n\n\n\n// CLICK FUNCTION ON THE NOTIFICATION BAR THAT TAKES ONE TO THE FRIEND REQUEST CARD\n\nexport const increaseNotificationCount = () => {\n    const currentNotificationCount = parseInt(\n        sessionStorage.getItem('notificationCount')) + 1\n\n    id('notification_count').innerHTML = currentNotificationCount\n}\n\nexport const addToNotificationTab = (data) => {\n\n    return qSel('.notification_tab').insertAdjacentHTML('afterbegin', notificationHTML(data));\n\n}\n\n\nconst yourId = localStorage.getItem('requesterId');\nconst famCode = localStorage.getItem('requesterFamCode');\nconst notificationURL = `/member/notifications/id/${yourId}/${famCode}`;\n\n\n// get all the notification and display them \n// they are already filtered by famCode and id \n// for the family request, connection is done by id\n// for events -birthday etc, the connection is the famCode \n// so linked notification will be either where id matches or famcode matches\n\naxios.get(notificationURL)\n    .then(res => {\n\n        // Extract the notifications from the response\n        const data = res.data.message;\n\n        if (data) {\n\n            if (data.length > 0) {\n\n                // Display the count of notifications\n                id('notification_count').innerHTML = data.length;\n\n                // Store the notification count in session storage\n                sessionStorage.setItem('notificationCount', data.length);\n\n                // Display each notification\n                data.forEach(element => {\n                    addToNotificationTab(element);\n                });\n                // Update the timing of notifications\n                const updateNotificationTiming = document.querySelectorAll(\".notification_timeago\");\n                render(updateNotificationTiming);\n            } else {\n                id('notification_count').innerHTML = 0;\n            }\n\n        }\n\n\n    })\n    .catch(error => {\n        // Handle any errors that occur during the process\n        showError(error);\n    });\n\n\n// delete a notification \n\n// delete notification \n\n\n\n\n// document.addEventListener('click', async (e) => {\n//     const id = e.target.id;\n//        log(id)\n//     // if (!id.includes('deleteNotification')) return;\n\n//     // const deleteBtn = id(id);\n//     // const sender_id = deleteBtn.getAttribute('data-id');\n\n//     // const url = `/removeNotification/${yourId}/${famCode}/${sender_id}`\n//     // const response = axios.put(url)\n\n//     // if (response.data.message === \"Notification marked as read\") {\n\n//     //     // remove a html element with notificationBar after 2 mins \n//     //     qSel(`#${deleteBtn.id}`).closest('.notification_real_time')?.remove();\n\n//     //     // reduce the notification count as you have deleted the notification\n\n//     //     const newValues = parseInt(sessionStorage.getItem('notificationCount') - 1)\n//     //     id('notification_count').innerHTML = newValues;\n//     // } else {\n//     //     msgException(\"Error removing notification\" + \" \" + response.data.message);\n//     // }\n// })\n\n\nconst notificationBtn = id('notificationBtn');\nconst notificationDropdown = id('notificationDropdown');\nconst markAllReadBtn = id('markAllRead');\nconst notificationCount = id('notification_count');\n\n// Toggle dropdown visibility\nnotificationBtn.addEventListener('click', function (e) {\n    e.stopPropagation();\n    notificationDropdown.classList.toggle('show');\n});\n\n// Close dropdown when clicking outside\ndocument.addEventListener('click', function (e) {\n    if (!notificationBtn.contains(e.target) && !notificationDropdown.contains(e.target)) {\n        notificationDropdown.classList.remove('show');\n    }\n});\n\n// Prevent dropdown from closing when clicking inside it\nnotificationDropdown.addEventListener('click', function (e) {\n    e.stopPropagation();\n});\n\n// Mark all as read functionality\nmarkAllReadBtn.addEventListener('click', function () {\n    const unreadItems = document.querySelectorAll('.notification-item.unread');\n    unreadItems.forEach(item => {\n        item.classList.remove('unread');\n    });\n\n    // Update notification count\n    notificationCount.textContent = '0';\n    notificationCount.style.display = 'none';\n});\n\n/* run once, after the dropdown HTML is in the page */\nconst initDeleteOnce = () => {\n    const tab = document.getElementById('notification_tab'); // static parent\n    if (!tab) return;\n\n    tab.addEventListener('click', e => {\n        const btn = e.target.closest('button[id*=\"deleteNotification\"]');\n        if (!btn) return;                   // not a delete button → ignore\n\n        e.stopPropagation();                // keep dropdown open\n        const bannerId = btn.id.replace('deleteNotification', 'notificationBar');\n        const no = btn.getAttribute('data-no');\n    \n\n        const url = `/removeNotification/${no}`;\n\n\n        axios.put(url)\n            .then(response => {\n                if (response.data.message === 'Notification marked as read') {\n                    // remove a html element with notificationBar after 2 mins\n                    document.getElementById(bannerId)?.remove();\n\n                    // reduce the notification count as you have deleted the notification\n                    const newValues = parseInt(sessionStorage.getItem('notificationCount') - 1);\n                    sessionStorage.setItem('notificationCount', newValues);\n                    id('notification_count').innerHTML = newValues;\n                } else {\n                    msgException('Error removing notification' + ' ' + response.data.message);\n                }\n                // your counter routine\n            });\n    })\n}\n\n/* safe entry point */\ndocument.readyState === 'loading'\n    ? document.addEventListener('DOMContentLoaded', initDeleteOnce)\n    : initDeleteOnce();\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n///member/notifications","\"use strict\";\nimport { id, log, msgException, deleteNotification } from \"../global\"\nimport axios from \"axios\"\n\n\n\ntry {\n\n    const options = {\n        xsrfCookieName: 'XSRF-TOKEN',\n        xsrfHeaderName: 'X-XSRF-TOKEN',\n    }\n\n    // CLICK EVENT get the comment and like button from the document\n    document.addEventListener('click', async (e) => {  //document.onclick = async (e) => {\n\n        const elementId = e.target.id\n        const postId = e.target.name\n\n\n\n        // Handle Like Button Click\n        if (elementId.includes(\"likeButton\")) {\n\n            // replace button with Counter to get the span id \n            const likeCounterId = elementId.replace('Button', 'Counter')\n\n            // trim removes leading and trailing spaces\n            let likeCounterVal = id(likeCounterId).innerHTML.trim().replace(/\\n/g, ''); // \n\n            const encodedLikeCounterVal = encodeURIComponent(likeCounterVal);\n\n            await axios.put(`/profileCard/postLikes?postNo=${postId}&count=${encodedLikeCounterVal}&likeCounterId=${likeCounterId}`)\n\n            // update all members of similar famcode on their UIs using Pusher\n\n            await axios.get(\"/getNewLikesPusher\");\n\n\n\n            // Make the comment form to appear onclick. \n        } else if (elementId.includes(\"initComment\")) {\n            const commentFormId = elementId.replace('init', 'form')\n            id(commentFormId).style.display = \"block\"\n\n            // Handle Comment Submission\n        } else if (elementId.includes(\"submitComment\")) {\n\n            e.preventDefault()\n\n            //idForm == formComment511\n            const idForm = elementId.replace(\"submit\", \"form\")\n            // make the comment form disappear\n            id(idForm).style.display = \"none\"\n            // extract the form entries\n            const form = id(idForm)\n            let formEntries = new FormData(form)\n\n            // if the comment form input is empty. Get the input id and check \n            const inputComment = idForm.replace(\"form\", \"input\")\n            const idInputComment = id(inputComment);\n\n            if (idInputComment.value == null || idInputComment.value == \"\") {\n                alert(\"Please enter a comment before submitting\")\n            } else {\n\n                await axios.post('/postCommentProfile', formEntries, options)\n\n                // update all members of similar famcode on their UIs using Pusher\n\n                await axios.get(\"/getNewCommentPusher\");\n\n\n\n            }\n            // SUBMIT THE POST\n        } else if (elementId.includes(\"submitPost\")) {\n\n            e.preventDefault()\n            const formExtra = id('formPostMessageModal')\n            const formData = new FormData(formExtra)\n            // get the requesterFamCode from the localStorage \n            const requesterFamCodeValue = localStorage.getItem('requesterFamCode');\n            // Append the new form entry to the FormData object\n            formData.append('postFamCode', requesterFamCodeValue);\n\n            try {\n                // 1. Send the POST request to submit the form data\n                const response = await axios.post(\"/member/profilePage/post\", formData, options);\n\n                // 2. Notify members of similar famcode about the post by email\n                // 3. Update all members of similar famcode on their UIs using Pusher\n                await Promise.all([\n                    axios.get(\"/post/getNewPostAndEmail?newCommentNo=\" + response.data.message),\n                    axios.get(\"/getNewPostPusher\")\n                ]);\n\n                // Hide the modal and reset the form\n                id('id01').style.display = 'none';\n                id(\"formPostMessageModal\").reset();\n            } catch (error) {\n                console.error(\"An error occurred:\", error);\n                // Optionally, display an error message to the user\n                alert(\"There was an error processing your request. Please try again.\");\n            }\n\n        }     \n        // take you to the request card for approval or denial\n        else if (e.target.classList.contains('linkRequestCard')) {\n            // ONCE THE NOTIFICATION BAR IS CLICKED, IT SHOULD TAKE YOU TO BE FRIEND REQUEST CARD\n\n            const friendRequestSection = id(`${e.target.getAttribute('data-id')}_linkRequestCard`);\n            if (friendRequestSection) {\n                friendRequestSection.scrollIntoView({ behavior: \"smooth\" });\n            }\n        }\n\n\n    })\n} catch (e) {\n    showError(e)\n}\n\n\n\n\n","import { format } from \"timeago.js\"\nimport { toSentenceCase, id} from \"@shared\"\n\nexport const commentHTML = (data) => {\n\n  const {profileImg, fullName, date_created, img, comment, comment_no} = data\n\n  const imgURL = profileImg || img \n\n  \n  const image = (imgURL) ? `/public/img/profile/${imgURL}` : `/public/avatar/avatarF.png`\n\n  return `<div class='d-flex mb-3 commentDiv' id='comment${comment_no}' name='commentDiv'>\n         \n      <img src='${image}' alt='Avatar' class=\"rounded-circle me-2 commentImg\" width=\"32\" height=\"32\">\n\n              <div class=\"flex-grow-1\">\n                <div class=\"comment\">\n                  <strong> ${toSentenceCase(fullName)} </strong> \n                  ${comment}  \n                  <small class='w3-right w3-opacity commentTiming' datetime='${date_created}' title='${date_created}'> ${format(date_created)} \n                  </small> \n                  </div>\n              </div>\n         \n          </div>`\n}\n\nexport const showComment = (comment) => {\n  if (!comment) {\n    return `<div id=\"comment\" name=\"commentDiv\"></div>`;\n  } // only run if there is comment\n\n\n  // USED FOR ALL THE COMMENTS WHEN THE PAGE IS LOADING\n  const commentHTMLArray = comment.map(commentElement => {\n    return commentHTML(commentElement);\n  });\n\n  return commentHTMLArray.join(''); // Join the array elements into a single string\n}\n\n\nexport const appendNewComment = (commentData) => {\n\n  // check if commentData is valid\n  if (!commentData) {\n    throw new Error('No comment update received');\n  }\n\n  const idDiv = `showComment${commentData.post_no}`\n  // check if the div has been created by the DOM \n\n  const commentContainer = id(idDiv);\n    if (!commentContainer) {\n    throw new Error(`The comment div id does not exist `)\n  }\n\n\n  const commentHtml = commentHTML(commentData)\n\n\n  commentContainer.insertAdjacentHTML('beforeend', commentHtml)\n\n\n}\n\nexport const writeComment = (postNo) => {\n  return ` \n    <form action=\"/postCommentProfile\" \n      id=\"formComment${postNo}\" \n    >\n          <div class=\"mt-3\">\n              <div class=\"input-group\">\n                <input type=\"text\" class=\"form-control\" \n                id=\"inputComment${postNo}\" placeholder=\"Write a comment...\">\n\n                <button class=\"btn btn-outline-primary\" type=\"button\" id=\"inputComment${postNo}\" name=\"inputComment\">Post</button>\n\n              </div>\n          </div>\n    </form>\n    `\n}\n\n\n","\"use strict\";\nimport { id, log, showError } from \"../global\"\nimport FormHelper from '../FormHelper';\nimport { addToNotificationTab, increaseNotificationCount } from '../navbar'\nimport { eventHtml } from './eventHTML'\nimport axios from \"axios\";\nimport Pusher from 'pusher-js';\n\n\nconst formInput = document.querySelectorAll('.eventModalForm');\nconst formInputArr = Array.from(formInput);\nconst formData = new FormHelper(formInputArr);\n\nconst cancelModal = () => {\n\n    const displayNone = () => id('id_event_modal').style.display = 'none'\n\n    id('cancelModal').addEventListener('click', displayNone)\n\n}\n\nif (document.readyState === 'loading') {\n    document.addEventListener('DOMContentLoaded', cancelModal);\n}\n\n\n/**\n * Filters events by family code (famCode) to ensure only relevant events are shown\n * @param {Object} event - The event data object\n * @returns {boolean} - Returns true if event is linked to the family code\n */\n\n\n\nconst options = {\n    xsrfCookieName: 'XSRF-TOKEN',\n    xsrfHeaderName: 'X-XSRF-TOKEN',\n}\n\n/**\n * @function process\n * @description Processes the event modal form data to create a new event\n * @param {Event} e - The event object\n * @example\n * const eventForm = id('eventModalForm');\n * eventForm.addEventListener('submit', process);\n */\nconst process = async (e) => {\n    try {\n        e.preventDefault();\n        id('error').innerHTML = \"\"\n        formData.massValidate();\n\n        if (formData.error.length > 0) {\n            alert('The form cannot be submitted. Please check the errors');\n            formData.clearError();\n            return;\n        }\n\n        // get the form data\n        const eventForm = id('eventModalForm');\n        let eventFormEntries = new FormData(eventForm);\n\n        // POST data to create the event and notification in parallel\n        const [eventResponse, notificationResponse] = await Promise.all([\n            axios.post(\"/member/profilePage/event\", eventFormEntries, options),\n            axios.post('/member/notification/event', eventFormEntries, options)\n        ]);\n\n        // Extract and get notificationNo from the responses\n\n        const { message: notificationNo } = notificationResponse.data;\n\n        // update all members of similar famcode on their UIs using Pusher\n\n        axios.get(`/member/notification/event?notificationNo=${notificationNo}`);\n\n\n        // close the modal\n        displayNone();\n\n\n    } catch (error) {\n        showError(error)\n    }\n\n}\n\n\n\n   if (document.readyState === 'loading') {\n    document.addEventListener('DOMContentLoaded', () => {\n        id('submitEventModal').addEventListener('click', process)\n    });\n  }\n\n\n\n\n\n","        \n        // Emoji Picker\n        const emojiToggle = document.getElementById('emojiToggle');\n        const emojiPicker = document.getElementById('emojiPicker');\n        \n        emojiToggle.addEventListener('click', (e) => {\n            e.preventDefault();\n            emojiPicker.style.display = emojiPicker.style.display === 'grid' ? 'none' : 'grid';\n        });\n        \n        // Add emoji to textarea\n        const emojiButtons = document.querySelectorAll('.emoji-btn');\n        const postTextarea = document.querySelector('#postModal textarea');\n        \n        emojiButtons.forEach(button => {\n            button.addEventListener('click', () => {\n                postTextarea.value += button.textContent;\n            });\n        });\n        \n        // Close emoji picker when clicking outside\n        document.addEventListener('click', (e) => {\n            if (!emojiToggle.contains(e.target) && !emojiPicker.contains(e.target)) {\n                emojiPicker.style.display = 'none';\n            }\n        });\n        ","\"use static\"\nimport { date2String } from \"../global\"\n\nexport const eventHtml = (data) => {\n\n    return `<p class='eventInfo'>\n            <strong>RSVP: </strong> ${data.sender_name}</p>\n            <p class='eventInfo'><strong>Event: </strong>${data.notification_name}</p>\n            <p class='eventInfo'><strong>Date: </strong>${date2String(data.notification_date)} </p>\n            <p class='eventInfo'><strong>Type: </strong>${data.notification_type}</p>\n            <p class='eventInfo'><strong>Description: </strong> ${data.notification_content}</p>\n            <input type='hidden' name='event_no' id='event${data.no}' value='${data.no}'>\n\n            \n           <hr>`;\n\n//                        <button \n//     type=\"button\" \n//     id=\"coming${data.data.no}\"\n//     class=\"w3-button w3-tiny w3-theme-d2 w3-margin-bottom\">\n//       <em class=\"fa fa-comment\"></em> \n//         Coming \n//     </button>\n// \n}","\nimport axios from 'axios'\nimport { log, showError } from \"@shared\"\nconst approverId = encodeURIComponent(localStorage.getItem('requesterId')) // means that the user currently working on the UI\nimport { friendRequestCard } from './htmlFolder/friendRequestCard';\n\n\n//NOTE - this code worked well 25/10/24\n/**\n * Fetch friend requests by approver ID and render each request.\n */\nconst fetchFriendRequests = async () => {\n  try{\n\n  const response = await axios.get(`/getFriendRequestById?id=${approverId}`)\n\n      if (response.data.message) {\n        response.data.message.forEach(request => waitForRequestFriendClass(request));\n      }\n\n  } catch(error) {showError(error)} ;\n}\n\n// Wait for .requestFriendClass to appear in the DOM\nconst waitForRequestFriendClass = (data) => {\n  const observer = new MutationObserver((mutations, obs) => {\n    const requestContainer = document.querySelector('.requestFriendClass');\n    if (requestContainer) {\n       friendRequestCard(data);\n      obs.disconnect(); // Stop observing once .requestFriendClass is found\n    } else{\n      log('there is no requestFriendClass')\n    }\n  });\n\n  // Observe the entire body for changes in child elements\n  observer.observe(document.body, { childList: true, subtree: true });\n};\n\n\n// TODO: Maybe a future enhancement to show count of friend request \nconst countFriendRequest = (friend) => {\n  return friend.length > 1 ? `<p><b>Friend Requests - ${friend.length}</b></p>\n  <br></br>` : `<p><b>Friend Request</b></p><br>`;\n}\n\n\n// Fetch and render friend requests on page load\n\n   fetchFriendRequests();\n\n\n         \n        // Friend Request Actions\n        const confirmRequestButtons = document.querySelectorAll('.confirm-request');\n        const deleteRequestButtons = document.querySelectorAll('.delete-request');\n        \n        confirmRequestButtons.forEach(button => {\n            button.addEventListener('click', function() {\n                const card = this.closest('.card-body');\n                const alert = document.createElement('div');\n                alert.className = 'alert alert-success';\n                alert.textContent = 'Friend request confirmed!';\n                card.innerHTML = '';\n                card.appendChild(alert);\n                \n                // Update notification badge\n                updateNotificationBadge(-1);\n            });\n        });\n        \n        deleteRequestButtons.forEach(button => {\n            button.addEventListener('click', function() {\n                const card = this.closest('.card');\n                card.style.opacity = '0';\n                setTimeout(() => {\n                    card.remove();\n                    // Update notification badge\n                    updateNotificationBadge(-1);\n                }, 300);\n            });\n        });\n\n\n\n\n\n\n\n\n\n","import { nameImgTiming } from './htmlFolder/nameImageTiming'\nimport { commentForm } from \"./htmlFolder/commentForm\"\nimport { likeCommentButton } from \"./htmlFolder/likeCommentButton\"\nimport { showPostImg } from \"./htmlFolder/showPostImages\"\nimport { showComment, writeComment } from \"./comment\"\n\n\nexport const html = (el, comment = null) => {\n  const { post_no, postMessage } = el\n  return `\n    <div class=\"post card\">\n     <div class=\"card-body post{{$data['post_no']}}\" id=\"postIt\">\n    ${nameImgTiming(el)}\n    <p class=\"card-text\"> ${postMessage} </p>\n    ${showPostImg(el)}\n    ${likeCommentButton(el)}\n    ${commentForm(el)}\n    <div id = 'showComment${post_no}' class=\"comment-section\">\n    ${showComment(comment)}\n    ${writeComment(el)}\n      \n    </div>\n`\n}\n\n\n\n\n","export const commentForm = ({ post_no }) => {\n  return `\n    <p id=\"formComment${post_no}_notification\"></p>\n\n    <form \n      action=\"/postCommentProfile\" \n      method=\"post\" \n      id=\"formComment${post_no}\" \n      style=\"display:none\" \n      enctype=\"multipart/form-data\"\n      class=\"mb-4\"\n    >\n\n      <input \n        type=\"hidden\" \n        name=\"post_no\" \n        value=\"${post_no}\" \n      />\n\n      <input \n        type=\"text\" \n        class=\"form-control form-control-sm rounded-pill inputComment\" \n        placeholder=\"Write a comment\" \n        id=\"inputComment${post_no}\" \n        name=\"comment\" \n        value=\"\"\n      />\n\n      <div class=\"mt-3\">\n        <button \n          type=\"submit\" \n          id=\"submitComment${post_no}\" \n          class=\"btn btn-success btn-sm submitComment\"\n        >\n          Submit\n        </button>\n      </div>\n    </form>\n  `;\n};\n","import { qSel } from '@shared'\nconst appUrl = process.env.MIX_APP_URL2;\nconst approverId = encodeURIComponent(localStorage.getItem('requesterId'))\n\n\nexport const friendRequestCard = (data) => {\n\n  const imageUrl = `/public/img/profile/${encodeURIComponent(data.img ?? data.requesterProfileImg)}`;\n  const firstName = encodeURIComponent(data.firstName ?? data.requesterFirstName);\n  const lastName = encodeURIComponent(data.lastName ?? data.requesterLastName);\n  const requestId = encodeURIComponent(data.id ?? data.requesterId);\n  const requestCode = encodeURIComponent(data.famCode ?? data.requesterFamCode);\n  const mutualFriends = '2 mutual friends';\n\n\n  const html = `<p id=${requestId}_linkRequestCard></p>\n\n    <div class=\"d-flex align-items-center mb-3 friend-request-card\">\n      <img src=\"${imageUrl}\" alt=\"Avatar\" class=\"avatar me-3><br>\n\n        <div class=\"flex-grow-1\">\n          <h6 class=\"mb-0\">${firstName} ${lastName}</h6>\n          <small class=\"text-muted\">${mutualFriends}</small>\n        </div>\n    </div>\n\n    <div class=\"friend-request-actions mb-3\">\n\n              <a href=\"${appUrl}member/request/${requestId}/${approverId}/50/${requestCode}/pp\" class=\"btn btn-sm btn-primary\" title=\"confirm\">Confirm</a>\n\n\n              <a href=\"${appUrl}member/request/${requestId}/${approverId}/10\" class=\"btn btn-sm btn-outline-secondary\" title=\"Decline\">Decline</a>\n\n    </div>\n  `;\n\n  qSel('.requestFriendClass').insertAdjacentHTML('afterbegin', html);\n\n\n\n\n\n\n\n\n\n\n\n\n\n}","export const likeCommentButton = (data) => {\n  return `\n   <div class=\"reaction-buttons d-flex justify-content-between border-top border-bottom py-2 mb-3\">\n    <button \n      type=\"button\" \n      id=\"likeButton${data.post_no}\" \n      name=\"${data.post_no}\"\n      <i class=\"bi bi-hand-thumbs-up me-1\"></i> \n          Like \n        <b>\n          <span class=\"likeCounter\" id=\"likeCounter${data.post_no}\">\n            ${data.post_likes}\n          </span>\n        </b>\n    </button>\n\n    <button \n      type=\"button\" \n      id=\"initComment${data.post_no}\">\n        <i class=\"bi bi-chat me-1\"></i> \n          Comment \n      </button>\n        <button><i class=\"bi bi-share me-1\"></i> Share</button>\n    </div>\n    `\n}","import { format } from \"timeago.js\"\nimport { toSentenceCase} from \"@shared\"\nconst timeAgo = (x) => format(x)\n\n// const fullName = (fullName) => {\n//   return `<h6 id=\"fullName\"><b>${fullName}</b> </h6>`\n// }\n\n// const postedAt = (date) => {\n//   return `<div class=\"timeago postTimeCal w3-right w3-opacity\"  datetime='${date.date_created}' title='${format(date.date_created)}'> ${timeAgo(date.post_time)}</div>`\n// }\n\n\n// export const nameImgTiming2 = (data) => {\n\n\n//     const img = (data.profileImg) ? `/public/img/profile/${data.profileImg}` : \"/public/avatar/avatarF.png\"\n\n//     return `<a href=\"/profilepage/img?dir=img&pics=${data.img}&pID=${data.post_no}&path=profile&id=${data.id}\"> \n//       <img src=${img} alt=\"img\" class=\"w3-left w3-circle w3-margin-right postImg\" style=\"width:60px\">\n//         </a>\n//         ${postedAt(data)} ${fullName(data.fullName)}`\n// }\n\nexport const nameImgTiming = (data) => {\n    const { profileImg, fullName, date_created, post_time} = data;\n\n    const img = (profileImg) ? `/public/img/profile/${profileImg}` : \"/public/avatar/avatarF.png\"\n\n    return `<div class=\"d-flex align-items-center mb-3\">\n\n            <img src=\"${img}\" alt=\"Profile\" class=\"rounded-circle me-3 postImg\" width=\"40\" height=\"40\">\n                        \n            <div>\n                <h6 class=\"mb-0\">${toSentenceCase(fullName)} </h6>\n\n                <small class=\"text-muted\">posted </small><small class=\"text-muted timeago postTimeCal\" title='${format(date_created)}' datetime='${date_created}'> ${timeAgo(post_time)}</small>\n            </div>\n            </div>`\n}\n\n","export const showPostImg = (data) => {\n\n// GET THE IMAGES WITH VALUES F=IF THERE ARE ANY. FILTER USING THE OBJECT KEY AND THEN MAP THROUGH THE VALUE\n  const postImagesWithValues = Object.keys(data)\n  .filter(key => key.startsWith('post_img') && data[key] !== null)\n  .map(el => data[el])\n\n  const picsImgHtml = (imgElement, i, postNo) => `\n    <a href=\"/profilepage/img?dir=img&pics=${imgElement}&pID=${postNo}&path=post\">\n      <div class=\"w3-half\">\n        <img src=\"/public/img/post/${imgElement}\" style=\"width:100%\" alt=\"images${i}\" class=\"img-fluid mb-3\" id=\"postImage${i}\" >\n      </div>\n    </a>\n  `;\n\n  const imgElements = postImagesWithValues.map((pics, i) => picsImgHtml(pics, i, data.post_no)).join('');\n\n  return `\n\n      ${imgElements}\n\n  `;\n};\n","\"use strict\";\nimport { id, log } from \"../global\"\nimport { showImageFileUploadFn } from \"../helper/images\"\nimport  axios from \"axios\"\n\n// id('profilePics').addEventListener('click', ()=> id('formProfilePics').style.display =\"block\"\n\n// );\n\n// FOR PROFILE IMAGE CHANGE\n// showImageFileUploadFn('uploadButtonProfilePics', 'profileImageFile', 'profileImgFileNames')\n\n// // FOR POST MODAL IMAGE UPLOAD  \n\n// showImageFileUploadFn('uploadButton', 'post_img', 'postModalImgFileNames')\n\n\n// id('submitProfilePics').addEventListener('click', ()=> {23\n\n//   // Get the form element\n//     const form = document.getElementById(\"formProfilePics\");\n\n//     // Create a FormData object and append the form data to it\n//     const formData = new FormData(form);\n\n//     const options = {\n//         xsrfCookieName: 'XSRF-TOKEN',\n//         xsrfHeaderName: 'X-XSRF-TOKEN',\n//     }\n//     // send form data using axios post method\n\n//     axios.post('/member/profilePage/profileImg', formData, options)\n//     .then((response) => {\n\n//       id('profilePicsNotification').innerHTML = response.data\n//       log(response.data, \"profilePicsNotification\")\n\n//       if(response.data.message === \"Profile image updated\") {\n//         id('profilePicsNotification').classList.add('w3-green')\n//         id('profilePicsNotification').innerHTML = response.data.message\n//         // Reload the page\n//         location.reload();\n\n//       }\n//     })\n//     .catch((error) => {\n//        id('profilePicsNotification').classList.add('w3-red')\n//       id('profilePicsNotification').innerHTML = error.message\n//     });\n  \n\n//   id('profilePicsNotification').innerHTML = \"\"\n// })","\"use strict\";\n\nlocalStorage.removeItem('redirect')\n\n  // Dark Mode Toggle\n        const darkModeToggle = document.getElementById('darkModeToggle');\n        const body = document.body;\n        \n        // Check for saved dark mode preference\n        if (localStorage.getItem('darkMode') === 'enabled') {\n            body.classList.add('dark-mode');\n            darkModeToggle.innerHTML = '<i class=\"bi bi-sun-fill\"></i>';\n        }\n        \n        darkModeToggle.addEventListener('click', () => {\n            body.classList.toggle('dark-mode');\n            \n            if (body.classList.contains('dark-mode')) {\n                localStorage.setItem('darkMode', 'enabled');\n                darkModeToggle.innerHTML = '<i class=\"bi bi-sun-fill\"></i>';\n            } else {\n                localStorage.setItem('darkMode', null);\n                darkModeToggle.innerHTML = '<i class=\"bi bi-moon-fill\"></i>';\n            }\n        });\n\nimport \"./loadPost\"\nimport \"./modal\"\nimport \"./img\"\nimport \"./emojiPicker\"\nimport \"./rsvpBtn\"\n\nimport \"./allEvents\"\nimport \"./registerPushNotification\"\nimport \"./periodicSync\"\n\nimport \"./createEvent\"\nimport \"./friendRequestCard\"\nimport \"../navbar\"\n// import \"./newPage\"\n\n\n\n\n\n","import { log, showError, checkManyElements, id, msgException } from '../global'\nimport { appendNewPost, allPost } from './post'\nimport { render } from \"timeago.js\"\nimport { appendNewComment } from './comment'\nimport Pusher from \"pusher-js\"\nimport axios from \"axios\"\nimport { eventHtml } from './eventHTML'\nimport { addToNotificationTab, increaseNotificationCount } from '../navbar'\n\n// set an empty array\ntry {\n    const MAX_APPENDED_POSTS = 1000; // Set a maximum limit\n    const appendedComments = new Set(); // To track unique comments\n    const appendedPosts = new Set(); // To track unique comments\n\n    // Initialize Pusher\n    const pusher = new Pusher(process.env.MIX_PUSHER_APP_KEY, {\n        cluster: process.env.MIX_PUSHER_APP_CLUSTER,\n        encrypted: true,\n    });\n\n    // Global state object with data-fetching and initialization logic\n    const state = {\n        post: [],\n        comment: [],\n\n        // Method to fetch initial data and populate state\n        async initialize() {\n            try {\n\n                const pullData = await axios.get(`/post/getAllPostCommentByFamCode`);\n\n                // Assign fetched data to state properties\n                this.post = pullData.data.message.post;\n                this.comment = pullData.data.message.comment;\n\n                this.comment = this.comment.flat(); // Flatten the array of arrays into a single array of comment objects\n\n                if (this.post.length > 0) {\n\n                    // Render posts and comments on the page after data is loaded\n                    this.post.forEach(data => allPost(data, this.comment));\n                } else {\n                    log(\"No post\")\n                }\n\n\n            } catch (error) {\n                console.error(\"Error fetching posts and comments:\", error);\n            }\n        }\n    };\n\n    // initiate the global object\n    state.initialize();\n\n    const updatePost = async (e) => {\n        // Parse the incoming data and check if it already exists in state\n        const dataForUse = checkOriginAndParsedData(e);\n        // Only append if the comment hasn't been added before\n        if (!appendedPosts.has(dataForUse.post_no)) {\n            appendedPosts.add(dataForUse.post_no);\n\n            // Clean up old entries if the set exceeds the limit\n            if (appendedPosts.size > MAX_APPENDED_POSTS) {\n                const oldestPost = appendedPosts.values().next().value;\n                appendedPosts.delete(oldestPost);\n            }\n\n            appendNewPost(dataForUse)\n\n            try {\n                await axios.put(`/updatePostByStatusAsPublished/${dataForUse.post_no}`, { post_status: 'published' });\n\n            } catch (error) { console.error(`Failed to update comment status: ${error.message}`); }\n\n        }\n    };\n\n    const updateComment = async (e) => {\n        // Parse the incoming data and check if it already exists in state\n        const dataForUse = checkOriginAndParsedData(e);\n\n        // Only append if the comment hasn't been added before\n        if (!appendedComments.has(dataForUse.comment_no)) {\n            appendedComments.add(dataForUse.comment_no);\n\n            // check if dataForUse length is greater than 0 and if yes foreach to lop \n\n            appendNewComment(dataForUse)\n\n            try {\n                await axios.put(`/updateCommentByStatusAsPublished/${dataForUse.comment_no}`, { comment_status: 'published' });\n\n            } catch (error) { console.error(`Failed to update comment status: ${error.message}`); }\n\n        }\n    };\n\n    const updateLike = (e) => {\n        // Parse the incoming data and check if it already exists in state\n        const dataForUse = checkOriginAndParsedData(e);\n        const likeElement = id(dataForUse.likeHtmlId);\n        if (likeElement) {\n            likeElement.innerHTML = parseInt(dataForUse.likeCounter)\n        }\n    };\n\n    // Subscribe to the posts channel\n    const postsChannel = pusher.subscribe('posts-channel');\n    postsChannel.bind('new-post', (data) => {\n        data.forEach(item => updatePost(item))\n    });\n\n    // Subscribe to the comments channel\n    const commentsChannel = pusher.subscribe('comments-channel');\n    commentsChannel.bind('new-comment', (data) => {\n        data.forEach(item => updateComment(item))\n    })\n\n    // Subscribe to the likes channel\n    const likesChannel = pusher.subscribe('likes-channel');\n    likesChannel.bind('like-event', (data) => {\n\n        data.forEach(item => updateLike(item))\n    });\n\n    // Subscribe to the event channel\n\n\n    const checkEventAndAdd = (data) => {\n\n        const appendEvent = eventHtml(data);\n        return id('eventList').insertAdjacentHTML('afterbegin', appendEvent);\n    }\n\n    const notificationChannel = pusher.subscribe('notification-channel');\n\n    notificationChannel.bind('new-notification', (data) => {\n        if (localStorage.getItem('requesterFamCode') === data.receiver_id) {\n            checkEventAndAdd(data);\n            addToNotificationTab(data);\n            increaseNotificationCount();\n\n        }\n    });\n\n\n\n    // AUTOMATICALLY UPDATE TIMESTAMP\n    // Function to check for elements and render if they exist every 5 seconds\n    setInterval(() => {\n        checkManyElements('class', \".timeago\", render);\n        checkManyElements('class', \".commentTiming\", render);\n    }, 2000); // Adjust interval as needed\n\n\n    const checkOriginAndParsedData = (data) => {\n        if (!data) throw new Error('No update received');\n        if (data) {\n\n            if (data.origin != appUrl) { msgException('Invalid Origin'); }\n            return data\n        }\n\n        // check if data is a valid jason object\n        // return JSON.parse(data)\n    }\n\n} catch (error) {\n    showError(error)\n}","\"use strict\";\nimport { id, showError } from \"@shared\"\n\n// import { postFormData } from \"../helper/http\"\n\ntry {\n\n    // NEW MESSAGE MODAL\n    const showModal = () => id('id01').style.display = 'block'\n\n    // CREATE EVENT MODAL\n    const showEvent = () => id('id_event_modal').style.display = 'block'\n\n    //EVENT ACTION\n\n\nconst action = () => {\n\n    const createEvent = id('createEvent')\n    const postMsg = id('postMsg')\n\n     if (createEvent) {\n          createEvent.addEventListener('click', showEvent);\n        } else if (postMsg) {\n          postMsg.addEventListener('click', showModal)\n        } \n}\n     \n    if (document.readyState === 'loading') {\n    document.addEventListener('DOMContentLoaded', action);\n  }\n\n    // handle post message\n\n} catch (e) {\n    showError(e)\n}","// utility for periodic sync  \nif ('periodicSync' in navigator) {\n    (async () => {\n        // Request permission for background sync\n        const status = await navigator.permissions.query({ name: 'periodic-background-sync' });\n\n        if (status.state === 'granted') {\n            console.log('Background sync permission granted');\n        } else {\n            console.log('Background sync permission denied');\n        }\n\n        try {\n            await navigator.periodicSync.register('content-sync', {\n                minInterval: 24 * 60 * 60 * 1000, // Minimum interval in milliseconds (e.g., 1 day)\n            });\n            console.log('Periodic Sync registered');\n        } catch (error) {\n            console.error('Periodic Sync registration failed:', error);\n        }\n    })(); // Immediately invoke the async function\n}","import { html } from \"./html\"\nimport { id, log, msgException, showError } from '../global'\n\n\nconst famCode = localStorage.getItem('requesterFamCode');\n/**\n * Renders a post and its associated comments in the DOM.\n * \n * This function takes a post object and an array of comment data,\n * filters the comments to include only those associated with the \n * given post, generates HTML for the post using the `html` function, \n * and appends it to the 'postIt' container in the DOM.\n *\n * @param {Object} el - The post object containing post data, including post number.\n * @param {Array} commentData - An array of comment objects associated with posts.\n * @returns {boolean} - Returns false if the post object is invalid.\n */\nexport const allPost = (postData, commentData) => {\n\n  if (!postData ||!Array.isArray(commentData)) {\n    msgException('Invalid post data');\n  }\n\n  let postNo = parseInt(postData.post_no)\n\n  const filterComment = commentData.filter(comm => parseInt(comm.post_no) === postNo ) // filter the comment to an array\n  const postHtml = html(postData, filterComment)\n  // if(postFamCode === famCode) {\n    id('postIt').insertAdjacentHTML('beforeend', postHtml)\n   \n}\n\n/**\n * Appends a new post to the DOM if it does not already exist.\n * \n * This function checks for the existence of comment form elements \n * associated with the provided post object. If any of these elements \n * are missing, it generates HTML for the post using the `html` function \n * and inserts it at the beginning of the 'postIt' container.\n *\n * @param {Object} el - The post object containing post data, including post number.\n * @returns {boolean} - Returns false if the post object is invalid.\n */\nexport const appendNewPost = (el) => {\n const {post_no} = el \n// Generate the IDs for the comment form and its components const \nconst commentFormId = `formComment${post_no}`; \nconst inputCommentId = `inputComment${post_no}`; \nconst submitCommentId = `submitComment${post_no}`;\n\n// Check if the comment form components exist in the DOM\n  const commentForm1 = id(commentFormId);\n  const inputComment = id(inputCommentId)\n  const submitComment = id(submitCommentId);\n\n// If the comment form components do not exist, create and append the new post\n  if (!commentForm1 || !inputComment || !submitComment) {\n    const appendHTML = html(el);\n\n  // Ensure the post belongs to the correct family code\n    // if (el.postFamCode === famCode) {\n      id('postIt').insertAdjacentHTML('afterbegin', appendHTML)\n    // } else{\n    //   return false\n    // }\n\n  }\n\n}\n","import axios from 'axios';\n\n\nconst VAPID_PUBLIC_KEY = process.env.MIX_VAPID_PUBLIC_KEY;\n\n\nfunction urlBase64ToUint8Array(base64String) {\n    const padding = '='.repeat((4 - base64String.length % 4) % 4);\n    const base64 = (base64String + padding)\n        .replace(/-/g, '+')\n        .replace(/_/g, '/');\n    const rawData = window.atob(base64);\n    const outputArray = new Uint8Array(rawData.length);\n    for (let i = 0; i < rawData.length; ++i) {\n        outputArray[i] = rawData.charCodeAt(i);\n    }\n    return outputArray;\n}\n\n//// Check if service workers and push notifications are supported by the browser\n\n\nif ('serviceWorker' in navigator && 'PushManager' in window) {\n    navigator.serviceWorker.register('/service-worker.js').then((swReg) => {\n\n        // Check if the user is already subscribed\n       checkSubscription(swReg);\n\n    }).catch((error) => {\n        console.error('Service Worker registration failed', error);\n    });\n} \n\nfunction checkSubscription(swReg) {\n    swReg.pushManager.getSubscription().then((subscription) => {\n        if (subscription === null) {\n            // Request permission for notifications\n            requestPermission(swReg);\n        } else {\n            console.log('User  is already subscribed:', subscription);\n\n            postSubscriptionToServer(subscription);\n        }\n    });\n}\n\nfunction requestPermission(swReg) {\n    // This call must be made in response to a user action\n    Notification.requestPermission().then((permission) => {\n        if (permission === 'granted') {\n            subscribeUser (swReg);\n        } else {\n            console.log('Push notifications permission denied.');\n        }\n    });\n}\n\nfunction subscribeUser(swReg) {\n    const applicationServerKey = urlBase64ToUint8Array(VAPID_PUBLIC_KEY);  // Access public VAPID key\n\n    swReg.pushManager.subscribe({\n        userVisibleOnly: true,\n        applicationServerKey: applicationServerKey\n    }).then((subscription) => {\n        console.log('User is subscribed:', subscription);\n        // Send subscription object to the server to store it\n        postSubscriptionToServer(subscription);\n    }).catch((error) => {\n        console.error('Failed to subscribe the user: ', error);\n    });\n}\n\nfunction postSubscriptionToServer(subscription) {\n\n    // Prepare the subscription data to be sent to the server\n\n    const subscriptionData = {\n        id: localStorage.getItem('requesterId'),\n        endpoint: subscription.endpoint,\n        keys: {\n            p256dh: btoa(String.fromCharCode.apply(null, new Uint8Array(subscription.getKey('p256dh')))),\n            auth: btoa(String.fromCharCode.apply(null, new Uint8Array(subscription.getKey('auth'))))\n        }\n    };\n    \n    // Send subscription to the server using axios\n    axios.post('/pushNotification/subscription', subscriptionData)\n        .then(response => {\n            console.log('Subscription data successfully sent to the server:', response);\n        })\n        .catch(error => {\n            console.error('Failed to send subscription data to the server:', error);\n        });\n\n}\n\n\n\n","\n        // RSVP Buttons\n        const rsvpButtons = document.querySelectorAll('.rsvp-buttons .btn');\n        \n        rsvpButtons.forEach(button => {\n            button.addEventListener('click', function() {\n                // Remove active class from all buttons in the same container\n                this.parentElement.querySelectorAll('.btn').forEach(btn => {\n                    btn.classList.remove('active');\n                    if (btn.classList.contains('btn-outline-primary')) {\n                        btn.classList.replace('btn-primary', 'btn-outline-primary');\n                    } else if (btn.classList.contains('btn-outline-secondary')) {\n                        btn.classList.replace('btn-secondary', 'btn-outline-secondary');\n                    } else if (btn.classList.contains('btn-outline-danger')) {\n                        btn.classList.replace('btn-danger', 'btn-outline-danger');\n                    }\n                });\n                \n                // Add active class to clicked button\n                this.classList.add('active');\n                if (this.classList.contains('btn-outline-primary')) {\n                    this.classList.replace('btn-outline-primary', 'btn-primary');\n                } else if (this.classList.contains('btn-outline-secondary')) {\n                    this.classList.replace('btn-outline-secondary', 'btn-secondary');\n                } else if (this.classList.contains('btn-outline-danger')) {\n                    this.classList.replace('btn-outline-danger', 'btn-danger');\n                }\n            });\n        });\n        "],"names":[],"sourceRoot":""}