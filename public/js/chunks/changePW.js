"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkfamily"] = self["webpackChunkfamily"] || []).push([["changePW"],{

/***/ "./resources/asset/js/components/FormHelper.js":
/*!*****************************************************!*\
  !*** ./resources/asset/js/components/FormHelper.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ FormHelper)\n/* harmony export */ });\n/* harmony import */ var _helper_general__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./helper/general */ \"./resources/asset/js/components/helper/general.js\");\n\n\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _createForOfIteratorHelper(r, e) { var t = \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && \"number\" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t[\"return\"] || t[\"return\"](); } finally { if (u) throw o; } } }; }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if (\"string\" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n\nvar FormHelper = /*#__PURE__*/function () {\n  function FormHelper(data) {\n    _classCallCheck(this, FormHelper);\n    if (!Array.isArray(data)) throwError('data must be an array of form elements');\n    this.data = data;\n    this.error = [];\n    this.result = 0;\n  }\n  return _createClass(FormHelper, [{\n    key: \"id\",\n    value: function id(x) {\n      return document.getElementById(x);\n    }\n\n    /**\n     * general validation; check empty status, at least a single input, mobile length, white space\n     */\n  }, {\n    key: \"getData\",\n    value: function getData() {\n      return this.data;\n    }\n  }, {\n    key: \"validateField\",\n    value: function validateField(value) {\n      var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'general';\n      var regexes = {\n        email: /^[\\w\\-\\.\\+]+\\@[a-zA-Z0-9\\.\\-]+\\.[a-zA-Z0-9]{2,4}$/\n        // Add more regexes as needed\n      };\n      return type === 'email' ? regexes.email.test(value) : value.trim() !== '';\n    }\n  }, {\n    key: \"massValidate\",\n    value: function massValidate() {\n      var _this = this;\n      // const reg = /[a-zA-Z0-9./@]/g;\n      this.data.forEach(function (et) {\n        var _iterator = _createForOfIteratorHelper(et),\n          _step;\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var post = _step.value;\n            // capture the error to a variable\n            var errMsg = _this.id(\"\".concat(post.name, \"_error\"));\n            var postName = post.name.replace('_', ' ');\n            var asterisk = \"*\";\n\n            // rid it off the submit and token\n            if (['submit', 'button', 'showPassword_id', 'g-recaptcha-response', 'cancel', 'token', 'checkbox_id'].includes(post.name) || ['button'].includes(post.id) || ['button'].includes(post.type)) return;\n            // check if there is no value\n\n            if (['spouseName', 'spouseMobile', 'spouseEmail', 'fatherMobile', 'fatherEmail', 'motherMobile', 'maidenName', 'motherEmail'].includes(post.name)) {\n              // post.value is not prpvided if it is not provided \n              post.value = post.value === \"\" ? \"Not Provided\" : post.value;\n            }\n            if (post.value === '' || post.value === 'select') {\n              if (!_this.validateField(post.value)) {\n                if (errMsg) {\n                  var _post$placeholder;\n                  errMsg.innerHTML = \"\".concat((_post$placeholder = post.placeholder) !== null && _post$placeholder !== void 0 ? _post$placeholder : asterisk, \" cannot be left empty\");\n                  errMsg.style.color = 'red';\n                }\n                _this.error.push(\"\".concat(postName.toUpperCase(), \" cannot be left empty\"));\n                _this.result = false;\n              }\n            }\n            if (post.name === 'email' && !_this.validateField(post.value, 'email')) {\n              _this.error.push('<li style=\"color: red;\">Please enter a valid email</li>');\n              if (errMsg) errMsg.innerHTML = '* Please enter a valid email';\n              _this.result = false;\n            }\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      });\n    }\n  }, {\n    key: \"emailVal\",\n    value: function emailVal() {\n      var emailExp = /^[\\w\\-\\.\\+]+\\@[a-zA-Z0-9\\.\\-]+\\.[a-zA-z0-9]{2,4}$/;\n      var msg = \"<li style=color:'red';> Please enter a valid email</li>\";\n      var email = this.id('email_id').value;\n      if (email.match(emailExp) === null) {\n        this.id('email_error').innerHTML = msg;\n        this.id('email_error').style.color = \"red\";\n        this.error.push(msg);\n      }\n    }\n  }, {\n    key: \"clearError\",\n    value: function clearError() {\n      var _this2 = this;\n      this.error = []; // Empty the error array\n\n      // Define a function to clear error messages for a given input element\n      var clearErrorForElement = function clearErrorForElement(elementName) {\n        var errorElement = _this2.id(\"\".concat(elementName, \"_error\"));\n        if (errorElement) {\n          errorElement.innerHTML = '';\n        }\n      };\n      this.data.forEach(function (el) {\n        var _iterator2 = _createForOfIteratorHelper(el),\n          _step2;\n        try {\n          var _loop = function _loop() {\n            var post = _step2.value;\n            var id = post.id,\n              name = post.name,\n              value = post.value;\n\n            // Skip certain input types\n            if (['submit', 'button', 'token', 'checkbox'].includes(id) || ['token', 'submit'].includes(name)) {\n              return 1; // continue\n            }\n            var the_id = _this2.id(id);\n            if (the_id) {\n              // Add keyup event listener to clear errors for non-select inputs\n              the_id.addEventListener('keyup', function () {\n                if (value !== 'select') {\n                  clearErrorForElement(name);\n                }\n              });\n            } else {\n              console.error(\"Element with ID '\".concat(id, \"' with post name '\").concat(post.name, \"' not found.\"));\n            }\n\n            // Add change event listener to clear error message\n            the_id.addEventListener('change', function () {\n              clearErrorForElement(name);\n            });\n          };\n          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n            if (_loop()) continue;\n          }\n        } catch (err) {\n          _iterator2.e(err);\n        } finally {\n          _iterator2.f();\n        }\n      });\n    }\n  }, {\n    key: \"clearHtml\",\n    value: function clearHtml() {\n      this.data.forEach(function (el) {\n        var _iterator3 = _createForOfIteratorHelper(el),\n          _step3;\n        try {\n          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n            var post = _step3.value;\n            if (post.id == 'submit' || post.name == 'submit' || post.name == 'checkbox') {\n              continue;\n            }\n            post.value = \"\";\n          }\n        } catch (err) {\n          _iterator3.e(err);\n        } finally {\n          _iterator3.f();\n        }\n      });\n    }\n\n    /**\n     *\n     * @param {input is the id of the input/ this is an array [as, it, it]} input\n     * @param {* this is the max policy and it must be an integer} maxi\n     */\n  }, {\n    key: \"realTimeCheckLen\",\n    value: function realTimeCheckLen(input, maxi) {\n      var _this3 = this;\n      try {\n        var _loop2 = function _loop2(i) {\n          var theData = _this3.id(\"\".concat(input[i], \"_id\"));\n          if (theData === null || theData === undefined || theData === \"\") {\n            throw new Error(\"Element with ID '\".concat(input[i], \"_id' not found or is empty\"));\n          }\n          var max = maxi[i];\n          var error = _this3.id(\"\".concat(input[i], \"_error\"));\n          theData.maxLength = parseInt(max) + 1; // Fixed the parsing issue here\n          theData.addEventListener('keyup', function () {\n            error.innerHTML = theData.value.length > max ? \"You have reached the maximum limit\" : \"\";\n            var help = _this3.id(\"\".concat(input[i], \"_help\"));\n            help.style.color = 'red';\n            help.style.fontSize = '10px';\n            error.style.color = 'red';\n            setTimeout(function () {\n              help.style.display = 'none';\n            }, 5000);\n          });\n        };\n        for (var i = 0; i < input.length; i++) {\n          _loop2(i);\n        }\n      } catch (error) {\n        console.error(error.message);\n      }\n    }\n\n    /**\n     * the id for the password error should be password_help\n     * the id for your confirm pasword should confirm_password\n     * it will return an error message to the password_help input\n     */\n  }, {\n    key: \"matchInput\",\n    value: function matchInput(first, second) {\n      var error, firstInput, secondInput;\n      error = this.id(\"\".concat(second, \"_error\"));\n      firstInput = this.id(first + '_id');\n      secondInput = this.id(second + '_id');\n      secondInput.addEventListener('keyup', function () {\n        error.innerHTML = secondInput.value !== firstInput.value ? 'Your passwords do not match' : \"\";\n      });\n    }\n    /**\n     *\n     * @param {the id of the input you want to inject to/ this is an array} idArray\n     * @param {*the comment or questions you want o inject} html\n     */\n  }, {\n    key: \"injectData\",\n    value: function injectData(idArray, html) {\n      var idData;\n      for (var i = 0; i < idArray.length; i++) {\n        idData = this.id(idArray[i]);\n        idData.innerHTML = html[i];\n      }\n    }\n\n    /**\n     *\n     * @param {this is an id and its value is for duplication} firstInput\n     * @param {* another id that accepts the value of the firstInput} takeFirstInput\n     */\n  }, {\n    key: \"duplicate\",\n    value: function duplicate(giveInput, takeInput) {\n      var giver, taker;\n      giver = this.id(giveInput);\n      taker = this.id(takeInput);\n      giver.addEventListener('keyup', function () {\n        taker.value = giver.value;\n      });\n    }\n\n    /**\n     *\n     * @param {current input that is being type to. the value is what will be checked realtime. the id is needed} input\n     * @param {* the url to get the info to . example is /search?hint} url\n     * @param {enter the id of the output element} output\n     */\n  }, {\n    key: \"realTimeServer\",\n    value: function realTimeServer(input, url, outputId) {\n      var theInput, inputVal, output;\n      theInput = this.id(input);\n      output = this.id(outputId);\n      theInput.addEventListener('keyup', function () {\n        inputVal = theInput.value;\n        if (inputVal == 0) {\n          output.innerHTML = \"\";\n          return;\n        } else {\n          var xmlhttp = new XMLHttpRequest();\n          xmlhttp.onreadystatechange = function () {\n            if (this.readyState == 4 && this.status == 200) {\n              output.innerHTML = this.responseText;\n            }\n          };\n          xmlhttp.open(\"GET\", \"\".concat(url, \"=\").concat(inputVal), true);\n          xmlhttp.send();\n        }\n      });\n    }\n  }, {\n    key: \"isChecked\",\n    value: function isChecked(yesId, noId, hiddenInput) {\n      var _this4 = this;\n      var checked = function checked() {\n        if (_this4.id(yesId).checked) {\n          alert('check');\n          _this4.id(hiddenInput).innerHTML = 'checked';\n        } else if (_this4.id(noId).checked) {\n          _this4.id(hiddenInput).innerHTML = 'checked';\n        }\n      };\n      this.id(yesId).addEventListener('click', checked);\n      this.id(noId).addEventListener('click', checked);\n    }\n  }, {\n    key: \"previousAddress\",\n    value: function previousAddress() {\n      var _this5 = this;\n      var timeAddy = this.id('time_at_address_id');\n      var prevAddy = this.id('previous_address_class');\n      var showPrev = function showPrev() {\n        if (timeAddy.value != '3 years+') {\n          prevAddy.style.display = 'block';\n          _this5.id('previous_address_help').innerHTML = \"Please enter your full address: House No, Street Name, Town/City and Post Code\";\n        } else {\n          prevAddy.style.display = 'none';\n        }\n      };\n      timeAddy.addEventListener('change', showPrev);\n    }\n  }]);\n}();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/asset/js/components/FormHelper.js\n\n}");

/***/ }),

/***/ "./resources/asset/js/components/acctMgt/changePW.js":
/*!***********************************************************!*\
  !*** ./resources/asset/js/components/acctMgt/changePW.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _helper_general__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../helper/general */ \"./resources/asset/js/components/helper/general.js\");\n/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../global */ \"./resources/asset/js/components/global.js\");\n/* harmony import */ var _helper_http__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../helper/http */ \"./resources/asset/js/components/helper/http.js\");\n\n\n\n\n\n(0,_helper_general__WEBPACK_IMPORTED_MODULE_0__.matchInput)('password_id', 'confirm_password_id', 'changePasswordErr');\nvar loaderElement = (0,_global__WEBPACK_IMPORTED_MODULE_1__.id)('setLoader');\nvar submitChangePW = function submitChangePW(e) {\n  try {\n    e.preventDefault();\n    var password = (0,_global__WEBPACK_IMPORTED_MODULE_1__.id)('password_id').value;\n\n    // Remove any previous error notifications\n    var changePasswordNotificationElement = (0,_global__WEBPACK_IMPORTED_MODULE_1__.id)('changePassword_notification');\n    if (changePasswordNotificationElement.classList.contains('is-danger')) {\n      changePasswordNotificationElement.classList.remove('is-danger');\n    }\n    (0,_global__WEBPACK_IMPORTED_MODULE_1__.id)('error').innerHTML = '';\n    if (password) {\n      loaderElement.style.display = 'block';\n      (0,_helper_http__WEBPACK_IMPORTED_MODULE_2__.postFormData)('/login/changePW', 'changePassword', '/login');\n    }\n  } catch (error) {\n    (0,_global__WEBPACK_IMPORTED_MODULE_1__.showError)(error);\n  } finally {\n    // Hide the loader element regardless of success or error\n    loaderElement.style.display = 'none';\n  }\n};\n\n// Add a click event listener to the element with id 'submit'\n(0,_global__WEBPACK_IMPORTED_MODULE_1__.id)('submit').addEventListener('click', submitChangePW);\nvar currentPs = (0,_global__WEBPACK_IMPORTED_MODULE_1__.id)(\"password_id\");\n// const emailID = id(\"email_id\")\nvar confirmPs = (0,_global__WEBPACK_IMPORTED_MODULE_1__.id)(\"confirm_password_id\");\ncurrentPs.setAttribute('autocomplete', 'new-password');\nconfirmPs.setAttribute('autocomplete', 'new-password');\n// emailID.setAttribute('type', 'hidden')\n// emailLabel.style.display = \"none\"//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvYXNzZXQvanMvY29tcG9uZW50cy9hY2N0TWd0L2NoYW5nZVBXLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBYTs7QUFDa0M7QUFDTDtBQUNJO0FBRTlDQSwyREFBVSxDQUFDLGFBQWEsRUFBRSxxQkFBcUIsRUFBRSxtQkFBbUIsQ0FBQztBQUdyRSxJQUFNSSxhQUFhLEdBQUdILDJDQUFFLENBQUMsV0FBVyxDQUFDO0FBRXJDLElBQU1JLGNBQWMsR0FBRyxTQUFqQkEsY0FBY0EsQ0FBSUMsQ0FBQyxFQUFLO0VBRTFCLElBQUk7SUFDQUEsQ0FBQyxDQUFDQyxjQUFjLENBQUMsQ0FBQztJQUVsQixJQUFNQyxRQUFRLEdBQUdQLDJDQUFFLENBQUMsYUFBYSxDQUFDLENBQUNRLEtBQUs7O0lBRXhDO0lBQ0EsSUFBTUMsaUNBQWlDLEdBQUdULDJDQUFFLENBQUMsNkJBQTZCLENBQUM7SUFFM0UsSUFBSVMsaUNBQWlDLENBQUNDLFNBQVMsQ0FBQ0MsUUFBUSxDQUFDLFdBQVcsQ0FBQyxFQUFFO01BQ25FRixpQ0FBaUMsQ0FBQ0MsU0FBUyxDQUFDRSxNQUFNLENBQUMsV0FBVyxDQUFDO0lBQ25FO0lBRUFaLDJDQUFFLENBQUMsT0FBTyxDQUFDLENBQUNhLFNBQVMsR0FBRyxFQUFFO0lBQzFCLElBQUlOLFFBQVEsRUFBRTtNQUNWSixhQUFhLENBQUNXLEtBQUssQ0FBQ0MsT0FBTyxHQUFHLE9BQU87TUFDckNiLDBEQUFZLENBQUMsaUJBQWlCLEVBQUUsZ0JBQWdCLEVBQUUsUUFBUSxDQUFDO0lBQy9EO0VBQ0osQ0FBQyxDQUFDLE9BQU9jLEtBQUssRUFBRTtJQUNaZixrREFBUyxDQUFDZSxLQUFLLENBQUM7RUFDcEIsQ0FBQyxTQUFTO0lBQ047SUFDQWIsYUFBYSxDQUFDVyxLQUFLLENBQUNDLE9BQU8sR0FBRyxNQUFNO0VBQ3hDO0FBQ0osQ0FBQzs7QUFFRDtBQUNBZiwyQ0FBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDaUIsZ0JBQWdCLENBQUMsT0FBTyxFQUFFYixjQUFjLENBQUM7QUFFdEQsSUFBTWMsU0FBUyxHQUFHbEIsMkNBQUUsQ0FBQyxhQUFhLENBQUM7QUFDbkM7QUFDQSxJQUFNbUIsU0FBUyxHQUFHbkIsMkNBQUUsQ0FBQyxxQkFBcUIsQ0FBQztBQUUzQ2tCLFNBQVMsQ0FBQ0UsWUFBWSxDQUFDLGNBQWMsRUFBRSxjQUFjLENBQUM7QUFDdERELFNBQVMsQ0FBQ0MsWUFBWSxDQUFDLGNBQWMsRUFBRSxjQUFjLENBQUM7QUFDdEQ7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2ZhbWlseS8uL3Jlc291cmNlcy9hc3NldC9qcy9jb21wb25lbnRzL2FjY3RNZ3QvY2hhbmdlUFcuanM/OWE1YSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbmltcG9ydCB7IG1hdGNoSW5wdXQgfSBmcm9tICcuLi9oZWxwZXIvZ2VuZXJhbCc7XG5pbXBvcnQgeyBpZCwgc2hvd0Vycm9yIH0gZnJvbSAnLi4vZ2xvYmFsJztcbmltcG9ydCB7IHBvc3RGb3JtRGF0YSB9IGZyb20gJy4uL2hlbHBlci9odHRwJztcblxubWF0Y2hJbnB1dCgncGFzc3dvcmRfaWQnLCAnY29uZmlybV9wYXNzd29yZF9pZCcsICdjaGFuZ2VQYXNzd29yZEVycicpXG5cblxuY29uc3QgbG9hZGVyRWxlbWVudCA9IGlkKCdzZXRMb2FkZXInKTtcblxuY29uc3Qgc3VibWl0Q2hhbmdlUFcgPSAoZSkgPT4ge1xuXG4gICAgdHJ5IHtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICAgIGNvbnN0IHBhc3N3b3JkID0gaWQoJ3Bhc3N3b3JkX2lkJykudmFsdWU7XG5cbiAgICAgICAgLy8gUmVtb3ZlIGFueSBwcmV2aW91cyBlcnJvciBub3RpZmljYXRpb25zXG4gICAgICAgIGNvbnN0IGNoYW5nZVBhc3N3b3JkTm90aWZpY2F0aW9uRWxlbWVudCA9IGlkKCdjaGFuZ2VQYXNzd29yZF9ub3RpZmljYXRpb24nKTtcblxuICAgICAgICBpZiAoY2hhbmdlUGFzc3dvcmROb3RpZmljYXRpb25FbGVtZW50LmNsYXNzTGlzdC5jb250YWlucygnaXMtZGFuZ2VyJykpIHtcbiAgICAgICAgICAgIGNoYW5nZVBhc3N3b3JkTm90aWZpY2F0aW9uRWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKCdpcy1kYW5nZXInKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlkKCdlcnJvcicpLmlubmVySFRNTCA9ICcnO1xuICAgICAgICBpZiAocGFzc3dvcmQpIHtcbiAgICAgICAgICAgIGxvYWRlckVsZW1lbnQuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XG4gICAgICAgICAgICBwb3N0Rm9ybURhdGEoJy9sb2dpbi9jaGFuZ2VQVycsICdjaGFuZ2VQYXNzd29yZCcsICcvbG9naW4nKTtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIHNob3dFcnJvcihlcnJvcilcbiAgICB9IGZpbmFsbHkge1xuICAgICAgICAvLyBIaWRlIHRoZSBsb2FkZXIgZWxlbWVudCByZWdhcmRsZXNzIG9mIHN1Y2Nlc3Mgb3IgZXJyb3JcbiAgICAgICAgbG9hZGVyRWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgIH1cbn1cblxuLy8gQWRkIGEgY2xpY2sgZXZlbnQgbGlzdGVuZXIgdG8gdGhlIGVsZW1lbnQgd2l0aCBpZCAnc3VibWl0J1xuaWQoJ3N1Ym1pdCcpLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgc3VibWl0Q2hhbmdlUFcpXG5cbmNvbnN0IGN1cnJlbnRQcyA9IGlkKFwicGFzc3dvcmRfaWRcIilcbi8vIGNvbnN0IGVtYWlsSUQgPSBpZChcImVtYWlsX2lkXCIpXG5jb25zdCBjb25maXJtUHMgPSBpZChcImNvbmZpcm1fcGFzc3dvcmRfaWRcIilcblxuY3VycmVudFBzLnNldEF0dHJpYnV0ZSgnYXV0b2NvbXBsZXRlJywgJ25ldy1wYXNzd29yZCcpXG5jb25maXJtUHMuc2V0QXR0cmlidXRlKCdhdXRvY29tcGxldGUnLCAnbmV3LXBhc3N3b3JkJylcbi8vIGVtYWlsSUQuc2V0QXR0cmlidXRlKCd0eXBlJywgJ2hpZGRlbicpXG4vLyBlbWFpbExhYmVsLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIiJdLCJuYW1lcyI6WyJtYXRjaElucHV0IiwiaWQiLCJzaG93RXJyb3IiLCJwb3N0Rm9ybURhdGEiLCJsb2FkZXJFbGVtZW50Iiwic3VibWl0Q2hhbmdlUFciLCJlIiwicHJldmVudERlZmF1bHQiLCJwYXNzd29yZCIsInZhbHVlIiwiY2hhbmdlUGFzc3dvcmROb3RpZmljYXRpb25FbGVtZW50IiwiY2xhc3NMaXN0IiwiY29udGFpbnMiLCJyZW1vdmUiLCJpbm5lckhUTUwiLCJzdHlsZSIsImRpc3BsYXkiLCJlcnJvciIsImFkZEV2ZW50TGlzdGVuZXIiLCJjdXJyZW50UHMiLCJjb25maXJtUHMiLCJzZXRBdHRyaWJ1dGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./resources/asset/js/components/acctMgt/changePW.js\n\n}");

/***/ }),

/***/ "./resources/asset/js/components/global.js":
/*!*************************************************!*\
  !*** ./resources/asset/js/components/global.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   checkElements: () => (/* binding */ checkElements),\n/* harmony export */   checkManyElements: () => (/* binding */ checkManyElements),\n/* harmony export */   date2String: () => (/* binding */ date2String),\n/* harmony export */   deleteNotification: () => (/* binding */ deleteNotification),\n/* harmony export */   hideElement: () => (/* binding */ hideElement),\n/* harmony export */   id: () => (/* binding */ id),\n/* harmony export */   idInnerHTML: () => (/* binding */ idInnerHTML),\n/* harmony export */   idValue: () => (/* binding */ idValue),\n/* harmony export */   log: () => (/* binding */ log),\n/* harmony export */   manipulateAttribute: () => (/* binding */ manipulateAttribute),\n/* harmony export */   msgException: () => (/* binding */ msgException),\n/* harmony export */   qSel: () => (/* binding */ qSel),\n/* harmony export */   qSelAll: () => (/* binding */ qSelAll),\n/* harmony export */   qSelInnerHTML: () => (/* binding */ qSelInnerHTML),\n/* harmony export */   qSelValue: () => (/* binding */ qSelValue),\n/* harmony export */   showElement: () => (/* binding */ showElement),\n/* harmony export */   showError: () => (/* binding */ showError),\n/* harmony export */   showNotification: () => (/* binding */ showNotification),\n/* harmony export */   warningSign: () => (/* binding */ warningSign),\n/* harmony export */   write: () => (/* binding */ write)\n/* harmony export */ });\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! axios */ \"./node_modules/axios/lib/axios.js\");\nfunction _regenerator() { /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/babel/babel/blob/main/packages/babel-helpers/LICENSE */ var e, t, r = \"function\" == typeof Symbol ? Symbol : {}, n = r.iterator || \"@@iterator\", o = r.toStringTag || \"@@toStringTag\"; function i(r, n, o, i) { var c = n && n.prototype instanceof Generator ? n : Generator, u = Object.create(c.prototype); return _regeneratorDefine2(u, \"_invoke\", function (r, n, o) { var i, c, u, f = 0, p = o || [], y = !1, G = { p: 0, n: 0, v: e, a: d, f: d.bind(e, 4), d: function d(t, r) { return i = t, c = 0, u = e, G.n = r, a; } }; function d(r, n) { for (c = r, u = n, t = 0; !y && f && !o && t < p.length; t++) { var o, i = p[t], d = G.p, l = i[2]; r > 3 ? (o = l === n) && (u = i[(c = i[4]) ? 5 : (c = 3, 3)], i[4] = i[5] = e) : i[0] <= d && ((o = r < 2 && d < i[1]) ? (c = 0, G.v = n, G.n = i[1]) : d < l && (o = r < 3 || i[0] > n || n > l) && (i[4] = r, i[5] = n, G.n = l, c = 0)); } if (o || r > 1) return a; throw y = !0, n; } return function (o, p, l) { if (f > 1) throw TypeError(\"Generator is already running\"); for (y && 1 === p && d(p, l), c = p, u = l; (t = c < 2 ? e : u) || !y;) { i || (c ? c < 3 ? (c > 1 && (G.n = -1), d(c, u)) : G.n = u : G.v = u); try { if (f = 2, i) { if (c || (o = \"next\"), t = i[o]) { if (!(t = t.call(i, u))) throw TypeError(\"iterator result is not an object\"); if (!t.done) return t; u = t.value, c < 2 && (c = 0); } else 1 === c && (t = i[\"return\"]) && t.call(i), c < 2 && (u = TypeError(\"The iterator does not provide a '\" + o + \"' method\"), c = 1); i = e; } else if ((t = (y = G.n < 0) ? u : r.call(n, G)) !== a) break; } catch (t) { i = e, c = 1, u = t; } finally { f = 1; } } return { value: t, done: y }; }; }(r, o, i), !0), u; } var a = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} t = Object.getPrototypeOf; var c = [][n] ? t(t([][n]())) : (_regeneratorDefine2(t = {}, n, function () { return this; }), t), u = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(c); function f(e) { return Object.setPrototypeOf ? Object.setPrototypeOf(e, GeneratorFunctionPrototype) : (e.__proto__ = GeneratorFunctionPrototype, _regeneratorDefine2(e, o, \"GeneratorFunction\")), e.prototype = Object.create(u), e; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, _regeneratorDefine2(u, \"constructor\", GeneratorFunctionPrototype), _regeneratorDefine2(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction), GeneratorFunction.displayName = \"GeneratorFunction\", _regeneratorDefine2(GeneratorFunctionPrototype, o, \"GeneratorFunction\"), _regeneratorDefine2(u), _regeneratorDefine2(u, o, \"Generator\"), _regeneratorDefine2(u, n, function () { return this; }), _regeneratorDefine2(u, \"toString\", function () { return \"[object Generator]\"; }), (_regenerator = function _regenerator() { return { w: i, m: f }; })(); }\nfunction _regeneratorDefine2(e, r, n, t) { var i = Object.defineProperty; try { i({}, \"\", {}); } catch (e) { i = 0; } _regeneratorDefine2 = function _regeneratorDefine(e, r, n, t) { function o(r, n) { _regeneratorDefine2(e, r, function (e) { return this._invoke(r, n, e); }); } r ? i ? i(e, r, { value: n, enumerable: !t, configurable: !t, writable: !t }) : e[r] = n : (o(\"next\", 0), o(\"throw\", 1), o(\"return\", 2)); }, _regeneratorDefine2(e, r, n, t); }\nfunction asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }\nfunction _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"next\", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"throw\", n); } _next(void 0); }); }; }\n\nvar id = function id(_id) {\n  return document.getElementById(_id);\n};\nvar idValue = function idValue(id) {\n  return id(id).value;\n};\nvar idInnerHTML = function idInnerHTML(id) {\n  return id(id).innerHTML;\n};\nvar warningSign = \"\\u26A0\"; // danger warning sign\n\nvar qSel = function qSel(name) {\n  return document.querySelector(name);\n};\nvar qSelAll = function qSelAll(name) {\n  return document.querySelectorAll(name);\n};\nvar qSelValue = function qSelValue(name) {\n  return qSel(name).value;\n};\nvar qSelInnerHTML = function qSelInnerHTML(name) {\n  return qSel(name).innerHTML;\n};\nvar log = function log(id) {\n  var identifier = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  console.log(' start' + \"  \" + identifier);\n  console.log(id);\n  console.log(' end' + \"  \" + identifier);\n};\nvar write = function write(input) {\n  return document.write(input);\n};\nvar hideElement = function hideElement(elementId) {\n  id(elementId).style.display = \"none\";\n};\nvar showElement = function showElement(elementId) {\n  id(elementId).style.display = \"block\";\n};\nvar manipulateAttribute = function manipulateAttribute(idName, removeOrSet, attributeType) {\n  var nameValue = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n  if (removeOrSet === \"remove\") {\n    id(idName).removeAttribute(attributeType);\n  } else {\n    id(idName).setAttribute(attributeType, nameValue);\n  }\n};\nvar date2String = function date2String(date) {\n  return new Date().toDateString(date);\n};\nvar showError = function showError(e) {\n  log(e.message, \" ERROR MESSAGE\"); // \"null has no properties\"\n  log(e.name, \" ERROR NAME\"); // \"TypeError\"\n  log(e.fileName, \" ERROR FILENAME\"); // \"Scratchpad/1\"\n  log(e.lineNumber, \" ERROR LINENUMBER\"); // 2\n\n  log(e.stack);\n};\nvar msgException = function msgException(errorMessage) {\n  throw new Error(errorMessage);\n};\n\n/**\n * \n * @param {*} elementId - element id\n * @param {*} addClass either a success or danger class (green or red)\n * @param {*} message - html message to convey success or failure\n * @param {*} timer - timer for the message to disappear- default is 5 secs\n */\nvar showNotification = function showNotification(elementId, addClass, message) {\n  var timer = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 5000;\n  // display the success information for 10sec\n  id(\"\".concat(elementId)).style.display = \"block\"; // unblock the notification\n  id(\"\".concat(elementId)).classList.add(addClass); // add the success class\n  id(\"\".concat(elementId)).innerHTML = message; // error element\n  id('loader').classList.remove('loader'); // remove loader\n\n  setTimeout(function () {\n    id(\"\".concat(elementId)).style.backgroundColor = \"\";\n    id(\"\".concat(elementId)).style.color = \"\";\n    id(\"\".concat(elementId)).innerHTML = \"\";\n  }, timer);\n};\n\n// Function to check for elements and render if they exist\nvar checkElements = function checkElements(idOrClass, classString) {\n  var theFunction = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  var doesElementExist = idOrClass === \"id\" ? id(classString) : qSel(classString);\n  // Check if elements exist before calling render function\n  if (doesElementExist.length) {\n    theFunction(doesElementExist);\n  }\n};\nvar checkManyElements = function checkManyElements(idOrClass, classString) {\n  var theFunction = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  var doesElementExist = idOrClass === \"id\" ? id(classString) : qSelAll(classString);\n  // Check if elements exist before calling render function\n  if (doesElementExist.length > 0) {\n    theFunction(doesElementExist);\n  }\n};\nvar yourId = localStorage.getItem('requesterId');\nvar famCode = localStorage.getItem('requesterFamCode');\n\n// delete notification \nvar deleteNotification = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee(elementId) {\n    var senderId, elementData, data, notificationHTML, url, response, newValues;\n    return _regenerator().w(function (_context) {\n      while (1) switch (_context.n) {\n        case 0:\n          // Extract the user ID from the target ID\n          senderId = elementId.replace(\"deleteNotification\", \"notificationBar\");\n          elementData = id(elementId);\n          data = elementData.getAttribute(\"data-id\"); // change the background of the clicked element \n          notificationHTML = id(senderId); // Make sure required variables are defined before using them\n          if (typeof yourId === 'undefined' || typeof famCode === 'undefined') {\n            msgException(\"Required parameters (yourId or famCode) are not defined\");\n          }\n          url = \"/removeNotification/\".concat(yourId, \"/\").concat(famCode, \"/\").concat(data);\n          _context.n = 1;\n          return axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].put(url);\n        case 1:\n          response = _context.v;\n          if (response.data.message === \"Notification marked as read\") {\n            // remove a html element with notificationBar after 2 mins \n            notificationHTML.remove();\n\n            // reduce the notification count as you have deleted the notification\n            newValues = parseInt(sessionStorage.getItem('notificationCount') - 1);\n            id('notification_count').innerHTML = newValues;\n          } else {\n            msgException(\"Error removing notification\" + \" \" + response.data.message);\n          }\n        case 2:\n          return _context.a(2);\n      }\n    }, _callee);\n  }));\n  return function deleteNotification(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/asset/js/components/global.js\n\n}");

/***/ }),

/***/ "./resources/asset/js/components/helper/general.js":
/*!*********************************************************!*\
  !*** ./resources/asset/js/components/helper/general.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   autoCompleter: () => (/* binding */ autoCompleter),\n/* harmony export */   checkBox: () => (/* binding */ checkBox),\n/* harmony export */   checkBox2: () => (/* binding */ checkBox2),\n/* harmony export */   convertFormData: () => (/* binding */ convertFormData),\n/* harmony export */   createAndAppendElement: () => (/* binding */ createAndAppendElement),\n/* harmony export */   distinctValue: () => (/* binding */ distinctValue),\n/* harmony export */   isChecked: () => (/* binding */ isChecked),\n/* harmony export */   loaderIcon: () => (/* binding */ loaderIcon),\n/* harmony export */   loaderIconBootstrap: () => (/* binding */ loaderIconBootstrap),\n/* harmony export */   loaderIconBulma: () => (/* binding */ loaderIconBulma),\n/* harmony export */   matchInput: () => (/* binding */ matchInput),\n/* harmony export */   matchRegex: () => (/* binding */ matchRegex),\n/* harmony export */   realTimeCheckLen: () => (/* binding */ realTimeCheckLen),\n/* harmony export */   removeDiv: () => (/* binding */ removeDiv),\n/* harmony export */   showResponse: () => (/* binding */ showResponse),\n/* harmony export */   toSentenceCase: () => (/* binding */ toSentenceCase)\n/* harmony export */ });\n/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../global */ \"./resources/asset/js/components/global.js\");\n/* harmony import */ var autocompleter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! autocompleter */ \"./node_modules/autocompleter/autocomplete.js\");\n/* harmony import */ var autocompleter__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(autocompleter__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _FormHelper__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../FormHelper */ \"./resources/asset/js/components/FormHelper.js\");\n\n\nfunction _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if (\"string\" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _iterableToArray(r) { if (\"undefined\" != typeof Symbol && null != r[Symbol.iterator] || null != r[\"@@iterator\"]) return Array.from(r); }\nfunction _arrayWithoutHoles(r) { if (Array.isArray(r)) return _arrayLikeToArray(r); }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\n\n\n\nvar loaderIconBootstrap = function loaderIconBootstrap() {\n  return \"<div class=\\\"spinner-grow text-primary\\\" role=\\\"status\\\">\\n        <span class=\\\"sr-only\\\">Loading...</span>\\n        </div>\";\n};\nvar loaderIcon = function loaderIcon() {\n  return \"<div class=\\\"loader\\\"></div>\";\n};\nvar loaderIconBulma = function loaderIconBulma() {\n  return \"<div class=\\\"is-loading\\\"></div>\";\n};\nvar removeDiv = function removeDiv(div_id) {\n  var div = document.getElementById(div_id);\n  if (div) {\n    return div.remove();\n  }\n};\nvar createAndAppendElement = function createAndAppendElement(elementType, setId, parent) {\n  var setClass = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n  var newDiv = document.createElement(elementType);\n  newDiv.setAttribute('id', setId);\n  newDiv.setAttribute('class', \"field \".concat(setClass));\n  var parentDiv = (0,_global__WEBPACK_IMPORTED_MODULE_0__.id)(parent);\n  return parentDiv.appendChild(newDiv);\n};\n\n/**\n * \n * @param {the id of the input} inputId \n * @param {the api data or array data} data \n * @param { filterby is the data.filterby }\n */\nvar autoCompleter = function autoCompleter(inputId, data) {\n  autocompleter__WEBPACK_IMPORTED_MODULE_1___default()({\n    input: inputId,\n    fetch: function fetch(text, update) {\n      text = text.toLowerCase();\n      // you can also use AJAX requests instead of preloaded data\n      var suggestions = data.filter(function (n) {\n        return n.firstName.toLowerCase().startsWith(text);\n      });\n      update(suggestions);\n    },\n    onSelect: function onSelect(item) {\n      input.value = item.firstName;\n    }\n  });\n};\nvar distinctValue = function distinctValue(array) {\n  return _toConsumableArray(new Set(array));\n};\nvar checkBox = function checkBox(subject) {\n  return \"<div class=\\\"control\\\"> \\n        <label class=\\\"radio\\\">\\n          <input type=\\\"radio\\\" name=\\\"send\".concat(subject, \"\\\" value=\\\"yes\\\" id=\").concat(subject, \"Yes > Yes \\n        </label>\\n        <label class=\\\"radio\\\"> \\n          <input type=\\\"radio\\\" name=\\\"send\").concat(subject, \"\\\" value=\\\"no\\\" id=\").concat(subject, \"No checked> No \\n        </label>\\n      </div>\");\n};\nvar checkBox2 = function checkBox2(subject) {\n  return \"<div class=\\\"control\\\"> \\n        <label class=\\\"checkbox\\\">\\n          <input type=\\\"checkbox\\\" name=\\\"send\".concat(subject, \"\\\" value=\\\"yes\\\" id=\").concat(subject, \"Yes> Yes \\n        </label>\\n        <label class=\\\"checkbox\\\"> \\n          <input type=\\\"checkbox\\\" name=\\\"send\").concat(subject, \"\\\" value=\\\"no\\\" id=\").concat(subject, \"No> No \\n        </label>\\n      </div>\");\n};\nvar isChecked = function isChecked(name, fn) {\n  var yesId = \"\".concat(name, \"Yes\");\n  var noId = \"\".concat(name, \"No\");\n  var checked = function checked() {\n    if ((0,_global__WEBPACK_IMPORTED_MODULE_0__.id)(yesId).checked) {\n      alert('check');\n      fn();\n    } else if ((0,_global__WEBPACK_IMPORTED_MODULE_0__.id)(noId).checked) {\n      alert('check No');\n    }\n  };\n  (0,_global__WEBPACK_IMPORTED_MODULE_0__.id)(yesId).addEventListener('click', checked);\n  (0,_global__WEBPACK_IMPORTED_MODULE_0__.id)(noId).addEventListener('click', checked);\n};\nvar matchRegex = function matchRegex(data) {\n  if (data) {\n    if (data != \"Not Provided\") {\n      var regex = /[<?/>]+/g;\n      var result = data.match(regex);\n      if (result === null) return true;\n    }\n  }\n};\n\n/**\n * \n * @param { id of the first element} first \n * @param {* id of the second element} second \n * @param {* error id - if error - where to show it} err \n */\nvar matchInput = function matchInput(first, second, err) {\n  var error, firstInput, secondInput;\n  error = (0,_global__WEBPACK_IMPORTED_MODULE_0__.id)(err);\n  firstInput = (0,_global__WEBPACK_IMPORTED_MODULE_0__.id)(first);\n  secondInput = (0,_global__WEBPACK_IMPORTED_MODULE_0__.id)(second);\n  secondInput.addEventListener('keyup', function () {\n    if (secondInput.value !== firstInput.value) {\n      error.innerHTML = 'Your passwords do not match';\n      error.style.color = \"red\";\n    } else {\n      error.innerHTML = \"The password is matched: <i class='fa fa-check' aria-hidden='true'></i>\";\n      error.style.color = \"green\";\n    }\n  });\n};\n\n/**\n * Converts a string to sentence case.\n *\n * Sentence case is a string where the first letter of each word is capitalized, and the rest of the letters are in lowercase.\n *\n * @param {string} str The string to convert to sentence case.\n * @returns {string} A new string in sentence case.\n */\nvar toSentenceCase = function toSentenceCase(str) {\n  return str.toLowerCase() // Convert the string to lowercase\n  .split(' ') // Split the string into words\n  .map(function (word) {\n    return word.charAt(0).toUpperCase() + word.slice(1);\n  }) // Capitalize the first letter of each word\n  .join(' '); // Join the words back into a string\n};\nvar convertFormData = function convertFormData(formId) {\n  var formInput = (0,_global__WEBPACK_IMPORTED_MODULE_0__.qSelAll)(formId);\n  var formInputArr = Array.from(formInput);\n  return new _FormHelper__WEBPACK_IMPORTED_MODULE_2__[\"default\"](formInputArr);\n};\nvar showResponse = function showResponse(theId, message, status) {\n  var responseEl = (0,_global__WEBPACK_IMPORTED_MODULE_0__.id)(theId);\n  var col = status ? 'green' : 'red';\n  responseEl.innerHTML = message;\n  responseEl.style.color = 'green';\n  responseEl.style.backgroundColor = col;\n  responseEl.style.color = 'white';\n  setTimeout(function () {\n    responseEl.innerHTML = '';\n  }, 5000); // Disappear after 5 seconds\n};\n\n/**\n   *\n   * @param {input is the id of the input/ this is an array [as, it, it]} input\n   * @param {* this is the max policy and it must be an integer} maxi\n   */\n\nvar realTimeCheckLen = function realTimeCheckLen(input, maxi) {\n  try {\n    var _loop = function _loop(i) {\n      var theData = (0,_global__WEBPACK_IMPORTED_MODULE_0__.id)(\"\".concat(input[i], \"_id\"));\n      if (theData === null || theData === undefined || theData === \"\") {\n        throw new Error(\"Element with ID '\".concat(input[i], \"_id' not found or is empty\"));\n      }\n      var max = maxi[i];\n      var error = (0,_global__WEBPACK_IMPORTED_MODULE_0__.id)(\"\".concat(input[i], \"_error\"));\n      theData.maxLength = parseInt(max) + 1; // Fixed the parsing issue here\n      theData.addEventListener('keyup', function () {\n        error.innerHTML = theData.value.length > max ? \"You have reached the maximum limit\" : \"\";\n        var help = (0,_global__WEBPACK_IMPORTED_MODULE_0__.id)(\"\".concat(input[i], \"_help\"));\n        help.style.color = 'red';\n        help.style.fontSize = '10px';\n        error.style.color = 'red';\n        setTimeout(function () {\n          help.style.display = 'none';\n        }, 5000);\n      });\n    };\n    for (var i = 0; i < input.length; i++) {\n      _loop(i);\n    }\n  } catch (error) {\n    console.error(error.message);\n  }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/asset/js/components/helper/general.js\n\n}");

/***/ }),

/***/ "./resources/asset/js/components/helper/http.js":
/*!******************************************************!*\
  !*** ./resources/asset/js/components/helper/http.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   checkCookie: () => (/* binding */ checkCookie),\n/* harmony export */   getApiData: () => (/* binding */ getApiData),\n/* harmony export */   getCookie: () => (/* binding */ getCookie),\n/* harmony export */   getMultipleApiData: () => (/* binding */ getMultipleApiData),\n/* harmony export */   postFormData: () => (/* binding */ postFormData),\n/* harmony export */   postMultipleApiData: () => (/* binding */ postMultipleApiData),\n/* harmony export */   setCookie: () => (/* binding */ setCookie)\n/* harmony export */ });\n/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../global */ \"./resources/asset/js/components/global.js\");\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! axios */ \"./node_modules/axios/lib/axios.js\");\n/* harmony import */ var axios_retry__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! axios-retry */ \"./node_modules/axios-retry/lib/esm/index.js\");\nfunction _regenerator() { /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/babel/babel/blob/main/packages/babel-helpers/LICENSE */ var e, t, r = \"function\" == typeof Symbol ? Symbol : {}, n = r.iterator || \"@@iterator\", o = r.toStringTag || \"@@toStringTag\"; function i(r, n, o, i) { var c = n && n.prototype instanceof Generator ? n : Generator, u = Object.create(c.prototype); return _regeneratorDefine2(u, \"_invoke\", function (r, n, o) { var i, c, u, f = 0, p = o || [], y = !1, G = { p: 0, n: 0, v: e, a: d, f: d.bind(e, 4), d: function d(t, r) { return i = t, c = 0, u = e, G.n = r, a; } }; function d(r, n) { for (c = r, u = n, t = 0; !y && f && !o && t < p.length; t++) { var o, i = p[t], d = G.p, l = i[2]; r > 3 ? (o = l === n) && (u = i[(c = i[4]) ? 5 : (c = 3, 3)], i[4] = i[5] = e) : i[0] <= d && ((o = r < 2 && d < i[1]) ? (c = 0, G.v = n, G.n = i[1]) : d < l && (o = r < 3 || i[0] > n || n > l) && (i[4] = r, i[5] = n, G.n = l, c = 0)); } if (o || r > 1) return a; throw y = !0, n; } return function (o, p, l) { if (f > 1) throw TypeError(\"Generator is already running\"); for (y && 1 === p && d(p, l), c = p, u = l; (t = c < 2 ? e : u) || !y;) { i || (c ? c < 3 ? (c > 1 && (G.n = -1), d(c, u)) : G.n = u : G.v = u); try { if (f = 2, i) { if (c || (o = \"next\"), t = i[o]) { if (!(t = t.call(i, u))) throw TypeError(\"iterator result is not an object\"); if (!t.done) return t; u = t.value, c < 2 && (c = 0); } else 1 === c && (t = i[\"return\"]) && t.call(i), c < 2 && (u = TypeError(\"The iterator does not provide a '\" + o + \"' method\"), c = 1); i = e; } else if ((t = (y = G.n < 0) ? u : r.call(n, G)) !== a) break; } catch (t) { i = e, c = 1, u = t; } finally { f = 1; } } return { value: t, done: y }; }; }(r, o, i), !0), u; } var a = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} t = Object.getPrototypeOf; var c = [][n] ? t(t([][n]())) : (_regeneratorDefine2(t = {}, n, function () { return this; }), t), u = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(c); function f(e) { return Object.setPrototypeOf ? Object.setPrototypeOf(e, GeneratorFunctionPrototype) : (e.__proto__ = GeneratorFunctionPrototype, _regeneratorDefine2(e, o, \"GeneratorFunction\")), e.prototype = Object.create(u), e; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, _regeneratorDefine2(u, \"constructor\", GeneratorFunctionPrototype), _regeneratorDefine2(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction), GeneratorFunction.displayName = \"GeneratorFunction\", _regeneratorDefine2(GeneratorFunctionPrototype, o, \"GeneratorFunction\"), _regeneratorDefine2(u), _regeneratorDefine2(u, o, \"Generator\"), _regeneratorDefine2(u, n, function () { return this; }), _regeneratorDefine2(u, \"toString\", function () { return \"[object Generator]\"; }), (_regenerator = function _regenerator() { return { w: i, m: f }; })(); }\nfunction _regeneratorDefine2(e, r, n, t) { var i = Object.defineProperty; try { i({}, \"\", {}); } catch (e) { i = 0; } _regeneratorDefine2 = function _regeneratorDefine(e, r, n, t) { function o(r, n) { _regeneratorDefine2(e, r, function (e) { return this._invoke(r, n, e); }); } r ? i ? i(e, r, { value: n, enumerable: !t, configurable: !t, writable: !t }) : e[r] = n : (o(\"next\", 0), o(\"throw\", 1), o(\"return\", 2)); }, _regeneratorDefine2(e, r, n, t); }\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }\nfunction _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"next\", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"throw\", n); } _next(void 0); }); }; }\n\n\n\n// import Cookies from 'js-cookie'\n\n(0,axios_retry__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(axios__WEBPACK_IMPORTED_MODULE_1__[\"default\"], {\n  retries: 3\n});\n\n/**\n * \n* Sends form data via POST request.\n * @param {string} url - The URL to post the data to.\n * @param {string} formId - The ID or class of the form.\n * @param {string|null} redirect - The page to redirect to after successful submission.\n * @param {string|null} css - The CSS framework to use for notification styling (e.g., 'W3css', 'bulma').\n NOTICE:::Make sure you set the notification id as the formId_notification\n */\nvar postFormData = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee(url, formId) {\n    var redirect,\n      css,\n      notificationForm,\n      notificationId,\n      form,\n      formEntries,\n      options,\n      response,\n      _response$data,\n      successClass,\n      idSetFromHttp,\n      famCodeSetFromHttp,\n      dbHttpResult,\n      redirectDelay,\n      _error$response,\n      errorClass,\n      errorMessage,\n      _args = arguments,\n      _t;\n    return _regenerator().w(function (_context) {\n      while (1) switch (_context.p = _context.n) {\n        case 0:\n          redirect = _args.length > 2 && _args[2] !== undefined ? _args[2] : null;\n          css = _args.length > 3 && _args[3] !== undefined ? _args[3] : null;\n          notificationForm = \"\".concat(formId, \"_notification\");\n          notificationId = (0,_global__WEBPACK_IMPORTED_MODULE_0__.id)(notificationForm);\n          if (notificationId) {\n            _context.n = 1;\n            break;\n          }\n          throw new Error('Notification element not found');\n        case 1:\n          // Cleanup previous notification styles\n          notificationId.style.display = 'none';\n          ['is-danger', 'is-success', 'w3-red', 'w3-green', 'bg-danger', 'bg-success'].forEach(function (cls) {\n            return notificationId.classList.remove(cls);\n          });\n\n          // extract the form entriesËËË\n          form = (0,_global__WEBPACK_IMPORTED_MODULE_0__.id)(formId);\n          if (form) {\n            _context.n = 2;\n            break;\n          }\n          throw new Error('Form element not found');\n        case 2:\n          formEntries = new FormData(form);\n          formEntries[\"delete\"]('submit');\n          formEntries[\"delete\"]('checkbox_id');\n          options = {\n            baseURL: '/',\n            // Adjust to your API base URL\n            xsrfCookieName: 'XSRF-TOKEN',\n            xsrfHeaderName: 'X-XSRF-TOKEN',\n            withCredentials: true // Ensure cookies (e.g., XSRF token) are sent\n          }; // AXIOS POST FUNCTIONALITY\n          _context.p = 3;\n          _context.n = 4;\n          return axios__WEBPACK_IMPORTED_MODULE_1__[\"default\"].post(url, formEntries, options);\n        case 4:\n          response = _context.v;\n          if (!(response.status < 200 || response.status >= 300)) {\n            _context.n = 5;\n            break;\n          }\n          throw new Error(((_response$data = response.data) === null || _response$data === void 0 ? void 0 : _response$data.message) || 'Request failed');\n        case 5:\n          successClass = getNotificationClassByCSS(css || 'bulma', 'green'); // check if response.data.message is an array\n          idSetFromHttp = null;\n          famCodeSetFromHttp = null;\n          dbHttpResult = null;\n          if (!(response.data && _typeof(response.data.message) === 'object')) {\n            _context.n = 9;\n            break;\n          }\n          idSetFromHttp = response.data.message.id || null;\n          famCodeSetFromHttp = response.data.message.famCode || null;\n          dbHttpResult = response.data.message.outcome || null;\n          if (idSetFromHttp) {\n            _context.n = 6;\n            break;\n          }\n          throw new Error('idSetFromHttp is missing');\n        case 6:\n          if (dbHttpResult) {\n            _context.n = 7;\n            break;\n          }\n          throw new Error('dbHttpResult is missing');\n        case 7:\n          if (famCodeSetFromHttp) {\n            _context.n = 8;\n            break;\n          }\n          throw new Error('famCodeSetFromHttp is missing');\n        case 8:\n          _context.n = 10;\n          break;\n        case 9:\n          dbHttpResult = response.data.message;\n        case 10:\n          // Set sessionStorage items if not already set\n          if (!sessionStorage.getItem('idSetFromHttp')) sessionStorage.setItem('idSetFromHttp', idSetFromHttp);\n          if (!sessionStorage.getItem('famCodeSetFromHttp')) sessionStorage.setItem('famCodeSetFromHttp', famCodeSetFromHttp);\n          processFormDataAction(successClass, dbHttpResult, notificationId);\n          if (redirect) {\n            redirectDelay = 2000; // Configurable delay in ms\n            setTimeout(function () {\n              window.location.assign(redirect);\n            }, redirectDelay);\n          }\n          _context.n = 12;\n          break;\n        case 11:\n          _context.p = 11;\n          _t = _context.v;\n          errorClass = getNotificationClassByCSS(css || 'bulma', 'red');\n          errorMessage = ((_error$response = _t.response) === null || _error$response === void 0 || (_error$response = _error$response.data) === null || _error$response === void 0 ? void 0 : _error$response.error) || _t.request || 'An unknown error occurred';\n          processFormDataAction(errorClass, errorMessage, notificationId);\n        case 12:\n          return _context.a(2);\n      }\n    }, _callee, null, [[3, 11]]);\n  }));\n  return function postFormData(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\n/**\n * Process form data action.\n * @param {string} cssClass - The CSS class for the notification.\n * @param {string} message - The notification message.\n */\nvar processFormDataAction = function processFormDataAction(cssClass, message, formNotificationId) {\n  if (formNotificationId) {\n    formNotificationId.style.display = 'block';\n    formNotificationId.classList.add(cssClass);\n    var errorElement = (0,_global__WEBPACK_IMPORTED_MODULE_0__.id)('error');\n    if (errorElement) {\n      errorElement.scrollIntoView({\n        behavior: 'smooth'\n      });\n      errorElement.innerHTML = message;\n    }\n    var loader = (0,_global__WEBPACK_IMPORTED_MODULE_0__.id)('setLoader');\n    if (loader) loader.classList.remove('loader');\n  } else {\n    (0,_global__WEBPACK_IMPORTED_MODULE_0__.log)('Notification element not found');\n  }\n};\n\n/**\n * Get the notification class based on the CSS framework.\n * @param {string|null} css - The CSS framework to use for notification styling.\n * @param {string} status - The status of the notification ('green' or 'red').\n * @returns {string} - The corresponding CSS class.\n */\nvar getNotificationClassByCSS = function getNotificationClassByCSS(css, status) {\n  switch (css) {\n    case 'W3css':\n      return status === 'green' ? 'w3-green' : 'w3-red';\n    case 'bulma':\n      return status === 'green' ? 'is-success' : 'is-danger';\n    case 'bootstrap':\n      return status === 'green' ? 'bg-success' : 'bg-danger';\n    default:\n      return status === 'green' ? 'bg-success' : 'bg-danger';\n  }\n};\n\n/**\n * \n * @param { the url you want to get} URL \n * @returns \n // now we can use that data from the outside!\naxiosTest()\n    .then(data => {\n        response.json({ message: 'Request received!', data })\n    })\n    .catch(err => console.log(err))\n */\n\nvar getApiData = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee2(URL) {\n    var token,\n      config,\n      fetch,\n      _args2 = arguments,\n      _t2;\n    return _regenerator().w(function (_context2) {\n      while (1) switch (_context2.p = _context2.n) {\n        case 0:\n          token = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : null;\n          _context2.p = 1;\n          config = {\n            headers: {\n              'X-Requested-With': 'XMLHttpRequest',\n              'Content-Type': 'application/json',\n              'Accept': 'application/json',\n              'Authorization': 'Bearer ' + token\n            }\n          };\n          _context2.n = 2;\n          return axios__WEBPACK_IMPORTED_MODULE_1__[\"default\"].get(URL, config);\n        case 2:\n          fetch = _context2.v;\n          return _context2.a(2, fetch.data);\n        case 3:\n          _context2.p = 3;\n          _t2 = _context2.v;\n          return _context2.a(2, _t2);\n      }\n    }, _callee2, null, [[1, 3]]);\n  }));\n  return function getApiData(_x3) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nvar getMultipleApiData = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee3(url1, url2) {\n    var token,\n      config,\n      fetch,\n      _args3 = arguments,\n      _t3;\n    return _regenerator().w(function (_context3) {\n      while (1) switch (_context3.p = _context3.n) {\n        case 0:\n          token = _args3.length > 2 && _args3[2] !== undefined ? _args3[2] : null;\n          _context3.p = 1;\n          config = {\n            headers: {\n              'X-Requested-With': 'XMLHttpRequest',\n              'Content-Type': 'application/json',\n              'Accept': 'application/json',\n              'Authorization': 'Bearer ' + token\n            }\n          };\n          _context3.n = 2;\n          return axios__WEBPACK_IMPORTED_MODULE_1__[\"default\"].all([axios__WEBPACK_IMPORTED_MODULE_1__[\"default\"].get(url1, config), axios__WEBPACK_IMPORTED_MODULE_1__[\"default\"].get(url2, config)]);\n        case 2:\n          fetch = _context3.v;\n          return _context3.a(2, fetch);\n        case 3:\n          _context3.p = 3;\n          _t3 = _context3.v;\n          return _context3.a(2, _t3);\n      }\n    }, _callee3, null, [[1, 3]]);\n  }));\n  return function getMultipleApiData(_x4, _x5) {\n    return _ref3.apply(this, arguments);\n  };\n}();\n\n// build a function to post multiple api form data\n\nvar postMultipleApiData = /*#__PURE__*/function () {\n  var _ref4 = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee4(url1, url2, formData) {\n    var token,\n      config,\n      fetch,\n      _args4 = arguments,\n      _t4;\n    return _regenerator().w(function (_context4) {\n      while (1) switch (_context4.p = _context4.n) {\n        case 0:\n          token = _args4.length > 3 && _args4[3] !== undefined ? _args4[3] : null;\n          _context4.p = 1;\n          config = {\n            headers: {\n              'X-Requested-With': 'XMLHttpRequest',\n              'Content-Type': 'application/json',\n              'Accept': 'application/json',\n              'Authorization': 'Bearer ' + token\n            }\n          };\n          _context4.n = 2;\n          return axios__WEBPACK_IMPORTED_MODULE_1__[\"default\"].all([axios__WEBPACK_IMPORTED_MODULE_1__[\"default\"].post(url1, formData, config), axios__WEBPACK_IMPORTED_MODULE_1__[\"default\"].post(url2, formData, config)]);\n        case 2:\n          fetch = _context4.v;\n          return _context4.a(2, fetch);\n        case 3:\n          _context4.p = 3;\n          _t4 = _context4.v;\n          return _context4.a(2, _t4);\n      }\n    }, _callee4, null, [[1, 3]]);\n  }));\n  return function postMultipleApiData(_x6, _x7, _x8) {\n    return _ref4.apply(this, arguments);\n  };\n}();\n/**\n * \n * @param { name} cname \n * @param {* value} cvalue \n * @param {* no of days 365} exdays \n */\nvar setCookie = function setCookie(cname, cvalue, exdays) {\n  var d = new Date();\n  d.setTime(d.getTime() + exdays * 24 * 60 * 60 * 1000);\n  var expires = \"expires=\" + d.toUTCString();\n  document.cookie = cname + \"=\" + cvalue + \";\" + expires + \";path=/\";\n};\nvar getCookie = function getCookie(cname) {\n  var name = cname + \"=\";\n  var ca = document.cookie.split(';');\n  for (var i = 0; i < ca.length; i++) {\n    var c = ca[i];\n    while (c.charAt(0) == ' ') {\n      c = c.substring(1);\n    }\n    if (c.indexOf(name) == 0) {\n      return c.substring(name.length, c.length);\n    }\n  }\n  return \"\";\n};\nvar checkCookie = function checkCookie() {\n  var user = getCookie(\"username\");\n  if (user != \"\") {\n    alert(\"Welcome again \" + user);\n  } else {\n    user = prompt(\"Please enter your name:\", \"\");\n    if (user != \"\" && user != null) {\n      setCookie(\"username\", user, 365);\n    }\n  }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/asset/js/components/helper/http.js\n\n}");

/***/ })

}]);