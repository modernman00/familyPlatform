{"version":3,"file":"js/accountSetting.js","mappings":";;;;;;;;;;;;;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAGA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;;AAEA;AACA;AACA;AAFA;AAAA;AAAA;AAKA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAAA;AACA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;;AAEA;AACA;AAAA;AAEA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAEA;AA9BA;AAAA;AAQA;AAsBA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAIA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAMA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAlBA;AAAA;AAAA;AAmBA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAOA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AASA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AAAA;;;;;;;;;;;;;;;;;;AC1RA;;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AAGA;AAEA;AACA;;AAEA;AACA;AACA;AAEA;AACA;AACA;;AAEA;;;;;;;;;;;;;;;;;;ACxHA;AAAA;AAAA;AAAA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AATA;AAAA;AAAA;AAWA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AATA;AAAA;AAAA;AAWA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnDA;AACA;;AAGA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAGA;AAAA;AACA;AACA;;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAGA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AACA;;AAEA;AACA;AAEA;AAEA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AAEA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnQA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAGA;AAEA;AAGA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAIA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAQA;AAEA;AACA;AASA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAlBA;AAAA;AAAA;AAmBA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;ACnNA;AACA;AACA;AACA;AAEA;AAAA;AAEA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAGA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AAAA;AAAA;AAGA;AAEA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;AC1HA;AAEA;AAEA;AAGA;AAMA;AACA;AAKA;AAEA;AA8BA;AAEA;;;;;;;;;;;;;;;;;ACrDA;;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAEA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAEA;;;;;;;;;;;;;;ACxDA;AACA;AAYA;AAYA;AAYA;AAYA","sources":["webpack://family/./resources/asset/js/components/FormHelper.js","webpack://family/./resources/asset/js/components/accountSetting.js","webpack://family/./resources/asset/js/components/api/index.js","webpack://family/./resources/asset/js/components/global.js","webpack://family/./resources/asset/js/components/helper/general.js","webpack://family/./resources/asset/js/components/kidsAndSiblings.js","webpack://family/./resources/asset/js/components/register/html/kids_Sibling.js","webpack://family/./resources/asset/js/components/register/onChangeKidSibling.js","webpack://family/./resources/asset/js/data/kidsSibling.js"],"sourcesContent":["'use strict'\n\nimport { matchRegex } from \"./helper/general\"\n\nexport default class FormHelper {\n    constructor(data) {\n         if (!Array.isArray(data)) throwError('data must be an array of form elements');\n        this.data = data;\n        this.error = [];\n        this.result = 0;\n    }\n\n    id(x) {\n        return document.getElementById(x)\n    }\n\n    /**\n     * general validation; check empty status, at least a single input, mobile length, white space\n     */\n\n    getData() {\n        return this.data;\n    }\n\n\n    validateField(value, type = 'general') {\n        const regexes = {\n            email: /^[\\w\\-\\.\\+]+\\@[a-zA-Z0-9\\.\\-]+\\.[a-zA-Z0-9]{2,4}$/,\n            // Add more regexes as needed\n        };\n        return type === 'email' ? regexes.email.test(value) : value.trim() !== '';\n    }\n\n\n    massValidate() {\n        // const reg = /[a-zA-Z0-9./@]/g;\n        this.data.forEach(et => {\n\n            for (let post of et) {\n                // capture the error to a variable\n                let errMsg = this.id(`${post.name}_error`)\n                let postName = post.name.replace('_', ' ')\n                let asterisk = \"*\";\n\n                // rid it off the submit and token\n                if (['submit', 'button', 'showPassword_id', 'g-recaptcha-response', 'cancel', 'token', 'checkbox_id'].includes(post.name) ||\n                    ['button'].includes(post.id) || ['button'].includes(post.type)) return;\n                // check if there is no value\n\n                if (['spouseName', 'spouseMobile', 'spouseEmail', 'fatherMobile', 'fatherEmail', 'motherMobile', 'maidenName', 'motherEmail'].includes(post.name)) {\n                    // post.value is not prpvided if it is not provided \n                    post.value = post.value === \"\" ? \"Not Provided\" : post.value\n                }\n\n                if (post.value === '' || post.value === 'select') {\n                    if (!this.validateField(post.value)) {\n                        if (errMsg) {\n                            errMsg.innerHTML = `${post.placeholder ?? asterisk} cannot be left empty`;\n                            errMsg.style.color = 'red';\n                        }\n                        this.error.push(`${postName.toUpperCase()} cannot be left empty`);\n                        this.result = false;\n                    }\n                }\n\n                if (post.name === 'email' && !this.validateField(post.value, 'email')) {\n                    this.error.push('<li style=\"color: red;\">Please enter a valid email</li>');\n                    if (errMsg) errMsg.innerHTML = '* Please enter a valid email';\n                    this.result = false;\n                }\n            }\n        })\n    }\n\n    emailVal() {\n        const emailExp = /^[\\w\\-\\.\\+]+\\@[a-zA-Z0-9\\.\\-]+\\.[a-zA-z0-9]{2,4}$/;\n        let msg = `<li style=color:'red';> Please enter a valid email</li>`\n        const email = this.id('email_id').value\n        if (email.match(emailExp) === null) {\n            this.id('email_error').innerHTML = msg\n            this.id('email_error').style.color = \"red\"\n            this.error.push(msg)\n        }\n    }\n\n    clearError() {\n        this.error = []; // Empty the error array\n\n        // Define a function to clear error messages for a given input element\n        const clearErrorForElement = (elementName) => {\n            const errorElement = this.id(`${elementName}_error`);\n            if (errorElement) {\n                errorElement.innerHTML = '';\n            }\n        };\n\n\n        this.data.forEach(el => {\n            for (let post of el) {\n\n\n\n                const { id, name, value } = post;\n\n                // Skip certain input types\n                if (['submit', 'button', 'token', 'checkbox'].includes(id) || ['token', 'submit'].includes(name)) {\n                    continue;\n                }\n\n                const the_id = this.id(id);\n\n\n                if (the_id) {\n                    // Add keyup event listener to clear errors for non-select inputs\n                    the_id.addEventListener('keyup', () => {\n                        if (value !== 'select') {\n                            clearErrorForElement(name);\n                        }\n                    });\n                } else {\n                    console.error(`Element with ID '${id}' with post name '${post.name}' not found.`);\n                }\n\n                // Add change event listener to clear error message\n                the_id.addEventListener('change', () => {\n                    clearErrorForElement(name);\n                });\n\n            }\n        })\n    }\n\n    clearHtml() {\n\n        this.data.forEach(el => {\n            for (let post of el) {\n                if (post.id == 'submit' || post.name == 'submit' || post.name == 'checkbox') {\n                    continue\n                }\n                post.value = \"\"\n\n\n            }\n        })\n    }\n\n    /**\n     *\n     * @param {input is the id of the input/ this is an array [as, it, it]} input\n     * @param {* this is the max policy and it must be an integer} maxi\n     */\n\n    realTimeCheckLen(input, maxi) {\n        try {\n            for (let i = 0; i < input.length; i++) {\n                const theData = this.id(`${input[i]}_id`);\n                if (theData === null || theData === undefined || theData === \"\") {\n                    throw new Error(`Element with ID '${input[i]}_id' not found or is empty`);\n                }\n                const max = maxi[i];\n                const error = this.id(`${input[i]}_error`);\n                theData.maxLength = parseInt(max) + 1; // Fixed the parsing issue here\n                theData.addEventListener('keyup', () => {\n                    error.innerHTML = (theData.value.length > max) ? `You have reached the maximum limit` : \"\";\n                    const help = this.id(`${input[i]}_help`);\n                    help.style.color = 'red';\n                    help.style.fontSize = '10px';\n                    error.style.color = 'red';\n                    setTimeout(() => {\n                        help.style.display = 'none';\n                    }, 5000);\n                });\n            }\n        } catch (error) {\n            console.error(error.message);\n        }\n    }\n\n\n    /**\n     * the id for the password error should be password_help\n     * the id for your confirm pasword should confirm_password\n     * it will return an error message to the password_help input\n     */\n\n    matchInput(first, second) {\n        let error, firstInput, secondInput\n        error = this.id(`${second}_error`)\n        firstInput = this.id(first + '_id')\n        secondInput = this.id(second + '_id')\n        secondInput.addEventListener('keyup', () => {\n            error.innerHTML = (secondInput.value !== firstInput.value) ? 'Your passwords do not match' : \"\"\n        })\n    }\n    /**\n     *\n     * @param {the id of the input you want to inject to/ this is an array} idArray\n     * @param {*the comment or questions you want o inject} html\n     */\n\n    injectData(idArray, html) {\n        let idData;\n        for (let i = 0; i < idArray.length; i++) {\n            idData = this.id(idArray[i]);\n            idData.innerHTML = html[i];\n        }\n    }\n\n    /**\n     *\n     * @param {this is an id and its value is for duplication} firstInput\n     * @param {* another id that accepts the value of the firstInput} takeFirstInput\n     */\n    duplicate(giveInput, takeInput) {\n        let giver, taker;\n        giver = this.id(giveInput)\n        taker = this.id(takeInput)\n        giver.addEventListener('keyup', () => {\n            taker.value = giver.value;\n        })\n    }\n\n    /**\n     *\n     * @param {current input that is being type to. the value is what will be checked realtime. the id is needed} input\n     * @param {* the url to get the info to . example is /search?hint} url\n     * @param {enter the id of the output element} output\n     */\n\n\n    realTimeServer(input, url, outputId) {\n        let theInput, inputVal, output;\n        theInput = this.id(input)\n        output = this.id(outputId)\n        theInput.addEventListener('keyup', () => {\n            inputVal = theInput.value\n\n            if (inputVal == 0) {\n                output.innerHTML = \"\";\n                return;\n            } else {\n                var xmlhttp = new XMLHttpRequest();\n                xmlhttp.onreadystatechange = function () {\n                    if (this.readyState == 4 && this.status == 200) {\n                        output.innerHTML = this.responseText;\n                    }\n                }\n                xmlhttp.open(\"GET\", `${url}=${inputVal}`, true);\n                xmlhttp.send();\n            }\n        })\n    }\n\n    isChecked(yesId, noId, hiddenInput) {\n        const checked = () => {\n            if (this.id(yesId).checked) {\n                alert('check')\n                this.id(hiddenInput).innerHTML = 'checked';\n            } else if (this.id(noId).checked) {\n                this.id(hiddenInput).innerHTML = 'checked';\n            }\n        }\n\n        this.id(yesId).addEventListener('click', checked)\n        this.id(noId).addEventListener('click', checked)\n\n    }\n\n    previousAddress() {\n        const timeAddy = this.id('time_at_address_id')\n        const prevAddy = this.id('previous_address_class')\n        const showPrev = () => {\n            if (timeAddy.value != '3 years+') {\n                prevAddy.style.display = 'block'\n                this.id('previous_address_help').innerHTML = \"Please enter your full address: House No, Street Name, Town/City and Post Code\"\n            } else {\n                prevAddy.style.display = 'none'\n            }\n\n        }\n        timeAddy.addEventListener('change', showPrev)\n\n    }\n\n\n}","\"use strict\";\nimport \"./register/onChangeKidSibling\"\nimport { id, showError, manipulateAttribute, showElement, hideElement } from \"./global\"\nimport FormHelper from './FormHelper';\nimport axios from \"axios\";\nimport { processKidsSiblings } from './kidsAndSiblings';\nimport { fetchEmailData } from './api/index';\n\nconst formInput = document.querySelectorAll('.accountSettingForm');\nconst formInputArr = Array.from(formInput);\nconst formData = new FormHelper(formInputArr);\n\nconst options = {\n  xsrfCookieName: 'XSRF-TOKEN',\n  xsrfHeaderName: 'X-XSRF-TOKEN',\n}\n\nalert(\"Account Setting Page\")\n\n\nconst process = (e) => {\n  try {\n    e.preventDefault();\n    const notificationDiv = id('accountSettingForm_notification')\n    const notificationMsg = id('accountSettingForm_notification_error')\n    notificationMsg.innerHTML = \"\" // may not be needed\n    formData.massValidate();\n    // log(formData.error)\n    if (formData.error.length <= 0) {\n      // get the form data\n      const eventForm = id('accountSettingForm');\n      let eventFormEntries = new FormData(eventForm);\n      // post the form data to the database and get the last posted event no\n      axios.post(\"/accountSetting\", eventFormEntries, options).then(response => {\n\n        notificationDiv.style.display = \"block\" // unblock the notification\n        notificationDiv.classList.add('is-success') // add the success class\n        notificationMsg.innerHTML = response.data.message\n\n      })\n      // window.location.replace(\"/member/profilePage\")\n    } else {\n      alert('The form cannot be submitted. Please check the errors')\n      formData.clearError()\n    }\n\n  } catch (error) {\n    showError(error)\n  }\n\n}\n\n// show spouse once select is Yes\n// Add event listeners\n// Function to show spouse information based on marital status\nconst showSpouse = () => {\n  // Get the value of the marital status dropdown\n  const maritalStatus = id('maritalStatus_id').value;\n\n  // Check marital status and show relevant elements\n  if (maritalStatus === \"Yes - Add Husband\") {\n    // Display spouse section if adding husband\n    showElement('spouse');\n    manipulateAttribute('spouseName_id', 'set', 'name', 'spouseName')\n    manipulateAttribute('spouseEmail_id', 'set', 'name', 'spouseEmail')\n    manipulateAttribute('spouseMobile_id', 'set', 'name', 'spouseMobile')\n\n  } else if (maritalStatus === \"Yes - Add Wife\") {\n    // Display spouse section if adding wife\n    showElement('spouseMaidenName_div');\n    showElement('spouse');\n    manipulateAttribute('spouseName_id', 'set', 'name', 'spouseName')\n    manipulateAttribute('spouseEmail_id', 'set', 'name', 'spouseEmail')\n    manipulateAttribute('spouseMobile_id', 'set', 'name', 'spouseMobile')\n    manipulateAttribute('spouseMaidenName_id', 'set', 'name', 'spouseMaidenName')\n    // Display maiden name and spouse sections if adding wife\n\n  } else {\n    // Hide spouse section if marital status is not \"Yes\"\n    hideElement('spouse');\n  }\n};\n\n// Add event listener to marital status dropdown to trigger showSpouse function\nid('maritalStatus_id').addEventListener('change', showSpouse);\n\n// Hide spouse and maiden name elements by default\nhideElement('spouse');\nhideElement('spouseMaidenName_div');\n\n// remove input name attritube by default\nmanipulateAttribute('spouseName_id', 'remove', 'name')\nmanipulateAttribute('spouseMaidenName_id', 'remove', 'name')\nmanipulateAttribute('spouseEmail_id', 'remove', 'name')\nmanipulateAttribute('spouseMobile_id', 'remove', 'name')\n\n\nid('submit').addEventListener('click', process)\n// GET ALL EMAILS \n\n// Call the fetchData function to initiate the request\n\n// const emailData = []\nconst fName = id('fName').textContent\nconst lastName = id('lName').textContent\nconst famCode = localStorage.getItem('requesterFamCode')\n\n\nfetchEmailData()\n  .then(data => {\n    // Do something with the fetched data\n    const emailData = data;\n\n    // SEND EMAIL TO THE KIDS AND processKidsSibling\n    processKidsSiblings(emailData, fName, lastName, famCode)\n  })\n  .catch(error => {\n    // Handle any errors that occurred during the request or processing\n    console.error('Error:', error);\n  });\n\n// Call the getEmailData function somewhere in your code\n\n","import axios from \"axios\";\nimport { showError } from \"../global\";\n\n\nconst config = {\n    headers: {\n        'X-Requested-With': 'XMLHttpRequest',\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n    },\n}\n\nconst URL = process.env.MIX_APP_URL2\n    // https: //laravel.com/docs/5.4/mix#environment-variables\n\nexport const getAllData = async() => {\n    try {\n        const response = await axios.get(`${URL}allMembers/processApiData2`, config);\n        return response.data;\n    } catch (error) {\n        showError(error);\n        // You can perform additional error handling actions if needed\n        throw error;\n    }\n};\n\nexport const postData = async(url, object) => {\n    try {\n        const response = await axios.post(url, object);\n        console.log(response);\n    } catch (error) {\n        showError(error);\n        // You can perform additional error handling actions if needed\n        throw error;\n    }\n};\n\nexport const fetchEmailData = ()=> {\n    // Make a GET request and return the promise\n    return axios.get(`${URL}getEmails`)\n        .then(response => {\n            // Extract the data from the response\n            const data = response.data\n            // Return the data or do further processing\n            return data;\n        })\n        .catch(error => {\n            // Handle any errors that occur during the request\n            console.error('Error fetching data:', error);\n            throw error; // Rethrow the error to be handled by the caller\n        });\n}\n\n","import axios from \"axios\"\n// Import emoji metadata from emojibase (English locale, full dataset)\n\n\nexport const id = (id) => document.getElementById(id)\nexport const idValue = (id) => id(id).value\nexport const idInnerHTML = (id) => id(id).innerHTML\nexport const warningSign = \"\\u26A0\"; // danger warning sign\n\nexport const qSel = (name) => document.querySelector(name)\nexport const qSelAll = (name) => document.querySelectorAll(name)\nexport const qSelValue = (name) => qSel(name).value\nexport const qSelInnerHTML = (name) => qSel(name).innerHTML\n\nexport const log = (id, identifier = null) => {\n    console.log(' start' + \"  \" + identifier)\n    console.log(id)\n    console.log(' end' + \"  \" + identifier)\n}\nexport const write = (input) => document.write(input)\n\nexport const hideElement = (elementId) => {\n    id(elementId).style.display = \"none\";\n};\n\nexport const showElement = (elementId) => {\n    id(elementId).style.display = \"block\";\n};\n\nexport const manipulateAttribute = (idName, removeOrSet, attributeType, nameValue = null) => {\n\n    if (removeOrSet === \"remove\") {\n        id(idName).removeAttribute(attributeType)\n    } else {\n        id(idName).setAttribute(attributeType, nameValue)\n    }\n\n\n}\n\n/**\n * Resets a form by clearing all input fields, validation messages, \n * image previews and custom inputs.\n * @param {string} formId - The ID of the form to reset.\n */\nexport const formReset = (formId) => {\n    const form = id(formId);\n    if (!form) {\n        console.warn(`Form with ID \"${formId}\" not found.`);\n        return;\n    }\n\n    // Reset form fields\n    form.reset();\n\n    // Clear validation messages\n    form.querySelectorAll('.is-invalid, .invalid-feedback').forEach(el => {\n        el.classList.remove('is-invalid');\n        if (el.classList.contains('invalid-feedback')) {\n            el.textContent = '';\n        }\n    });\n\n\n    // Clear image previews\n    form.querySelectorAll('.preview-img').forEach(img => {\n        img.src = '';\n        img.style.display = 'none';\n    });\n\n    // Clear custom inputs (e.g., emoji pickers, rich text)\n    form.querySelectorAll('[data-custom-input]').forEach(el => {\n        el.value = '';\n    });\n}\n\n\nexport const fileUploadSizeValidation = (fileInputId, maxSizeMB = 3) => {\n    const fileInput = id(fileInputId);\n    if (!fileInput || !fileInput.files) return true; // No files to validate\n\n    const maxSizeBytes = maxSizeMB * 1024 * 1024;\n    for (const file of fileInput.files) {\n        if (file.size > maxSizeBytes) {\n            alert(`File ${file.name} exceeds the maximum size of ${maxSizeMB}MB.`);\n            fileInput.value = ''; // Clear the input\n            return false; // Validation failed\n        } else if (file.size === 0) {\n            alert(`File ${file.name} is empty and cannot be uploaded.`);\n            fileInput.value = ''; // Clear the input\n            return false; // Validation failed\n        } else if (file.type.includes(\"exe\") || file.type.includes(\"sh\") || file.type.includes(\"bat\") || file.type.includes(\"js\")) {\n            alert(`File ${file.name} is of an unsupported type and cannot be uploaded.`);\n            fileInput.value = ''; // Clear the input\n            return false; // Validation failed\n        } else if (!file.type.startsWith(\"image/\") && !file.type.startsWith(\"video/\") && !file.type.startsWith(\"audio/\") && !file.type === \"application/pdf\" && !file.type === \"application/msword\" && !file.type === \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\") {\n            alert(`File ${file.name} is of an unsupported type and cannot be uploaded.`);\n            fileInput.value = ''; // Clear the input\n            return false; // Validation failed\n        }\n    }\n    return true; // All files are within size limit\n};\n\n\nexport const date2String = (date) => new Date().toDateString(date)\n\nexport const showError = (e) => {\n\n    log(e.message, \" ERROR MESSAGE\") // \"null has no properties\"\n    log(e.name, \" ERROR NAME\") // \"TypeError\"\n    log(e.fileName, \" ERROR FILENAME\") // \"Scratchpad/1\"\n    log(e.lineNumber, \" ERROR LINENUMBER\") // 2\n\n    log(e.stack)\n}\n\nexport const msgException = (errorMessage) => {\n\n    throw new Error(errorMessage)\n}\n\n\n/**\n * \n * @param {*} elementId - element id\n * @param {*} addClass either a success or danger class (green or red)\n * @param {*} message - html message to convey success or failure\n * @param {*} timer - timer for the message to disappear- default is 5 secs\n */\nexport const showNotification = (elementId, addClass, message, timer = 5000) => {\n    // display the success information for 10sec\n    id(`${elementId}`).style.display = \"block\" // unblock the notification\n    id(`${elementId}`).classList.add(addClass) // add the success class\n    id(`${elementId}`).innerHTML = message // error element\n    // id('loader').classList.remove('loader') // remove loader\n\n    setTimeout(() => {\n        id(`${elementId}`).style.backgroundColor = \"\"\n        id(`${elementId}`).style.color = \"\"\n        id(`${elementId}`).innerHTML = \"\"\n    }, timer)\n}\n\n// Function to check for elements and render if they exist\nexport const checkElements = (idOrClass, classString, theFunction = null) => {\n\n    const doesElementExist = (idOrClass === \"id\") ? id(classString) : qSel(classString)\n    // Check if elements exist before calling render function\n    if (doesElementExist.length) {\n        theFunction(doesElementExist);\n    }\n\n};\n\nexport const checkManyElements = (idOrClass, classString, theFunction = null) => {\n\n    const doesElementExist = (idOrClass === \"id\") ? id(classString) : qSelAll(classString)\n    // Check if elements exist before calling render function\n    if (doesElementExist.length > 0) {\n        theFunction(doesElementExist);\n    }\n\n};\n\n/**\n* ----------------------------------------------------------------\n* Reusable Image Modal Function\n* ----------------------------------------------------------------\n* This function finds all images with the specified selector\n* and attaches a click event to show them in a modal.\n*\n* @param {string} selector - The CSS selector for the images you want to be zoomable (e.g., '.zoomable-image').\n* @param {string} modalId - The ID of the modal element (e.g., 'imageModal').\n* @param {string} modalImageId - The ID of the image element inside the modal (e.g., 'modalImage').\n* @param {string} modalCloseId - The ID of the close button inside the modal (e.g., 'imageModalClose').\n* @param {string} imgSrc - The source URL of the image to display in the modal.\n* @param {string} imgAlt - The alt text for the image to display in the modal.\n* ---------------------------------------------------------------- \n*/\nexport const initializeImageModal = (selector, clickedImageIndex, modalId, modalImageId, modalCloseId) => {\n    // Get references to the modal elements\n    // Global variables to manage modal state\n    let currentImages = [];\n    let currentImageIndex = 0;\n    const modal = document.getElementById(modalId);\n    const modalImage = document.getElementById(modalImageId);\n    const closeModal = document.getElementById(modalCloseId);\n    const prevButton = document.getElementById('prevButton');\n    const nextButton = document.getElementById('nextButton');\n\n\n    // Find all images that match the selector\n    const images = document.querySelectorAll(selector);\n\n    log(images[images.length - 1].src, \" IMAGES\")\n\n\n    // Guard clause: if no modal or images, do nothing.\n    if (!modal || !modalImage || !closeModal || images.length === 0) {\n        console.warn('Image modal setup failed: Required elements not found.');\n        return;\n    }\n\n    // Function to hide the modal\n    const hideModal = () => {\n        modal.classList.remove('show');\n        document.body.style.overflow = ''; // Restore scrolling\n    };\n\n\n    // Function to show the modal with a specific image\n    const showModal = (index) => {\n        if (!currentImages || currentImages.length === 0) return;\n\n        if (index < 0) {\n            currentImageIndex = currentImages.length - 1; // Loop to the last image\n        } else if (index >= currentImages.length) {\n            currentImageIndex = 0; // Loop to the first image\n        } else {\n            currentImageIndex = index;\n        }\n        modalImage.src = currentImages[currentImageIndex].src;\n        modalImage.alt = currentImages[currentImageIndex].alt;\n        modal.classList.add(\"show\");\n        document.body.style.overflow = \"hidden\"; // Prevent background scrolling\n    };\n\n    // Event listeners for modal controls\n    closeModal.addEventListener(\"click\", hideModal);\n    prevButton.addEventListener(\"click\", () => showModal(currentImageIndex - 1));\n    nextButton.addEventListener(\"click\", () => showModal(currentImageIndex + 1));\n    modal.addEventListener(\"click\", (e) => {\n        if (e.target === modal) {\n            hideModal();\n        }\n    });\n\n    // Keyboard navigation\n    document.addEventListener(\"keydown\", (e) => {\n        if (modal.classList.contains(\"show\")) {\n            if (e.key === \"Escape\") {\n                hideModal();\n            } else if (e.key === \"ArrowLeft\") {\n                showModal(currentImageIndex - 1);\n            } else if (e.key === \"ArrowRight\") {\n                showModal(currentImageIndex + 1);\n            }\n        }\n    });\n\n    currentImages = Array.from(document.querySelectorAll(selector));\n    if (currentImages.length > 0) {\n        showModal(clickedImageIndex);\n    } else {\n        console.warn(`No images found for selector: ${selector}`);\n    }\n\n\n}\n\n\n\n","\"use strict\";\nimport { id, qSelAll } from '../global';\nimport autocomplete from 'autocompleter';\nimport FormHelper from '../FormHelper';\n\n\nexport const loaderIconBootstrap = () => {\n\n    return `<div class=\"spinner-grow text-primary\" role=\"status\">\n        <span class=\"sr-only\">Loading...</span>\n        </div>`\n}\n\nexport const loaderIcon = () => {\n\n    return `<div class=\"loader\"></div>`\n}\n\nexport const loaderIconBulma = () => {\n\n    return `<div class=\"is-loading\"></div>`\n}\n\nexport const removeDiv = (div_id) => {\n    const div = document.getElementById(div_id)\n    if (div) {\n        return div.remove()\n    }\n\n}\n\n\n\nexport const createAndAppendElement = (elementType, setId, parent, setClass = null) => {\n    const newDiv = document.createElement(elementType);\n    newDiv.setAttribute('id', setId)\n    newDiv.setAttribute('class', `field ${setClass}`)\n    const parentDiv = id(parent)\n    return parentDiv.appendChild(newDiv)\n}\n\n/**\n * \n * @param {the id of the input} inputId \n * @param {the api data or array data} data \n * @param { filterby is the data.filterby }\n */\nexport const autoCompleter = (inputId, data) => {\n    autocomplete({\n        input: inputId,\n        fetch: function (text, update) {\n            text = text.toLowerCase();\n            // you can also use AJAX requests instead of preloaded data\n            const suggestions = data.filter(n => n.firstName.toLowerCase().startsWith(text))\n            update(suggestions);\n        },\n        onSelect: function (item) {\n            input.value = item.firstName;\n        }\n\n    })\n}\n\nexport const distinctValue = (array) => {\n    return [...new Set(array)]\n}\n\nexport const checkBox = (subject) => {\n    return `<div class=\"control\"> \n        <label class=\"radio\">\n          <input type=\"radio\" name=\"send${subject}\" value=\"yes\" id=${subject}Yes > Yes \n        </label>\n        <label class=\"radio\"> \n          <input type=\"radio\" name=\"send${subject}\" value=\"no\" id=${subject}No checked> No \n        </label>\n      </div>`;\n}\n\nexport const checkBox2 = (subject) => {\n    return `<div class=\"control\"> \n        <label class=\"checkbox\">\n          <input type=\"checkbox\" name=\"send${subject}\" value=\"yes\" id=${subject}Yes> Yes \n        </label>\n        <label class=\"checkbox\"> \n          <input type=\"checkbox\" name=\"send${subject}\" value=\"no\" id=${subject}No> No \n        </label>\n      </div>`\n\n}\n\nexport const isChecked = (name, fn) => {\n    const yesId = (`${name}Yes`)\n    const noId = `${name}No`\n    const checked = () => {\n        if (id(yesId).checked) {\n            alert('check')\n            fn()\n        } else if (id(noId).checked) {\n            alert('check No')\n        }\n    }\n    id(yesId).addEventListener('click', checked)\n    id(noId).addEventListener('click', checked)\n}\n\nexport const matchRegex = (data) => {\n    if (data) {\n        if (data != \"Not Provided\") {\n            const regex = /[<?/>]+/g\n            const result = data.match(regex)\n            if (result === null) return true\n        }\n    }\n}\n\n/**\n * \n * @param { id of the first element} first \n * @param {* id of the second element} second \n * @param {* error id - if error - where to show it} err \n */\nexport const matchInput = (first, second, err) => {\n    let error, firstInput, secondInput\n    error = id(err)\n    firstInput = id(first)\n    secondInput = id(second)\n\n    secondInput.addEventListener('keyup', () => {\n\n        if (secondInput.value !== firstInput.value) {\n            error.innerHTML = 'Your passwords do not match'\n            error.style.color = \"red\"\n        } else {\n            error.innerHTML = \"The password is matched: <i class='fa fa-check' aria-hidden='true'></i>\"\n            error.style.color = \"green\"\n        }\n\n\n    })\n}\n\n/**\n * Converts a string to sentence case.\n *\n * Sentence case is a string where the first letter of each word is capitalized, and the rest of the letters are in lowercase.\n *\n * @param {string} str The string to convert to sentence case.\n * @returns {string} A new string in sentence case.\n */\nexport const toSentenceCase = (str) => {\n    return str\n        .toLowerCase() // Convert the string to lowercase\n        .split(' ')    // Split the string into words\n        .map(word => word.charAt(0).toUpperCase() + word.slice(1)) // Capitalize the first letter of each word\n        .join(' ');    // Join the words back into a string\n}\n\nexport const convertFormData = (formId) => {\n    const formInput = qSelAll(formId)\n    const formInputArr = Array.from(formInput)\n    return new FormHelper(formInputArr)\n\n}\n\n\n\nexport const showResponse = (theId, message, status) => {\n    const responseEl = id(theId)\n    const col = status ? 'green' : 'red'\n\n    responseEl.innerHTML = message\n    responseEl.style.color = 'green'\n    responseEl.style.backgroundColor = col\n    responseEl.style.color = 'white';\n    setTimeout(() => {\n        responseEl.innerHTML = '';\n    }, 5000); // Disappear after 5 seconds\n\n}\n\n\n/**\n   *\n   * @param {input is the id of the input/ this is an array [as, it, it]} input\n   * @param {* this is the max policy and it must be an integer} maxi\n   */\n\nexport const realTimeCheckLen = (input, maxi) => {\n    try {\n        for (let i = 0; i < input.length; i++) {\n            const theData = id(`${input[i]}_id`);\n            if (theData === null || theData === undefined || theData === \"\") {\n                throw new Error(`Element with ID '${input[i]}_id' not found or is empty`);\n            }\n            const max = maxi[i];\n            const error = id(`${input[i]}_error`);\n            theData.maxLength = parseInt(max) + 1; // Fixed the parsing issue here\n            theData.addEventListener('keyup', () => {\n                error.innerHTML = (theData.value.length > max) ? `You have reached the maximum limit` : \"\";\n                const help = id(`${input[i]}_help`);\n                help.style.color = 'red';\n                help.style.fontSize = '10px';\n                error.style.color = 'red';\n                setTimeout(() => {\n                    help.style.display = 'none';\n                }, 5000);\n            });\n        }\n    } catch (error) {\n        console.error(error.message);\n    }\n}\n\n\n","import { checkEmailObj } from \"../data/kidsSibling\";\nimport { id, showError } from \"../components/global\";\nimport { checkBox } from \"./helper/general\";\nimport axios from \"axios\";\n\nexport const processKidsSiblings = (checkEmailExists, firstName, lastName, famCode = null) => {\n\n  let chooseEmail = [];\n  let chooseName = [];\n  let helpHTML = \"\";\n  // let errorHTML = \"\"; // Show error if applicant's email is registered\n\n\n  document.onkeydown = (e) => {\n    //. use the onclick to get the id of the element that was clicked\n    // 2. use event listener to get the email value (if it is not empty)\n    // 3. use the email value to check if it is in the array\n    // 4. if it is in the array, show the Yes or No Radio\n    // 5. click yes to send email to the kid or sibling\n\n    try {\n      // create an object with the data to check\n      const elementId = e.target.id; // id of the element that was clicked or press down\n      const emailInput = e.target.value;\n      // this phase checks the id of what is being typed\n      if (!elementId) throw new Error(\"target id is null and empty\");\n\n      // if the elementId indicate that it is a kid, then choosemail inherits all the kids array from the checkEmailObj and vis a versa\n\n      if (checkEmailObj.kidEmailInput.includes(elementId)) {\n        chooseEmail = checkEmailObj.kidEmailInput;\n        chooseName = checkEmailObj.kidNameInput;\n        helpHTML = id(`${elementId}_help`);\n\n      } else if (checkEmailObj.siblingEmail.includes(elementId)) {\n        chooseEmail = checkEmailObj.siblingEmail;\n        chooseName = checkEmailObj.siblingName;\n        helpHTML = id(`${elementId}_help`);\n\n      }\n\n      const checkFamilyEmail = () => {\n        //this checks the value of what is being typed\n\n        helpHTML.innerHTML = (emailInput.length > 5 && emailInput.length < 7) ? \"Email may be too small\" : \"\";\n\n        // use the elementid to find the exact email value and name value\n        const index = chooseEmail.indexOf(elementId);\n        const email = id(chooseEmail[index]);\n        const emailValue = email.value;\n        const name = id(chooseName[index]);\n        const nameValue = name.value;\n\n        // if (!emailValue)\n        //     throw new Error(\"another round of email is empty\");\n        // if (!nameValue) throw new Error(\"name is empty\");\n        // if (!getData.length) throw new Error(\"data is faulty\");\n        // checking family email \n        helpHTML.style.display = \"block\";\n        helpHTML.innerHTML = checkEmailExists.includes(emailInput) ?\n          `Great news! ${nameValue} is already registered on the platform` :\n          `${nameValue} is not on the platform.Do you want us to send ${nameValue} a email to register to the platform ? ${checkBox(elementId)}`;\n\n        // send the email to family membersa\n\n\n        let setFamCode;\n        const famCodeElement = id('famCode_id');\n        if (famCodeElement) {\n          setFamCode = famCodeElement.value;\n        } else {\n          // Handle the case where the element is not found or not yet loaded\n          setFamCode = famCode; // Use a default value (famCode) or handle the situation accordingly\n        }\n\n\n        const processKidRadio = () => {\n          const postObj = {\n            mobile: \"\", // is this needed?\n            viewPath: \"msg/contactNewMember\",\n\n            data: {\n              email: emailValue,\n              name: nameValue,\n              yourName: `${firstName} ${lastName}`,\n              familyCode: setFamCode,\n            },\n\n            subject: `${firstName} ${lastName} Wants You: Experience the Magic of your Family Network Today!`,\n          };\n\n          axios\n            .post(\"/register/contactNewMember\", postObj)\n            .then((response) => {\n              helpHTML.innerHTML = response.data.message;\n\n              setTimeout(() => {\n                helpHTML.style.display = \"none\";\n              }, 5000);\n            })\n            .catch((error) => {\n              showError(error);\n            });\n        };\n\n        id(`${elementId}Yes`).addEventListener(\"click\", processKidRadio);\n\n        id(`${elementId}No`).addEventListener(\"click\", () => (id(`${elementId}No`).style.display = \"none\"));\n\n\n      };\n\n      if (chooseEmail.includes(elementId)) {\n\n        checkFamilyEmail()\n\n        // id(elementId).addEventListener(\"keyup\", checkFamilyEmail);\n      }\n    } catch (error) {\n      showError(error);\n    }\n  };\n}","export const renderHtmlFamily = (family, no) => {\n\n    if (no) {\n\n        const kids_sib = (family == \"addChildren\") ? \"kid\" : \"sibling\"\n\n\n        let optionsHtml = `\n      <option value='Choose'>Choose</option>\n      <option value='With Spouse'>With Spouse</option>\n      <option value='Not With Spouse'>Not With Spouse</option>\n    `;\n\n        if (family === \"addSiblings\") {\n            optionsHtml = `\n                <option value='Choose'>Choose</option>\n                <option value='Same_Mother_Father'>Same Mother & Father</option>\n                <option value='Same_Father'>Only Same Father</option>\n                <option value='Same_Mother'>Only Same Mother</option>`;\n        }\n\n        return `\n            <div class=\"field-body\">\n                <div class=\"field\">\n                    <p class=\"control is-expanded\">\n                        <span class=\"select is-normal is-success is-fullwidth\">\n                            <select name=\"${kids_sib}_option${no}\" id=\"${kids_sib}_option${no}\">\n                                ${optionsHtml}\n                            </select>\n                        </span>\n                    </p>\n                </div>\n\n                <div class=\"field\">\n                    <p class=\"control is-expanded\">\n                        <input type=\"text\" placeholder = \"Enter ${kids_sib}'s full name - ${no}\"  name =${kids_sib}_name${no} class=\"input input is-normal \" id=\"${kids_sib}_name${no}\">\n                    </p>\n                </div>          \n\n                <div class=\"field\">\n                    <p class=\"control is-expanded has-icons-left\">\n                        <input type=\"email\" placeholder = \"Enter ${kids_sib}'s email - ${no}\" value = \"Please, provide email address\" name=${kids_sib}_email${no} class=\"input input is-normal \" id=\"${kids_sib}_email${no}\">\n\n                        <span class=\"icon is-small is-left\">\n                            <i class=\"fas fa-envelope\"></i>\n                        </span>\n                    </p>\n                    <p class=\"help is-danger\" id=\"${kids_sib}_email${no}_help\"></p>\n                </div>\n\n            </div>`\n    }\n\n}","\"use strict\";\n// import { getEnvironmentVariable as env} from 'environment-variable-reader'\nimport { id, showError } from \"../global\";\nimport { removeDiv, createAndAppendElement } from '../helper/general'\nimport { renderHtmlFamily } from './html/kids_Sibling'\n\n// let childrenOnchangeValue = 0;\n// let childrenOnchangeValue = 0;\n\nexport const show = (kids_or_sib, event) => {\n    try {\n        // what was picked or selected\n        const value = event.target.value;\n        \n        // childrenOnchangeValue = value;\n        const addDiv = (kids_or_sib == \"kids\") ? \"addChildren\" : \"addSiblings\"\n\n        // remove the div \n        removeDiv(addDiv)\n\n        if (value == 0) {\n            id(`${kids_or_sib}_help`).innerHTML = \"\";\n        }\n\n        if (value > 0) {\n            // create and append the div element \n            const parent = `${kids_or_sib}_div`\n            createAndAppendElement('div', addDiv, parent)\n            // use the loop to generate the number of input\n            for (let i = 0; i < value; i++) {\n                const no = i + 1\n                const msg = (no > 1) ? \"Please, enter their names and emails below\" : \"Please, enter the name and email below\"\n                const getSelectHelp = id(`${kids_or_sib}_help`)\n                getSelectHelp.innerHTML = msg\n                getSelectHelp.style.fontSize = '1rem'\n                getSelectHelp.style.color = '#fc2003'\n                const html = renderHtmlFamily(addDiv, no)\n                id(addDiv).insertAdjacentHTML('afterBegin', html)\n            }\n        }\n    } catch (error) {\n        showError(error)\n    }\n}\n\n// ON CHANGE FOR THE NUMBER OF KIDS AND SIBLING \nconst onChangeKidAndSiblings = () => {\n\n    const sibInput = id(\"siblings_id\");\n    const kidInput = id(\"kids_id\")\n\n    kidInput.addEventListener('change', (event) => show('kids', event));\n    sibInput.addEventListener('change', (event) => show('siblings', event));\n\n}\n\nonChangeKidAndSiblings()\n\n\n","export const checkEmailObj = {\n    kidEmailInput: [\n        \"kid_email1\",\n        \"kid_email2\",\n        \"kid_email3\",\n        \"kid_email4\",\n        \"kid_email5\",\n        \"kid_email6\",\n        \"kid_email7\",\n        \"kid_email8\",\n        \"kid_email9\",\n        \"kid_email10\",\n    ],\n    kidNameInput: [\n        \"kid_name1\",\n        \"kid_name2\",\n        \"kid_name3\",\n        \"kid_name4\",\n        \"kid_name5\",\n        \"kid_name6\",\n        \"kid_name7\",\n        \"kid_name8\",\n        \"kid_name9\",\n        \"kid_name10\",\n    ],\n    siblingEmail: [\n        \"sibling_email1\",\n        \"sibling_email2\",\n        \"sibling_email3\",\n        \"sibling_email4\",\n        \"sibling_email5\",\n        \"sibling_email6\",\n        \"sibling_email7\",\n        \"sibling_email8\",\n        \"sibling_email9\",\n        \"sibling_email10\",\n    ],\n    siblingName: [\n        \"sibling_name1\",\n        \"sibling_name2\",\n        \"sibling_name3\",\n        \"sibling_name4\",\n        \"sibling_name5\",\n        \"sibling_name6\",\n        \"sibling_name7\",\n        \"sibling_name8\",\n        \"sibling_name9\",\n        \"sibling_name10\",\n    ]\n};\n"],"names":[],"sourceRoot":""}