{"version":3,"file":"js/organogram.js","mappings":";;;;;;;;;;;;;;;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;AC9GA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACrCA;AACA;AACA;AACA;AAGA;AACA;AACA;AAGA;AACA;AAEA;AAAA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAGA;;AAGA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;AC1EA;AACA;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEA;AACA;;AA2BA;AACA;AACA","sources":["webpack://family/./resources/asset/js/components/familyTree/events.js","webpack://family/./resources/asset/js/components/familyTree/familyData.js","webpack://family/./resources/asset/js/components/familyTree/index.js","webpack://family/./resources/asset/js/components/familyTree/showModal.js"],"sourcesContent":[" import { id } from '@shared'\n import {showPersonDetails} from './showModal'\n\n         const zoomInBtn = id('zoomIn');\n         const zoomOutBtn = id('zoomOut');\n         const resetZoomBtn = id('resetZoom');\n         const personModal = id('personModal');\n         const modalBody = id('modalBody');\n         const closeModal = id('closeModal');\n        const familyTree = id('familyTree');\n        const treeWrapper = id('treeWrapper');\n \n\n       // Initial zoom scale for the family tree\nlet scale = 1;\n// Current position of the tree (used for panning)\nlet position = { x: 0, y: 0 };\n// Starting position when dragging begins\nlet startPosition = { x: 0, y: 0 };\n// Flag to track whether the user is currently dragging\nlet isDragging = false;\n\n// Applies zoom and pan transformations to the tree container\nfunction updateTransform() {\n  familyTree.style.transform = `translate(${position.x}px, ${position.y}px) scale(${scale})`;\n}\n\n// Attaches all event listeners for zooming, dragging, and interaction\n const addEventListeners = () => {\n  // Zoom in when the \"+\" button is clicked\n  zoomInBtn.addEventListener('click', () => {\n    scale += 0.1;\n    updateTransform();\n  });\n\n  // Zoom out when the \"âˆ’\" button is clicked, but not below 0.5x\n  zoomOutBtn.addEventListener('click', () => {\n    scale = Math.max(0.5, scale - 0.1);\n    updateTransform();\n  });\n\n  // Reset zoom and position to default\n  resetZoomBtn.addEventListener('click', () => {\n    scale = 1;\n    position = { x: 0, y: 0 };\n    updateTransform();\n  });\n\n  // Zoom using mouse wheel (scroll up/down)\n  treeWrapper.addEventListener('wheel', (e) => {\n    e.preventDefault(); // Prevent page scroll\n    const delta = -e.deltaY * 0.01;\n    scale = Math.min(Math.max(0.5, scale + delta), 3); // Clamp between 0.5 and 3\n    updateTransform();\n  });\n\n  // Start dragging when mouse is pressed\n  treeWrapper.addEventListener('mousedown', (e) => {\n    isDragging = true;\n    startPosition = {\n      x: e.clientX - position.x,\n      y: e.clientY - position.y\n    };\n    treeWrapper.style.cursor = 'grabbing';\n  });\n\n  // Update position while dragging\n  document.addEventListener('mousemove', (e) => {\n    if (!isDragging) return;\n    position.x = e.clientX - startPosition.x;\n    position.y = e.clientY - startPosition.y;\n    updateTransform();\n  });\n\n  // Stop dragging when mouse is released\n  document.addEventListener('mouseup', () => {\n    isDragging = false;\n    treeWrapper.style.cursor = 'grab';\n  });\n\n  // Touch start for mobile drag\n  treeWrapper.addEventListener('touchstart', (e) => {\n    if (e.touches.length === 1) {\n      isDragging = true;\n      startPosition = {\n        x: e.touches[0].clientX - position.x,\n        y: e.touches[0].clientY - position.y\n      };\n    }\n  });\n\n  // Touch move for mobile drag\n  document.addEventListener('touchmove', (e) => {\n    if (!isDragging || e.touches.length !== 1) return;\n    position.x = e.touches[0].clientX - startPosition.x;\n    position.y = e.touches[0].clientY - startPosition.y;\n    updateTransform();\n  });\n\n  // Touch end to stop dragging\n  document.addEventListener('touchend', () => {\n    isDragging = false;\n  });\n\n}\n\n// Entry point: initializes the tree when the page loads\nexport const initTree =() => {\n  updateTransform();     // Apply initial zoom and position\n  addEventListeners();   // Attach all interaction handlers\n}","    // Sample data for family members\n        export const familyData = {\n            \"SHOLA OLAOGUN\": {\n                image: \"https://randomuser.me/api/portraits/men/75.jpg\",\n                relation: \"Father\",\n                fullName: \"SHOLA OLAOGUN\",\n                birthDate: \"January 15, 1950\",\n                birthPlace: \"Lagos, Nigeria\",\n                occupation: \"Business Owner\",\n                education: \"Bachelor of Commerce\",\n                email: \"shola.olaogun@example.com\",\n                phone: \"+44 7800 123456\"\n            },\n            \"ADEBOLA OLAOGUN\": {\n                image: \"https://randomuser.me/api/portraits/women/75.jpg\",\n                relation: \"Mother\",\n                fullName: \"ADEBOLA OLAOGUN\",\n                birthDate: \"March 22, 1955\",\n                birthPlace: \"Ibadan, Nigeria\",\n                occupation: \"Teacher (Retired)\",\n                education: \"Bachelor of Education\",\n                email: \"adebola.olaogun@example.com\",\n                phone: \"+44 7800 123457\"\n            },\n            \"Lafane OLAOGUN\": {\n                image: \"https://randomuser.me/api/portraits/men/32.jpg\",\n                relation: \"Self\",\n                fullName: \"Lafane OLAOGUN\",\n                birthDate: \"June 15, 1975\",\n                birthPlace: \"Lagos, Nigeria\",\n                occupation: \"Business Owner\",\n                education: \"MSc. Business Administration\",\n                email: \"lafane.olaogun@example.com\",\n                phone: \"+44 7805 262504\",\n                residence: \"London, United Kingdom\"\n            },\n            // Add more family members as needed\n        };\n","import { id, log, getApiData } from '@shared'\nimport { initTree } from './events'\nimport { showPersonDetails } from './showModal'\nimport axios from 'axios';\n\n\nconst modalBody = id('modalBody');\nconst closeModal = id('closeModal');\nconst personModal = id('personModal');\n\n\n  log('tree loaded')\n  initTree();\n\n   id('familyTree').addEventListener('click', (e) => {\n    const node = e.target.closest('.tree-node');\n    if (!node) return;\n    const name = node.querySelector('.node-name')?.textContent?.trim();\n\n    const nodeFn = (nodeClass) => {\n      const first = node.querySelector(nodeClass);\n      return first?.dataset?.id || null;\n      \n    }\n\n    const email = nodeFn('.node-email');\n    const id  = nodeFn('.node-id');\n    const img = nodeFn('.node-img');\n    const fullName = nodeFn('.node-fullName');\n    const maritalStatus = nodeFn('.node-maritalStatus');\n    const spouseName = nodeFn('.node-spouseName');\n    const occupation = nodeFn('.node-occupation');\n  \n   const detailData = {\n     fullName: fullName,\n     email: email,\n     img: img,\n     maritalStatus: maritalStatus,\n     spouseName: spouseName,\n     occupation: occupation,\n     \n   }\n\n    showPersonDetails(detailData);\n\n\n  })\n\n\n// When a person node is clicked, show their details\n// document.querySelectorAll('.tree-node').forEach(node => {\n//   node.addEventListener('click', (e) => {\n//     e.stopPropagation(); // Prevent bubbling to parent\n\n//      // Get the name from the .node-name span\n//   const name = node.querySelector('.node-name')?.textContent?.trim();\n\n//         // Get the data-id from the .node-id span\n//   const idSpan = node.querySelector('.node-id');\n//   const dataId = idSpan?.dataset?.id || null;\n//     showPersonDetails(name);\n//   });\n// });\n\n// Close modal when \"X\" button is clicked\ncloseModal.addEventListener('click', () => {\n  personModal.style.display = 'none';\n});\n\n// Close modal when clicking outside the modal content\nwindow.addEventListener('click', (e) => {\n  if (e.target === personModal) {\n    personModal.style.display = 'none';\n  }\n});\n\n"," import { id } from '@shared'\n import { familyData } from './familyData' // Import the family data from './familydata'\n\n \n    const personModal = id('personModal');\n      const modalBody = id('modalBody');\n \n // Displays detailed info about a person in the modal\nexport const  showPersonDetails = (personData) => {\n  // destroy the modal if it's already open\n  if (personModal.classList.contains('show')) {\n    personModal.classList.remove('show');\n  }\n\n        // deconstruct the data object and assign it to variables\n  const { img, relation, fullName, spouseName,  occupation,  country } = personData;\n\n  // Inject HTML into modal body with person's details\n  modalBody.innerHTML = `\n    <div class=\"person-detail\">\n      <img src=\"${img}\" alt=\"${fullName}\" class=\"person-image\">\n      <div class=\"person-info\">\n        <h2 class=\"person-name\">${fullName}</h2>\n        <div class=\"person-relation\">${relation}</div>\n      </div>\n    </div>\n    <div class=\"detail-grid\">\n      <div class=\"detail-item\">\n        <div class=\"detail-label\">Spouse</div>\n        <div class=\"detail-value\">${spouseName || 'N/A'}</div>\n      </div>\n \n      <div class=\"detail-item\">\n        <div class=\"detail-label\">Occupation</div>\n        <div class=\"detail-value\">${occupation}</div>\n      </div>\n      ${country ? `\n        <div class=\"detail-item\">\n          <div class=\"detail-label\">country</div>\n          <div class=\"detail-value\">${country}</div>\n        </div>\n      ` : ''}\n    </div>\n  `;\n\n   // Show the modal\n  personModal.style.display = 'flex';\n}"],"names":[],"sourceRoot":""}