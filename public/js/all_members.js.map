{"version":3,"file":"js/all_members.js","mappings":";;;;;;;;;;;;;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAGA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;;AAEA;AACA;AACA;AAFA;AAAA;AAAA;AAKA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAAA;AACA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;;AAEA;AACA;AAAA;AAEA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAEA;AA9BA;AAAA;AAQA;AAsBA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAIA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAMA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAlBA;AAAA;AAAA;AAmBA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAOA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AASA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AAAA;;;;;;;;;;;;;;;;;ACzRA;AAAA;AAAA;AAAA;AADA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AAAA;AACA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AAEA;;AAEA;AAAA;AAIA;AAAA;AAAA;AAEA;AAAA;AAAA;AAEA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;;AAEA;AAAA;AACA;AAAA;AAmBA;AAAA;AAnBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAFA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAGA;AACA;AACA;AACA;;AAEA;AAAA;AACA;AAAA;AAQA;AAAA;AARA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAGA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;;;;;;;ACxIA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAGA;AAEA;AACA;AACA;AAEA;AAEA;AAEA;;AAEA;AACA;AAIA;AAAA;AAIA;AAKA;AACA;AAAA;;;;;;;;;;;;;;AC7DA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAEA;AAEA;;;;;;;;;;;;;;;;;;;ACdA;AACA;AAEA;AAEA;AAEA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AAGA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACtCA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAIA;AAEA;AACA;AACA;AACA;;AAEA;AACA;AA8DA;AAEA;AAEA;AAEA;AAGA;;;;;;;;;;;;;;AC/GA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACDA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAGA;AAEA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AACA;;AAEA;AACA;AAEA;AAEA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChGA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAGA;AAEA;AAGA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAIA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAQA;AAEA;AACA;AASA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAlBA;AAAA;AAAA;AAmBA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACnNA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;;AAGA;;AAEA;AAEA;AAsBA;;AAIA;;AAEA;AACA;AAGA;AACA;AAEA;AAEA;AAEA;AAGA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AAGA;AACA;AAEA;AAEA;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AAEA;AACA;AACA;;AAGA;;AAEA;;AAKA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;;AAEA;AACA;AACA;AAGA;AAGA;AAEA;AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAiBA;;;;;;;;;;;;;;;ACvQA;AACA;AACA;AAGA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AAqBA;AAcA","sources":["webpack://family/./resources/asset/js/components/FormHelper.js","webpack://family/./resources/asset/js/components/allMembers/allEvents.js","webpack://family/./resources/asset/js/components/allMembers/api.js","webpack://family/./resources/asset/js/components/allMembers/filterMembersByFamCode.js","webpack://family/./resources/asset/js/components/allMembers/handleInput.js","webpack://family/./resources/asset/js/components/allMembers/html.js","webpack://family/./resources/asset/js/components/allMembers/index.js","webpack://family/./resources/asset/js/components/global.js","webpack://family/./resources/asset/js/components/helper/general.js","webpack://family/./resources/asset/js/components/navbar.js","webpack://family/./resources/asset/js/components/profilePage/htmlFolder/friendRequestCard.js"],"sourcesContent":["'use strict'\n\nimport { matchRegex } from \"./helper/general\"\n\nexport default class FormHelper {\n    constructor(data) {\n         if (!Array.isArray(data)) throwError('data must be an array of form elements');\n        this.data = data;\n        this.error = [];\n        this.result = 0;\n    }\n\n    id(x) {\n        return document.getElementById(x)\n    }\n\n    /**\n     * general validation; check empty status, at least a single input, mobile length, white space\n     */\n\n    getData() {\n        return this.data;\n    }\n\n\n    validateField(value, type = 'general') {\n        const regexes = {\n            email: /^[\\w\\-\\.\\+]+\\@[a-zA-Z0-9\\.\\-]+\\.[a-zA-Z0-9]{2,4}$/,\n            // Add more regexes as needed\n        };\n        return type === 'email' ? regexes.email.test(value) : value.trim() !== '';\n    }\n\n\n    massValidate() {\n        // const reg = /[a-zA-Z0-9./@]/g;\n        this.data.forEach(et => {\n\n            for (let post of et) {\n                // capture the error to a variable\n                let errMsg = this.id(`${post.name}_error`)\n                let postName = post.name.replace('_', ' ')\n                let asterisk = \"*\";\n\n                // rid it off the submit and token\n                if (['submit', 'button', 'showPassword_id', 'g-recaptcha-response', 'cancel', 'token', 'checkbox_id'].includes(post.name) ||\n                    ['button'].includes(post.id) || ['button'].includes(post.type)) return;\n                // check if there is no value\n\n                if (['spouseName', 'spouseMobile', 'spouseEmail', 'fatherMobile', 'fatherEmail', 'motherMobile', 'maidenName', 'motherEmail'].includes(post.name)) {\n                    // post.value is not prpvided if it is not provided \n                    post.value = post.value === \"\" ? \"Not Provided\" : post.value\n                }\n\n                if (post.value === '' || post.value === 'select') {\n                    if (!this.validateField(post.value)) {\n                        if (errMsg) {\n                            errMsg.innerHTML = `${post.placeholder ?? asterisk} cannot be left empty`;\n                            errMsg.style.color = 'red';\n                        }\n                        this.error.push(`${postName.toUpperCase()} cannot be left empty`);\n                        this.result = false;\n                    }\n                }\n\n                if (post.name === 'email' && !this.validateField(post.value, 'email')) {\n                    this.error.push('<li style=\"color: red;\">Please enter a valid email</li>');\n                    if (errMsg) errMsg.innerHTML = '* Please enter a valid email';\n                    this.result = false;\n                }\n            }\n        })\n    }\n\n    emailVal() {\n        const emailExp = /^[\\w\\-\\.\\+]+\\@[a-zA-Z0-9\\.\\-]+\\.[a-zA-z0-9]{2,4}$/;\n        let msg = `<li style=color:'red';> Please enter a valid email</li>`\n        const email = this.id('email_id').value\n        if (email.match(emailExp) === null) {\n            this.id('email_error').innerHTML = msg\n            this.id('email_error').style.color = \"red\"\n            this.error.push(msg)\n        }\n    }\n\n    clearError() {\n        this.error = []; // Empty the error array\n\n        // Define a function to clear error messages for a given input element\n        const clearErrorForElement = (elementName) => {\n            const errorElement = this.id(`${elementName}_error`);\n            if (errorElement) {\n                errorElement.innerHTML = '';\n            }\n        };\n\n\n        this.data.forEach(el => {\n            for (let post of el) {\n\n\n\n                const { id, name, value } = post;\n\n                // Skip certain input types\n                if (['submit', 'button', 'token', 'checkbox'].includes(id) || ['token', 'submit'].includes(name)) {\n                    continue;\n                }\n\n                const the_id = this.id(id);\n\n\n                if (the_id) {\n                    // Add keyup event listener to clear errors for non-select inputs\n                    the_id.addEventListener('keyup', () => {\n                        if (value !== 'select') {\n                            clearErrorForElement(name);\n                        }\n                    });\n                } else {\n                    console.error(`Element with ID '${id}' with post name '${post.name}' not found.`);\n                }\n\n                // Add change event listener to clear error message\n                the_id.addEventListener('change', () => {\n                    clearErrorForElement(name);\n                });\n\n            }\n        })\n    }\n\n    clearHtml() {\n\n        this.data.forEach(el => {\n            for (let post of el) {\n                if (post.id == 'submit' || post.name == 'submit' || post.name == 'checkbox') {\n                    continue\n                }\n                post.value = \"\"\n\n\n            }\n        })\n    }\n\n    /**\n     *\n     * @param {input is the id of the input/ this is an array [as, it, it]} input\n     * @param {* this is the max policy and it must be an integer} maxi\n     */\n\n    realTimeCheckLen(input, maxi) {\n        try {\n            for (let i = 0; i < input.length; i++) {\n                const theData = this.id(`${input[i]}_id`);\n                if (theData === null || theData === undefined || theData === \"\") {\n                    throw new Error(`Element with ID '${input[i]}_id' not found or is empty`);\n                }\n                const max = maxi[i];\n                const error = this.id(`${input[i]}_error`);\n                theData.maxLength = parseInt(max) + 1; // Fixed the parsing issue here\n                theData.addEventListener('keyup', () => {\n                    error.innerHTML = (theData.value.length > max) ? `You have reached the maximum limit` : \"\";\n                    const help = this.id(`${input[i]}_help`);\n                    help.style.color = 'red';\n                    help.style.fontSize = '10px';\n                    error.style.color = 'red';\n                    setTimeout(() => {\n                        help.style.display = 'none';\n                    }, 5000);\n                });\n            }\n        } catch (error) {\n            console.error(error.message);\n        }\n    }\n\n\n    /**\n     * the id for the password error should be password_help\n     * the id for your confirm pasword should confirm_password\n     * it will return an error message to the password_help input\n     */\n\n    matchInput(first, second) {\n        let error, firstInput, secondInput\n        error = this.id(`${second}_error`)\n        firstInput = this.id(first + '_id')\n        secondInput = this.id(second + '_id')\n        secondInput.addEventListener('keyup', () => {\n            error.innerHTML = (secondInput.value !== firstInput.value) ? 'Your passwords do not match' : \"\"\n        })\n    }\n    /**\n     *\n     * @param {the id of the input you want to inject to/ this is an array} idArray\n     * @param {*the comment or questions you want o inject} html\n     */\n\n    injectData(idArray, html) {\n        let idData;\n        for (let i = 0; i < idArray.length; i++) {\n            idData = this.id(idArray[i]);\n            idData.innerHTML = html[i];\n        }\n    }\n\n    /**\n     *\n     * @param {this is an id and its value is for duplication} firstInput\n     * @param {* another id that accepts the value of the firstInput} takeFirstInput\n     */\n    duplicate(giveInput, takeInput) {\n        let giver, taker;\n        giver = this.id(giveInput)\n        taker = this.id(takeInput)\n        giver.addEventListener('keyup', () => {\n            taker.value = giver.value;\n        })\n    }\n\n    /**\n     *\n     * @param {current input that is being type to. the value is what will be checked realtime. the id is needed} input\n     * @param {* the url to get the info to . example is /search?hint} url\n     * @param {enter the id of the output element} output\n     */\n\n\n    realTimeServer(input, url, outputId) {\n        let theInput, inputVal, output;\n        theInput = this.id(input)\n        output = this.id(outputId)\n        theInput.addEventListener('keyup', () => {\n            inputVal = theInput.value\n\n            if (inputVal == 0) {\n                output.innerHTML = \"\";\n                return;\n            } else {\n                var xmlhttp = new XMLHttpRequest();\n                xmlhttp.onreadystatechange = function () {\n                    if (this.readyState == 4 && this.status == 200) {\n                        output.innerHTML = this.responseText;\n                    }\n                }\n                xmlhttp.open(\"GET\", `${url}=${inputVal}`, true);\n                xmlhttp.send();\n            }\n        })\n    }\n\n    isChecked(yesId, noId, hiddenInput) {\n        const checked = () => {\n            if (this.id(yesId).checked) {\n                alert('check')\n                this.id(hiddenInput).innerHTML = 'checked';\n            } else if (this.id(noId).checked) {\n                this.id(hiddenInput).innerHTML = 'checked';\n            }\n        }\n\n        this.id(yesId).addEventListener('click', checked)\n        this.id(noId).addEventListener('click', checked)\n\n    }\n\n    previousAddress() {\n        const timeAddy = this.id('time_at_address_id')\n        const prevAddy = this.id('previous_address_class')\n        const showPrev = () => {\n            if (timeAddy.value != '3 years+') {\n                prevAddy.style.display = 'block'\n                this.id('previous_address_help').innerHTML = \"Please enter your full address: House No, Street Name, Town/City and Post Code\"\n            } else {\n                prevAddy.style.display = 'none'\n            }\n\n        }\n        timeAddy.addEventListener('change', showPrev)\n\n    }\n\n\n}","import axios from 'axios';\nimport { id, showError, qSel, msgException } from '@shared';\nimport { deleteNotification } from '../global.js';\nimport { addToNotificationTab, increaseNotificationCount } from '../navbar';\nimport { friendRequestCard } from '../profilePage/htmlFolder/friendRequestCard';\n\n// Attach a click event listener to the document\nconst reqId = localStorage.getItem('requesterId');\n/**\n * Attach a click event listener to the document. When a button with the id `addFamily<userId>` is clicked, send a family request to the user identified by the userId and update the button's HTML and disable it.\n it returns the notification details for the approvers tab\n * \n * @param {MouseEvent} e - The event object.\n */\ndocument.onclick = async (e) => {\n  try {\n    // Get the target element's ID\n    const targetId = e.target.id;\n\n    // Check if the ID includes 'addFamily'\n    if (targetId.includes('addFamily')) {\n      // Extract the user ID from the target ID\n      const userId = targetId.replace('addFamily', '');\n\n      // Fetch approver details for the user\n      const approverDetails = await fetchApproverData(userId);\n\n      // Prepare family request data\n      const requesterDetails = getLocalStorageProfile();\n\n      const familyRequestData = {\n        requester: requesterDetails,\n        approver: approverDetails,\n        emailPath: 'msg/request',\n        subject: `${requesterDetails.requesterFirstName} ${requesterDetails.requesterLastName} sent you a family request`,\n      };\n\n      // Send the family request data to the server for processing which returns the notification details for the approvers tab\n      const response = await sendFamilyRequest(familyRequestData);\n\n      // ADD TO THE NOTIFICATION TAB OF THE APPROVER if the famcode on local storage is the same as the approverFamCode\n      const famCode = localStorage.getItem('requesterFamCode');\n      if (famCode === approverDetails.approverCode) {\n        addToNotificationTab(response.data.message);\n        friendRequestCard(requesterDetails);\n        increaseNotificationCount();\n      }\n\n      // Update the button's HTML and disable it\n      updateButton(targetId, 'Request Sent');\n    } else if (targetId.includes('removeProfile')) {\n      // Extract the user ID from the target ID\n      const userId = targetId.replace('removeProfile', '');\n\n      const url = `/allMembers/removeProfile/${userId}/${reqId}`;\n\n      alert(url);\n\n      // include a console to confirm if they truly want to delete the profile\n      if (\n        confirm(\n          'You will no longer see the profile and associated posts. Are you sure you want to delete the profile?',\n        )\n      ) {\n        const notificationHTML = qSel(`.member_profile_${userId}`);\n\n        const response = await axios.delete(url);\n\n        if (response.data.message === 'success') {\n          // remove a html element with call member_profile\n          notificationHTML.remove();\n        } else {\n          msgException(`Error deleting profile`);\n        }\n      }\n    } else if (targetId.includes('seeProfile')) {\n    \n      // Extract the user ID from the target ID\n      const userId = targetId.replace('seeProfile', '');\n\n      // redirect to 'allMembers/setProfile/'+userId\n      window.location.href = `/allMembers/seeProfile/${userId}`;\n    } \n    // else if (targetId.includes('deleteNotification')) {\n    //   // Call the deleteNotification function to remove the notification\n    //   deleteNotification(targetId);\n    // }\n    // Extract the user ID from the target ID\n  } catch (error) {\n    // Handle any errors that occur during execution\n    showError(error);\n  }\n};\n\n// Function to fetch approver data based on user ID\nasync function fetchApproverData(userId) {\n  try {\n    const result = await axios.get(\n      `/members/familyRequestMgt/getApprover?id=${userId}`,\n    );\n    const approverDetails = {\n      approverFirstName: result.data.message.firstName,\n      approverLastName: result.data.message.lastName,\n      approverEmail: result.data.message.email,\n      approverId: result.data.message.id,\n      approverCode: result.data.message.famCode,\n    };\n    return approverDetails;\n  } catch (error) {\n    console.error(error);\n    throw error;\n  }\n}\n\n// Function to retrieve requester details from local storage\nfunction getLocalStorageProfile() {\n  const getRequesterDetails = localStorage.getItem('profile');\n  return JSON.parse(getRequesterDetails);\n}\n\n// Function to send family request data to the server\nasync function sendFamilyRequest(data) {\n  try {\n    return await axios.post('/members/familyRequestMgt', data);\n  } catch (error) {\n    showError(error);\n  }\n}\n\n// Function to update the button's HTML and disable it\nfunction updateButton(targetId, newHTML) {\n  const theTargetId = id(targetId);\n  theTargetId.innerHTML = newHTML;\n  theTargetId.disabled = true;\n}\n\n// ADD THE NEW EVENT TO THE NOTIFICATION TAB\n","import axios from \"axios\";\nimport { id, showError } from \"../global\";\nimport { renderHtml } from \"./html\";\nimport filterMembersByFamCode from \"./filterMembersByFamCode\";\nimport { handleInput } from \"./handleInput\";\n\nconst config = {\n    headers: {\n        'X-Requested-With': 'XMLHttpRequest',\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n    },\n};\n\nconst reqId = localStorage.getItem('requesterId');\nconst URL = process.env.MIX_APP_URL2;\nconst allMembersContainer = id('allMembers');\nconst noMemberHTML = \"There is no one in your network. It is either you didn't include the right family code or you didn't include your other family members during your registration.\";\n\nexport const renderMembers = (data, container, noMemberMessage, html) => {\n    // container.innerHTML = \"\";\n    if (data) {\n        data.forEach(html);\n    } else if (!data) {\n        container.innerHTML = noMemberMessage;\n    } else {\n        data.forEach(html);\n    }\n};\n\n\naxios.get(`${URL}allMembers/processApiData?id=${reqId}`, config)\n    .then(function (response) {\n\n        id('allMembers').innerHTML = \"\";\n\n        if (!response.data) {\n            throw Error('There is no data');\n        }\n\n        const data = response.data;\n\n        const dataWithFamCode = filterMembersByFamCode(data);\n\n        renderMembers(dataWithFamCode, allMembersContainer, noMemberHTML, renderHtml);\n\n        // Remove the \"loader\" class after rendering is complete\n        id('setLoader').classList.remove('loader');\n\n\n\n        id('searchFamily').addEventListener('input', () => handleInput(\n            data,\n            dataWithFamCode,\n            renderMembers\n        )\n\n        );\n\n\n    })\n    .catch(err => showError(err.message));","const reqId = localStorage.getItem('requesterId');\nconst famCode = localStorage.getItem('requesterFamCode');\n\nconst filterMembersByFamCode = (data) => {\n   // Check if data is an array before calling filter\n  if (!Array.isArray(data)) {\n    console.error('Error: data is not an array:');\n  } \n\n    return data.filter(\n      el => el.famCode === famCode || el.requesterCode === famCode || el.postFamCode === famCode || el.eventCode === famCode\n      );\n};\n\nexport default filterMembersByFamCode;","import { id, showError } from \"../global\";\nimport { renderHtml } from \"./html\";\n\nconst reqId = localStorage.getItem('requesterId');\n\nconst allMembersContainer = id('allMembers');\n\nconst noMemberHTML = \"There is no one in your network. It is either you didn't include the right family code or you didn't include your other family members during your registration.\";\n\n\nexport const handleInput = (data, WithFamCode, renderMembers) => {\n    const searchInput = id('searchFamily');\n    const inputVal = searchInput.value.trim().toLowerCase();\n    allMembersContainer.innerHTML = \"\";\n\n    if (inputVal === \"\") {\n        renderMembers(WithFamCode, allMembersContainer, noMemberHTML, renderHtml);\n    } else {\n        let filteredData = data.filter(el =>\n            el.firstName.toLowerCase().includes(inputVal) || el.lastName.toLowerCase().includes(inputVal)\n        );\n\n        if (filteredData.length === 0) {\n            allMembersContainer.innerHTML = \"No matching name found.\";\n        } else {\n            const uniqueItems = {};\n\n            for (const item of filteredData) {\n                if (!uniqueItems[item.id] || item.requester_id == reqId) {\n                    uniqueItems[item.id] = item;\n                }\n            }\n\n            const filteredDataByIdAndCurrentUser = Object.values(uniqueItems);\n         \n            filteredDataByIdAndCurrentUser.forEach(renderHtml);\n        }\n    }\n};","import { format } from \"timeago.js\"\nimport { id, showError } from \"@shared\"\n\nconst toSentenceCase = (str) => {\n     if (str || typeof str == 'string') \n    // {\n    //     throw new Error('Invalid sentence for toSentenceCase function')\n    // }\n    return str\n        .toLowerCase() // Convert the string to lowercase\n        .split(' ')    // Split the string into words\n        .map(word => word.charAt(0).toUpperCase() + word.slice(1)) // Capitalize the first letter of each word\n        .join(' ');    // Join the words back into a string\n}\n\nexport const renderHtml = (el) => {\n    const famCode = localStorage.getItem('requesterFamCode')\n    const reqId = localStorage.getItem('requesterId')\n\n    try {\n        if (!el) {\n            // Handle the case where 'el' is falsy, such as when data is not available.\n            throw new Error('there is no data')\n        }\n\n        const theImg = `/public/img/profile/${el.img}`;\n        const areTheyLinked = famCode == el.famCode || famCode == el.requesterCode;\n        const related = famCode == el.famCode\n        const statusButtonHTML = el.status && el.requester_id === reqId && el.status !== 'Approved' ?\n            el.status :\n            'Connect';\n\n        const disableButton = statusButtonHTML === \"Request sent\" ? \"disabled\" : \"\";\n\n        const fatherName = toSentenceCase(el.father_name);\n        const motherName = toSentenceCase(el.mother_name);\n        const spouseName = toSentenceCase(el.spouseName);\n        // const spouse = toSentenceCase(el.spouseName);\n\n        // Create the HTML content based on whether the user is in the same family or not. // LinkedIn-like card design\n        const html = `\n    <div class=\"member-card member_profile_${el.id}\" id=\"${el.id}\">\n\n       <div class=\"member-card-header\">\n            <img src=\"${el.img ? theImg : 'https://via.placeholder.com/400x400?text=No+Image'}\"  alt=\"Member-${el.firstName}\" class=\"member-avatar\">\n        </div>\n\n        <div class=\"member-card-body\">\n            <h3 class=\"member-name\">${toSentenceCase(el.firstName)} ${toSentenceCase(el.lastName)}</h3>\n            <p class=\"member-location\">${el.country}</p>\n\n  ${areTheyLinked ? `\n    <div class=\"member-details\">\n      <p class=\"member-detail\"><b>Father:</b> ${fatherName || 'Not specified'}</p>\n      <p class=\"member-detail\"><b>Mother:</b> ${motherName || 'Not specified'}</p>\n      <p class=\"member-detail\"><b>Spouse:</b> ${spouseName || 'Not specified'}</p>\n      <p class=\"member-detail\"><b>Mobile:</b> ${el.mobile || 'Not specified'}</p>\n      <p class=\"member-detail\"><b>Member since:</b> ${format(el.created_at)}</p>\n    </div>\n\n            <div class=\"member-stats\">\n                        <div class=\"stat\">\n                            <div class=\"stat-number\">342</div>\n                            <div class=\"stat-label\">Posts</div>\n                        </div>\n                        <div class=\"stat\">\n                            <div class=\"stat-number\">1.2K</div>\n                            <div class=\"stat-label\">Followers</div>\n                        </div>\n                        <div class=\"stat\">\n                            <div class=\"stat-number\">256</div>\n                            <div class=\"stat-label\">Following</div>\n                        </div>\n                    </div>\n\n    <div class=\"member-interests\">\n      <button class=\"btn btn-profile\" id=\"seeProfile${el.id}\">\n        <i class=\"fa fa-user\"></i> See Profile\n      </button>\n      <span class=\"btn btn-remove\" id=\"removeProfile${el.id}\">\n        <i class=\"fa fa-times\"></i> Remove\n      </span>\n    </div>\n  ` : `\n    <div class=\"member-actions\">\n      <button class=\"btn btn-primary btn-sm w-100\" \n              data-user-id=\"addFamily${el.id}\" \n              ${disableButton}\n              onmouseover=\"pulseButton(this)\" \n              onmouseout=\"resetButton(this)\">\n        <i class=\"fa fa-user-plus\"></i> ${statusButtonHTML}\n      </button>\n    </div>\n  `}\n</div>\n\n\n\n    </div>\n`;\n\n\n        id('allMembers').insertAdjacentHTML('beforeend', html);\n\n    } catch (error) {\n\n        showError(error);\n\n    }\n\n\n};","import \"../navbar\"\nimport \"./api\"\nimport \"./allEvents\"\n\n","import axios from \"axios\"\n\nexport const id = (id) => document.getElementById(id)\nexport const idValue = (id) => id(id).value\nexport const idInnerHTML = (id) => id(id).innerHTML\nexport const warningSign = \"\\u26A0\"; // danger warning sign\n\nexport const qSel = (name) => document.querySelector(name)\nexport const qSelAll = (name) => document.querySelectorAll(name)\nexport const qSelValue = (name) => qSel(name).value\nexport const qSelInnerHTML = (name) => qSel(name).innerHTML\n\nexport const log = (id, identifier =null) => {\n    console.log(' start'+ \"  \" + identifier)\n    console.log(id)\n    console.log(' end'+ \"  \" +identifier)\n}\nexport const write = (input) => document.write(input)\n\nexport const hideElement = (elementId) => {\n  id(elementId).style.display = \"none\";\n};\n\nexport const showElement = (elementId) => {\n  id(elementId).style.display = \"block\";\n};\n\nexport const manipulateAttribute = (idName, removeOrSet, attributeType, nameValue =null) => {\n\n    if(removeOrSet === \"remove\") {\n           id(idName).removeAttribute(attributeType)\n    } else {\n        id(idName).setAttribute(attributeType, nameValue)\n    }\n \n  \n}\n\nexport const date2String = (date) => new Date().toDateString(date)\n\nexport const showError = (e) => {\n  \n    log(e.message, \" ERROR MESSAGE\") // \"null has no properties\"\n    log(e.name, \" ERROR NAME\") // \"TypeError\"\n    log(e.fileName,  \" ERROR FILENAME\") // \"Scratchpad/1\"\n    log(e.lineNumber, \" ERROR LINENUMBER\") // 2\n\n    log(e.stack)\n}\n\nexport const msgException = (errorMessage) => {\n  \n    throw new Error(errorMessage)\n}\n\n\n/**\n * \n * @param {*} elementId - element id\n * @param {*} addClass either a success or danger class (green or red)\n * @param {*} message - html message to convey success or failure\n * @param {*} timer - timer for the message to disappear- default is 5 secs\n */\nexport const showNotification = (elementId, addClass, message, timer = 5000) => {\n    // display the success information for 10sec\n    id(`${elementId}`).style.display = \"block\" // unblock the notification\n    id(`${elementId}`).classList.add(addClass) // add the success class\n    id(`${elementId}`).innerHTML = message // error element\n    id('loader').classList.remove('loader') // remove loader\n\n    setTimeout(() => {\n        id(`${elementId}`).style.backgroundColor = \"\"\n        id(`${elementId}`).style.color = \"\"\n        id(`${elementId}`).innerHTML = \"\"\n    }, timer)\n}\n\n    // Function to check for elements and render if they exist\n    export const checkElements = (idOrClass, classString, theFunction = null) => {\n\n        const doesElementExist = (idOrClass === \"id\") ? id(classString) : qSel(classString)\n        // Check if elements exist before calling render function\n        if (doesElementExist.length) {\n            theFunction(doesElementExist);\n        }\n\n    };\n\n     export const checkManyElements = (idOrClass, classString, theFunction = null) => {\n\n        const doesElementExist = (idOrClass === \"id\") ? id(classString) : qSelAll(classString)\n        // Check if elements exist before calling render function\n        if (doesElementExist.length > 0) {\n            theFunction(doesElementExist);\n        }\n\n    };\n\n","\"use strict\";\nimport { id, qSelAll } from '../global';\nimport autocomplete from 'autocompleter';\nimport FormHelper from '../FormHelper';\n\n\nexport const loaderIconBootstrap = () => {\n\n    return `<div class=\"spinner-grow text-primary\" role=\"status\">\n        <span class=\"sr-only\">Loading...</span>\n        </div>`\n}\n\nexport const loaderIcon = () => {\n\n    return `<div class=\"loader\"></div>`\n}\n\nexport const loaderIconBulma = () => {\n\n    return `<div class=\"is-loading\"></div>`\n}\n\nexport const removeDiv = (div_id) => {\n    const div = document.getElementById(div_id)\n    if (div) {\n        return div.remove()\n    }\n\n}\n\n\n\nexport const createAndAppendElement = (elementType, setId, parent, setClass = null) => {\n    const newDiv = document.createElement(elementType);\n    newDiv.setAttribute('id', setId)\n    newDiv.setAttribute('class', `field ${setClass}`)\n    const parentDiv = id(parent)\n    return parentDiv.appendChild(newDiv)\n}\n\n/**\n * \n * @param {the id of the input} inputId \n * @param {the api data or array data} data \n * @param { filterby is the data.filterby }\n */\nexport const autoCompleter = (inputId, data) => {\n    autocomplete({\n        input: inputId,\n        fetch: function (text, update) {\n            text = text.toLowerCase();\n            // you can also use AJAX requests instead of preloaded data\n            const suggestions = data.filter(n => n.firstName.toLowerCase().startsWith(text))\n            update(suggestions);\n        },\n        onSelect: function (item) {\n            input.value = item.firstName;\n        }\n\n    })\n}\n\nexport const distinctValue = (array) => {\n    return [...new Set(array)]\n}\n\nexport const checkBox = (subject) => {\n    return `<div class=\"control\"> \n        <label class=\"radio\">\n          <input type=\"radio\" name=\"send${subject}\" value=\"yes\" id=${subject}Yes > Yes \n        </label>\n        <label class=\"radio\"> \n          <input type=\"radio\" name=\"send${subject}\" value=\"no\" id=${subject}No checked> No \n        </label>\n      </div>`;\n}\n\nexport const checkBox2 = (subject) => {\n    return `<div class=\"control\"> \n        <label class=\"checkbox\">\n          <input type=\"checkbox\" name=\"send${subject}\" value=\"yes\" id=${subject}Yes> Yes \n        </label>\n        <label class=\"checkbox\"> \n          <input type=\"checkbox\" name=\"send${subject}\" value=\"no\" id=${subject}No> No \n        </label>\n      </div>`\n\n}\n\nexport const isChecked = (name, fn) => {\n    const yesId = (`${name}Yes`)\n    const noId = `${name}No`\n    const checked = () => {\n        if (id(yesId).checked) {\n            alert('check')\n            fn()\n        } else if (id(noId).checked) {\n            alert('check No')\n        }\n    }\n    id(yesId).addEventListener('click', checked)\n    id(noId).addEventListener('click', checked)\n}\n\nexport const matchRegex = (data) => {\n    if (data) {\n        if (data != \"Not Provided\") {\n            const regex = /[<?/>]+/g\n            const result = data.match(regex)\n            if (result === null) return true\n        }\n    }\n}\n\n/**\n * \n * @param { id of the first element} first \n * @param {* id of the second element} second \n * @param {* error id - if error - where to show it} err \n */\nexport const matchInput = (first, second, err) => {\n    let error, firstInput, secondInput\n    error = id(err)\n    firstInput = id(first)\n    secondInput = id(second)\n\n    secondInput.addEventListener('keyup', () => {\n\n        if (secondInput.value !== firstInput.value) {\n            error.innerHTML = 'Your passwords do not match'\n            error.style.color = \"red\"\n        } else {\n            error.innerHTML = \"The password is matched: <i class='fa fa-check' aria-hidden='true'></i>\"\n            error.style.color = \"green\"\n        }\n\n\n    })\n}\n\n/**\n * Converts a string to sentence case.\n *\n * Sentence case is a string where the first letter of each word is capitalized, and the rest of the letters are in lowercase.\n *\n * @param {string} str The string to convert to sentence case.\n * @returns {string} A new string in sentence case.\n */\nexport const toSentenceCase = (str) => {\n    return str\n        .toLowerCase() // Convert the string to lowercase\n        .split(' ')    // Split the string into words\n        .map(word => word.charAt(0).toUpperCase() + word.slice(1)) // Capitalize the first letter of each word\n        .join(' ');    // Join the words back into a string\n}\n\nexport const convertFormData = (formId) => {\n    const formInput = qSelAll(formId)\n    const formInputArr = Array.from(formInput)\n    return new FormHelper(formInputArr)\n\n}\n\n\n\nexport const showResponse = (theId, message, status) => {\n    const responseEl = id(theId)\n    const col = status ? 'green' : 'red'\n\n    responseEl.innerHTML = message\n    responseEl.style.color = 'green'\n    responseEl.style.backgroundColor = col\n    responseEl.style.color = 'white';\n    setTimeout(() => {\n        responseEl.innerHTML = '';\n    }, 5000); // Disappear after 5 seconds\n\n}\n\n\n/**\n   *\n   * @param {input is the id of the input/ this is an array [as, it, it]} input\n   * @param {* this is the max policy and it must be an integer} maxi\n   */\n\nexport const realTimeCheckLen = (input, maxi) => {\n    try {\n        for (let i = 0; i < input.length; i++) {\n            const theData = id(`${input[i]}_id`);\n            if (theData === null || theData === undefined || theData === \"\") {\n                throw new Error(`Element with ID '${input[i]}_id' not found or is empty`);\n            }\n            const max = maxi[i];\n            const error = id(`${input[i]}_error`);\n            theData.maxLength = parseInt(max) + 1; // Fixed the parsing issue here\n            theData.addEventListener('keyup', () => {\n                error.innerHTML = (theData.value.length > max) ? `You have reached the maximum limit` : \"\";\n                const help = id(`${input[i]}_help`);\n                help.style.color = 'red';\n                help.style.fontSize = '10px';\n                error.style.color = 'red';\n                setTimeout(() => {\n                    help.style.display = 'none';\n                }, 5000);\n            });\n        }\n    } catch (error) {\n        console.error(error.message);\n    }\n}\n\n\n","import { format, render } from \"timeago.js\"\nimport { id, showError, qSel, msgException, log } from '@shared'\nimport { toSentenceCase } from \"./helper/general\"\n\n// const timeAgo = (x) => format(x)\nimport axios from \"axios\"\nimport { qSelAll } from \"@modernman00/shared-js-lib\";\n// import { html } from './profilePage/html';\n\n\n// Update notification badge\nfunction updateNotificationBadge(change) {\n    const badge = document.querySelector('.notification-badge');\n    let count = parseInt(badge.textContent);\n    count += change;\n    if (count <= 0) {\n        badge.style.display = 'none';\n    } else {\n        badge.textContent = count;\n        badge.style.display = 'flex';\n    }\n}\n\n\nconst postAgoNotification = (date) => {\n    return `\n  <div class=\"notification_timeago w3-left w3-opacity\" datetime='${date}' title='${format(date)}'> ${format(date)}\n  </div>`\n}\n// this is the notification htnl \nconst notificationHTML = (data) => {\n\n    // Map notification types to icon classes\n    // Map type → { icon, colour }\n    const iconMap = {\n        friend_request: { icon: \"bi bi-person-plus\", color: \"text-primary\" },   // Blue\n        like: { icon: \"bi bi-hand-thumbs-up\", color: \"text-success\" }, // Green\n        comment: { icon: \"bi bi-chat-dots\", color: \"text-info\" },         // Cyan\n        anniversary: { icon: \"fa-solid fa-cake-candles\", color: \"text-warning\" }, // Gold\n        new_post: { icon: \"bi bi-file-post\", color: \"text-purple\" },       // Custom purple\n        default: { icon: \"bi bi-bell\", color: \"text-secondary\" }          // Grey\n    };\n\n    const { icon, color } = iconMap[data.notification_type] || iconMap.default\n    const readOrUnread = (data.notification_status === 'clicked') ? 'read' : 'unread'\n    const { sender_id, notification_name, notification_content, created_at, no } = data\n\n\n    // generate random numbers to make the notification unique\n\n    let randomNumber = Math.floor(100 + Math.random() * 900);\n\n    return `<div id = \"notificationBar${sender_id}${randomNumber}\"   class=\"list-group-item list-group-item-action d-flex align-items-start notification_real_time ${readOrUnread} notification-item linkRequestCard\">\n\n    \n            <div class=\"notification-icon ${color}\">\n                <i class=\"${icon}\"></i></div>\n            <div class=\"notification-text\">\n                <strong>${notification_name}</strong>\n                <small>${notification_content}</small>\n                <div class=\"notification-time\"> ${postAgoNotification(created_at)} </div>\n            </div>\n            <button class=\"notification-delete btn btn-sm btn-outline-secondary btn-light\" \n                 \" \n                    data-no=\"${no}\"\n                    id=\"deleteNotification${sender_id}${randomNumber}\"\n                    aria-label=\"Delete notification\">\n                <i class=\"bi bi-x-circle\"></i>\n            </button>\n \n\n  </div>\n\n  `\n}\n\n\n\n// CLICK FUNCTION ON THE NOTIFICATION BAR THAT TAKES ONE TO THE FRIEND REQUEST CARD\n\nexport const increaseNotificationCount = () => {\n    const currentNotificationCount = parseInt(\n        sessionStorage.getItem('notificationCount')) + 1\n\n    id('notification_count').innerHTML = currentNotificationCount\n}\n\nexport const addToNotificationTab = (data) => {\n\n    return qSel('.notification_tab').insertAdjacentHTML('afterbegin', notificationHTML(data));\n\n}\n\n\nconst yourId = localStorage.getItem('requesterId');\nconst famCode = localStorage.getItem('requesterFamCode');\nconst notificationURL = `/member/notifications/id/${yourId}/${famCode}`;\n\n\n// get all the notification and display them \n// they are already filtered by famCode and id \n// for the family request, connection is done by id\n// for events -birthday etc, the connection is the famCode \n// so linked notification will be either where id matches or famcode matches\n\naxios.get(notificationURL)\n    .then(res => {\n\n        // Extract the notifications from the response\n        const data = res.data.message;\n\n        if (data) {\n\n            if (data.length > 0) {\n\n                // Display the count of notifications\n                id('notification_count').innerHTML = data.length;\n\n                // Store the notification count in session storage\n                sessionStorage.setItem('notificationCount', data.length);\n\n                // Display each notification\n                data.forEach(element => {\n                    addToNotificationTab(element);\n                });\n                // Update the timing of notifications\n                const updateNotificationTiming = document.querySelectorAll(\".notification_timeago\");\n                render(updateNotificationTiming);\n            } else {\n                id('notification_count').innerHTML = 0;\n            }\n\n        }\n\n\n    })\n    .catch(error => {\n        // Handle any errors that occur during the process\n        showError(error);\n    });\n\n\n// delete a notification \n\n// delete notification \n\n\n\n\n// document.addEventListener('click', async (e) => {\n//     const id = e.target.id;\n//        log(id)\n//     // if (!id.includes('deleteNotification')) return;\n\n//     // const deleteBtn = id(id);\n//     // const sender_id = deleteBtn.getAttribute('data-id');\n\n//     // const url = `/removeNotification/${yourId}/${famCode}/${sender_id}`\n//     // const response = axios.put(url)\n\n//     // if (response.data.message === \"Notification marked as read\") {\n\n//     //     // remove a html element with notificationBar after 2 mins \n//     //     qSel(`#${deleteBtn.id}`).closest('.notification_real_time')?.remove();\n\n//     //     // reduce the notification count as you have deleted the notification\n\n//     //     const newValues = parseInt(sessionStorage.getItem('notificationCount') - 1)\n//     //     id('notification_count').innerHTML = newValues;\n//     // } else {\n//     //     msgException(\"Error removing notification\" + \" \" + response.data.message);\n//     // }\n// })\n\n\nconst notificationBtn = id('notificationBtn');\nconst notificationDropdown = id('notificationDropdown');\nconst markAllReadBtn = id('markAllRead');\nconst notificationCount = id('notification_count');\n\n// Toggle dropdown visibility\nnotificationBtn.addEventListener('click', function (e) {\n    e.stopPropagation();\n    notificationDropdown.classList.toggle('show');\n});\n\n// Close dropdown when clicking outside\ndocument.addEventListener('click', function (e) {\n    if (!notificationBtn.contains(e.target) && !notificationDropdown.contains(e.target)) {\n        notificationDropdown.classList.remove('show');\n    }\n});\n\n// Prevent dropdown from closing when clicking inside it\nnotificationDropdown.addEventListener('click', function (e) {\n    e.stopPropagation();\n});\n\n// Mark all as read functionality\nmarkAllReadBtn.addEventListener('click', function () {\n    const unreadItems = document.querySelectorAll('.notification-item.unread');\n    unreadItems.forEach(item => {\n        item.classList.remove('unread');\n    });\n\n    // Update notification count\n    notificationCount.textContent = '0';\n    notificationCount.style.display = 'none';\n});\n\n/* run once, after the dropdown HTML is in the page */\nconst initDeleteOnce = () => {\n    const tab = document.getElementById('notification_tab'); // static parent\n    if (!tab) return;\n\n    tab.addEventListener('click', e => {\n        const btn = e.target.closest('button[id*=\"deleteNotification\"]');\n        if (!btn) return;                   // not a delete button → ignore\n\n        e.stopPropagation();                // keep dropdown open\n        const bannerId = btn.id.replace('deleteNotification', 'notificationBar');\n        const no = btn.getAttribute('data-no');\n    \n\n        const url = `/removeNotification/${no}`;\n\n\n        axios.put(url)\n            .then(response => {\n                if (response.data.message === 'Notification marked as read') {\n                    // remove a html element with notificationBar after 2 mins\n                    document.getElementById(bannerId)?.remove();\n\n                    // reduce the notification count as you have deleted the notification\n                    const newValues = parseInt(sessionStorage.getItem('notificationCount') - 1);\n                    sessionStorage.setItem('notificationCount', newValues);\n                    id('notification_count').innerHTML = newValues;\n                } else {\n                    msgException('Error removing notification' + ' ' + response.data.message);\n                }\n                // your counter routine\n            });\n    })\n}\n\n/* safe entry point */\ndocument.readyState === 'loading'\n    ? document.addEventListener('DOMContentLoaded', initDeleteOnce)\n    : initDeleteOnce();\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n///member/notifications","import { qSel } from '@shared'\nconst appUrl = process.env.MIX_APP_URL2;\nconst approverId = encodeURIComponent(localStorage.getItem('requesterId'))\n\n\nexport const friendRequestCard = (data) => {\n\n  const imageUrl = `/public/img/profile/${encodeURIComponent(data.img ?? data.requesterProfileImg)}`;\n  const firstName = encodeURIComponent(data.firstName ?? data.requesterFirstName);\n  const lastName = encodeURIComponent(data.lastName ?? data.requesterLastName);\n  const requestId = encodeURIComponent(data.id ?? data.requesterId);\n  const requestCode = encodeURIComponent(data.famCode ?? data.requesterFamCode);\n  const mutualFriends = '2 mutual friends';\n\n\n  const html = `<p id=${requestId}_linkRequestCard></p>\n\n    <div class=\"d-flex align-items-center mb-3 friend-request-card\">\n      <img src=\"${imageUrl}\" alt=\"Avatar\" class=\"avatar me-3><br>\n\n        <div class=\"flex-grow-1\">\n          <h6 class=\"mb-0\">${firstName} ${lastName}</h6>\n          <small class=\"text-muted\">${mutualFriends}</small>\n        </div>\n    </div>\n\n    <div class=\"friend-request-actions mb-3\">\n\n              <a href=\"${appUrl}member/request/${requestId}/${approverId}/50/${requestCode}/pp\" class=\"btn btn-sm btn-primary\" title=\"confirm\">Confirm</a>\n\n\n              <a href=\"${appUrl}member/request/${requestId}/${approverId}/10\" class=\"btn btn-sm btn-outline-secondary\" title=\"Decline\">Decline</a>\n\n    </div>\n  `;\n\n  qSel('.requestFriendClass').insertAdjacentHTML('afterbegin', html);\n\n\n\n\n\n\n\n\n\n\n\n\n\n}"],"names":[],"sourceRoot":""}